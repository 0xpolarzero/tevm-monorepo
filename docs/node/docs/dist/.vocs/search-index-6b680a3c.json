{"documentCount":474,"nextId":474,"documentIds":{"0":"docs/pages/getting-started.mdx#getting-started","1":"docs/pages/getting-started.mdx#installation","2":"docs/pages/getting-started.mdx#quick-examples","3":"docs/pages/getting-started.mdx#1-raw-tevm-node-api","4":"docs/pages/getting-started.mdx#2-using-with-viem","5":"docs/pages/getting-started.mdx#3-using-with-ethers","6":"docs/pages/getting-started.mdx#quick-start","7":"docs/pages/getting-started.mdx#learning-path","8":"docs/pages/getting-started.mdx#1-core-concepts","9":"docs/pages/getting-started.mdx#2-essential-apis","10":"docs/pages/getting-started.mdx#3-integration-examples","11":"docs/pages/getting-started.mdx#4-advanced-features","12":"docs/pages/getting-started.mdx#key-features","13":"docs/pages/getting-started.mdx#forking--state-management","14":"docs/pages/getting-started.mdx#performance--flexibility","15":"docs/pages/getting-started.mdx#developer-experience","16":"docs/pages/getting-started.mdx#package-documentation","17":"docs/pages/getting-started.mdx#core-packages","18":"docs/pages/getting-started.mdx#transaction--block-handling","19":"docs/pages/getting-started.mdx#client--communication","20":"docs/pages/getting-started.mdx#smart-contract-tools","21":"docs/pages/getting-started.mdx#utilities--helpers","22":"docs/pages/getting-started.mdx#development--error-handling","23":"docs/pages/getting-started.mdx#storage--synchronization","24":"docs/pages/getting-started.mdx#additional-resources","25":"docs/pages/advanced/custom-precompiles.mdx#custom-precompiles","26":"docs/pages/advanced/custom-precompiles.mdx#using-tevmprecompiles","27":"docs/pages/advanced/custom-precompiles.mdx#basic-usage","28":"docs/pages/advanced/custom-precompiles.mdx#precompile-interface","29":"docs/pages/advanced/custom-precompiles.mdx#example-implementations","30":"docs/pages/advanced/custom-precompiles.mdx#1-state-access-precompile","31":"docs/pages/advanced/custom-precompiles.mdx#2-gas-calculation-precompile","32":"docs/pages/advanced/custom-precompiles.mdx#3-error-handling-precompile","33":"docs/pages/advanced/custom-precompiles.mdx#4-multiple-precompiles","34":"docs/pages/advanced/custom-precompiles.mdx#best-practices","35":"docs/pages/advanced/custom-precompiles.mdx#related-topics","36":"docs/pages/advanced/performance-profiler.mdx#performance--profiler","37":"docs/pages/advanced/performance-profiler.mdx#enabling-the-profiler","38":"docs/pages/advanced/performance-profiler.mdx#collecting-performance-data","39":"docs/pages/advanced/performance-profiler.mdx#log-types","40":"docs/pages/advanced/performance-profiler.mdx#analyzing-performance","41":"docs/pages/advanced/performance-profiler.mdx#1-opcode-analysis","42":"docs/pages/advanced/performance-profiler.mdx#2-call-tree-analysis","43":"docs/pages/advanced/performance-profiler.mdx#3-gas-usage-patterns","44":"docs/pages/advanced/performance-profiler.mdx#use-cases","45":"docs/pages/advanced/performance-profiler.mdx#1-contract-optimization","46":"docs/pages/advanced/performance-profiler.mdx#2-comparative-analysis","47":"docs/pages/advanced/performance-profiler.mdx#3-gas-optimization","48":"docs/pages/advanced/performance-profiler.mdx#best-practices","49":"docs/pages/advanced/performance-profiler.mdx#related-topics","50":"docs/pages/advanced/receipts-and-logs.mdx#receipts--logs","51":"docs/pages/advanced/receipts-and-logs.mdx#receipt-management","52":"docs/pages/advanced/receipts-and-logs.mdx#receipt-types","53":"docs/pages/advanced/receipts-and-logs.mdx#event-logs","54":"docs/pages/advanced/receipts-and-logs.mdx#contract-deployment-and-event-emission","55":"docs/pages/advanced/receipts-and-logs.mdx#querying-logs","56":"docs/pages/advanced/receipts-and-logs.mdx#error-handling","57":"docs/pages/advanced/receipts-and-logs.mdx#performance-considerations","58":"docs/pages/advanced/receipts-and-logs.mdx#best-practices","59":"docs/pages/advanced/receipts-and-logs.mdx#related-topics","60":"docs/pages/advanced/txpool.mdx#transaction-pool","61":"docs/pages/advanced/txpool.mdx#quick-start","62":"docs/pages/advanced/txpool.mdx#key-features","63":"docs/pages/advanced/txpool.mdx#core-concepts","64":"docs/pages/advanced/txpool.mdx#pool-limits","65":"docs/pages/advanced/txpool.mdx#transaction-lifecycle","66":"docs/pages/advanced/txpool.mdx#detailed-usage","67":"docs/pages/advanced/txpool.mdx#adding-transactions","68":"docs/pages/advanced/txpool.mdx#transaction-replacement","69":"docs/pages/advanced/txpool.mdx#querying-transactions","70":"docs/pages/advanced/txpool.mdx#block-processing","71":"docs/pages/advanced/txpool.mdx#advanced-features","72":"docs/pages/advanced/txpool.mdx#pool-management","73":"docs/pages/advanced/txpool.mdx#transaction-types","74":"docs/pages/advanced/txpool.mdx#best-practices","75":"docs/pages/advanced/txpool.mdx#1-transaction-creation","76":"docs/pages/advanced/txpool.mdx#2-error-handling","77":"docs/pages/advanced/txpool.mdx#3-performance-optimization","78":"docs/pages/advanced/txpool.mdx#4-memory-management","79":"docs/pages/advanced/txpool.mdx#api-reference","80":"docs/pages/advanced/txpool.mdx#txpool-class","81":"docs/pages/advanced/txpool.mdx#related-topics","82":"docs/pages/api/account-management.mdx#account-management","83":"docs/pages/api/account-management.mdx#getaccounthandler","84":"docs/pages/api/account-management.mdx#parameters","85":"docs/pages/api/account-management.mdx#return-type","86":"docs/pages/api/account-management.mdx#example","87":"docs/pages/api/account-management.mdx#setaccounthandler","88":"docs/pages/api/account-management.mdx#parameters-1","89":"docs/pages/api/account-management.mdx#return-type-1","90":"docs/pages/api/account-management.mdx#examples","91":"docs/pages/api/account-management.mdx#1-setting-account-balance","92":"docs/pages/api/account-management.mdx#2-deploying-contract-code","93":"docs/pages/api/account-management.mdx#3-modifying-multiple-properties","94":"docs/pages/api/account-management.mdx#best-practices","95":"docs/pages/api/account-management.mdx#related-topics","96":"docs/pages/api/actions.mdx#tevmactions","97":"docs/pages/api/actions.mdx#installation","98":"docs/pages/api/actions.mdx#main-categories","99":"docs/pages/api/actions.mdx#base-actions","100":"docs/pages/api/actions.mdx#ethereum-json-rpc-actions","101":"docs/pages/api/actions.mdx#account--network","102":"docs/pages/api/actions.mdx#state-reading","103":"docs/pages/api/actions.mdx#block-operations","104":"docs/pages/api/actions.mdx#transaction-operations","105":"docs/pages/api/actions.mdx#logs--filters","106":"docs/pages/api/actions.mdx#anvil-testing--development-actions","107":"docs/pages/api/actions.mdx#state-manipulation","108":"docs/pages/api/actions.mdx#account-management","109":"docs/pages/api/actions.mdx#transaction-management","110":"docs/pages/api/actions.mdx#state-management","111":"docs/pages/api/actions.mdx#debug-actions","112":"docs/pages/api/actions.mdx#usage-example","113":"docs/pages/api/actions.mdx#error-handling","114":"docs/pages/api/actions.mdx#see-also","115":"docs/pages/api/block.mdx#block","116":"docs/pages/api/block.mdx#block-class","117":"docs/pages/api/block.mdx#constructor","118":"docs/pages/api/block.mdx#static-methods","119":"docs/pages/api/block.mdx#fromblockdatablockdata-blockdata-opts-blockoptions-block","120":"docs/pages/api/block.mdx#fromrlpserializedblockserialized-uint8array-opts-blockoptions-block","121":"docs/pages/api/block.mdx#fromvaluesarrayvalues-blockbytes-opts-blockoptions-block","122":"docs/pages/api/block.mdx#instance-methods","123":"docs/pages/api/block.mdx#hash-uint8array","124":"docs/pages/api/block.mdx#serialize-uint8array","125":"docs/pages/api/block.mdx#tojson-jsonblock","126":"docs/pages/api/block.mdx#types","127":"docs/pages/api/block.mdx#headerdata","128":"docs/pages/api/block.mdx#see-also","129":"docs/pages/api/blockchain.mdx#blockchain-package","130":"docs/pages/api/blockchain.mdx#main-exports","131":"docs/pages/api/blockchain.mdx#chain-interface","132":"docs/pages/api/blockchain.mdx#creating-a-chain","133":"docs/pages/api/blockchain.mdx#chainoptions","134":"docs/pages/api/blockchain.mdx#core-functionality","135":"docs/pages/api/blockchain.mdx#block-management","136":"docs/pages/api/blockchain.mdx#adding-blocks","137":"docs/pages/api/blockchain.mdx#retrieving-blocks","138":"docs/pages/api/blockchain.mdx#deleting-blocks","139":"docs/pages/api/blockchain.mdx#chain-state","140":"docs/pages/api/blockchain.mdx#header-validation","141":"docs/pages/api/blockchain.mdx#iterator-management","142":"docs/pages/api/blockchain.mdx#chain-copying","143":"docs/pages/api/blockchain.mdx#events","144":"docs/pages/api/blockchain.mdx#error-handling","145":"docs/pages/api/blockchain.mdx#usage-example","146":"docs/pages/api/common.mdx#common-package","147":"docs/pages/api/common.mdx#main-exports","148":"docs/pages/api/common.mdx#common-type","149":"docs/pages/api/common.mdx#creating-a-common-instance","150":"docs/pages/api/common.mdx#commonoptions","151":"docs/pages/api/common.mdx#hardfork-support","152":"docs/pages/api/common.mdx#preset-chains","153":"docs/pages/api/common.mdx#usage-examples","154":"docs/pages/api/common.mdx#basic-usage","155":"docs/pages/api/common.mdx#custom-chain-configuration","156":"docs/pages/api/common.mdx#using-with-ethereumjs","157":"docs/pages/api/common.mdx#state-management","158":"docs/pages/api/common.mdx#error-handling","159":"docs/pages/api/common.mdx#custom-cryptography","160":"docs/pages/api/common.mdx#see-also","161":"docs/pages/api/contracts.mdx#contract-utilities","162":"docs/pages/api/contracts.mdx#createcontract","163":"docs/pages/api/contracts.mdx#contract-with-address","164":"docs/pages/api/contracts.mdx#standard-contracts","165":"docs/pages/api/contracts.mdx#deployless-scripts","166":"docs/pages/api/contracts.mdx#contract-types","167":"docs/pages/api/contracts.mdx#best-practices","168":"docs/pages/api/contracts.mdx#1-type-safety","169":"docs/pages/api/contracts.mdx#2-error-handling","170":"docs/pages/api/contracts.mdx#3-gas-management","171":"docs/pages/api/contracts.mdx#4-event-handling","172":"docs/pages/api/contracts.mdx#related-topics","173":"docs/pages/api/decorators.mdx#tevmdecorators","174":"docs/pages/api/decorators.mdx#installation","175":"docs/pages/api/decorators.mdx#main-apis","176":"docs/pages/api/decorators.mdx#ethactionsapi","177":"docs/pages/api/decorators.mdx#tevmactionsapi","178":"docs/pages/api/decorators.mdx#tevmsendapi","179":"docs/pages/api/decorators.mdx#decorators","180":"docs/pages/api/decorators.mdx#ethactions","181":"docs/pages/api/decorators.mdx#tevmactions","182":"docs/pages/api/decorators.mdx#examples","183":"docs/pages/api/decorators.mdx#using-ethactionsapi","184":"docs/pages/api/decorators.mdx#using-tevmactionsapi","185":"docs/pages/api/decorators.mdx#types","186":"docs/pages/api/decorators.mdx#see-also","187":"docs/pages/api/evm-events.mdx#evm-events","188":"docs/pages/api/evm-events.mdx#available-events","189":"docs/pages/api/evm-events.mdx#basic-usage","190":"docs/pages/api/evm-events.mdx#debugging-example","191":"docs/pages/api/evm-events.mdx#gas-profiling","192":"docs/pages/api/evm-events.mdx#error-handling","193":"docs/pages/api/evm-events.mdx#best-practices","194":"docs/pages/api/evm-events.mdx#related-topics","195":"docs/pages/api/evm.mdx#tevmevm","196":"docs/pages/api/evm.mdx#installation","197":"docs/pages/api/evm.mdx#main-components","198":"docs/pages/api/evm.mdx#evm-class","199":"docs/pages/api/evm.mdx#methods","200":"docs/pages/api/evm.mdx#creating-an-evm-instance","201":"docs/pages/api/evm.mdx#custom-precompiles","202":"docs/pages/api/evm.mdx#types","203":"docs/pages/api/evm.mdx#error-handling","204":"docs/pages/api/evm.mdx#events-and-debugging","205":"docs/pages/api/evm.mdx#see-also","206":"docs/pages/api/json-rpc.mdx#json-rpc-support","207":"docs/pages/api/json-rpc.mdx#eip-1193-provider","208":"docs/pages/api/json-rpc.mdx#supported-methods","209":"docs/pages/api/json-rpc.mdx#core-ethereum-methods","210":"docs/pages/api/json-rpc.mdx#extended-methods","211":"docs/pages/api/json-rpc.mdx#client-integration","212":"docs/pages/api/json-rpc.mdx#using-with-viem","213":"docs/pages/api/json-rpc.mdx#using-with-ethers","214":"docs/pages/api/json-rpc.mdx#error-handling","215":"docs/pages/api/json-rpc.mdx#best-practices","216":"docs/pages/api/json-rpc.mdx#related-topics","217":"docs/pages/api/json-rpc.mdx#using-tevm-actions","218":"docs/pages/api/json-rpc.mdx#optimistic-updates-with-receipt-manager","219":"docs/pages/api/memory-client.mdx#memoryclient","220":"docs/pages/api/memory-client.mdx#installation","221":"docs/pages/api/memory-client.mdx#basic-usage","222":"docs/pages/api/memory-client.mdx#forking","223":"docs/pages/api/memory-client.mdx#contract-interactions","224":"docs/pages/api/memory-client.mdx#deploying-contracts","225":"docs/pages/api/memory-client.mdx#interacting-with-existing-contracts","226":"docs/pages/api/memory-client.mdx#test-actions","227":"docs/pages/api/memory-client.mdx#time-manipulation","228":"docs/pages/api/memory-client.mdx#state-snapshots","229":"docs/pages/api/memory-client.mdx#account-management","230":"docs/pages/api/memory-client.mdx#mining-configuration","231":"docs/pages/api/memory-client.mdx#error-handling","232":"docs/pages/api/memory-client.mdx#see-also","233":"docs/pages/api/receipt-manager.mdx#tevmreceipt-manager","234":"docs/pages/api/receipt-manager.mdx#installation","235":"docs/pages/api/receipt-manager.mdx#main-components","236":"docs/pages/api/receipt-manager.mdx#receiptsmanager","237":"docs/pages/api/receipt-manager.mdx#methods","238":"docs/pages/api/receipt-manager.mdx#receipt-types","239":"docs/pages/api/receipt-manager.mdx#basetxreceipt","240":"docs/pages/api/receipt-manager.mdx#prebyzantiumtxreceipt","241":"docs/pages/api/receipt-manager.mdx#postbyzantiumtxreceipt","242":"docs/pages/api/receipt-manager.mdx#eip4844blobtxreceipt","243":"docs/pages/api/receipt-manager.mdx#usage-examples","244":"docs/pages/api/receipt-manager.mdx#saving-and-retrieving-receipts","245":"docs/pages/api/receipt-manager.mdx#working-with-transaction-receipts","246":"docs/pages/api/receipt-manager.mdx#querying-logs","247":"docs/pages/api/receipt-manager.mdx#constants","248":"docs/pages/api/receipt-manager.mdx#see-also","249":"docs/pages/api/state.mdx#tevmstate","250":"docs/pages/api/state.mdx#installation","251":"docs/pages/api/state.mdx#main-components","252":"docs/pages/api/state.mdx#statemanager","253":"docs/pages/api/state.mdx#creating-a-state-manager","254":"docs/pages/api/state.mdx#core-functionality","255":"docs/pages/api/state.mdx#account-management","256":"docs/pages/api/state.mdx#contract-management","257":"docs/pages/api/state.mdx#state-management","258":"docs/pages/api/state.mdx#state-dumping-and-proofs","259":"docs/pages/api/state.mdx#cache-management","260":"docs/pages/api/state.mdx#best-practices","261":"docs/pages/api/state.mdx#related-topics","262":"docs/pages/api/tx.mdx#tevmtx","263":"docs/pages/api/tx.mdx#installation","264":"docs/pages/api/tx.mdx#main-components","265":"docs/pages/api/tx.mdx#transaction-types","266":"docs/pages/api/tx.mdx#transactionfactory","267":"docs/pages/api/tx.mdx#impersonated-transactions","268":"docs/pages/api/tx.mdx#transaction-types-1","269":"docs/pages/api/tx.mdx#legacy-transactions","270":"docs/pages/api/tx.mdx#eip-2930-transactions","271":"docs/pages/api/tx.mdx#eip-1559-transactions","272":"docs/pages/api/tx.mdx#eip-4844-transactions","273":"docs/pages/api/tx.mdx#common-operations","274":"docs/pages/api/tx.mdx#creating-transactions","275":"docs/pages/api/tx.mdx#signing-transactions","276":"docs/pages/api/tx.mdx#transaction-methods","277":"docs/pages/api/tx.mdx#error-handling","278":"docs/pages/api/tx.mdx#see-also","279":"docs/pages/api/txpool.mdx#tevmtxpool","280":"docs/pages/api/txpool.mdx#installation","281":"docs/pages/api/txpool.mdx#main-components","282":"docs/pages/api/txpool.mdx#txpool-class","283":"docs/pages/api/txpool.mdx#constructor-options","284":"docs/pages/api/txpool.mdx#core-methods","285":"docs/pages/api/txpool.mdx#adding-transactions","286":"docs/pages/api/txpool.mdx#retrieving-transactions","287":"docs/pages/api/txpool.mdx#removing-transactions","288":"docs/pages/api/txpool.mdx#pool-management","289":"docs/pages/api/txpool.mdx#configuration-constants","290":"docs/pages/api/txpool.mdx#transaction-types","291":"docs/pages/api/txpool.mdx#pool-state-management","292":"docs/pages/api/txpool.mdx#pool-data-structure","293":"docs/pages/api/txpool.mdx#time-limits","294":"docs/pages/api/txpool.mdx#transaction-validation","295":"docs/pages/api/txpool.mdx#error-handling","296":"docs/pages/api/txpool.mdx#usage-example","297":"docs/pages/api/txpool.mdx#see-also","298":"docs/pages/api/utils.mdx#utilities--addresses","299":"docs/pages/api/utils.mdx#createaddress","300":"docs/pages/api/utils.mdx#signature","301":"docs/pages/api/utils.mdx#behavior--notes","302":"docs/pages/api/utils.mdx#address-class","303":"docs/pages/api/utils.mdx#createcontractaddress","304":"docs/pages/api/utils.mdx#usage","305":"docs/pages/api/utils.mdx#error-handling","306":"docs/pages/api/utils.mdx#common-errors","307":"docs/pages/api/utils.mdx#other-handy-utilities","308":"docs/pages/api/utils.mdx#tevmutils","309":"docs/pages/api/utils.mdx#installation","310":"docs/pages/api/utils.mdx#main-components","311":"docs/pages/api/utils.mdx#data-types-and-encoding","312":"docs/pages/api/utils.mdx#hex-and-bytes-conversion","313":"docs/pages/api/utils.mdx#type-checking","314":"docs/pages/api/utils.mdx#ethereum-specific","315":"docs/pages/api/utils.mdx#unit-conversion","316":"docs/pages/api/utils.mdx#cryptographic-functions","317":"docs/pages/api/utils.mdx#abi-encodingdecoding","318":"docs/pages/api/utils.mdx#rlp-encodingdecoding","319":"docs/pages/api/utils.mdx#memory-database","320":"docs/pages/api/utils.mdx#event-emitter","321":"docs/pages/api/utils.mdx#types","322":"docs/pages/api/utils.mdx#basic-types","323":"docs/pages/api/utils.mdx#abi-types","324":"docs/pages/api/utils.mdx#contract-types","325":"docs/pages/api/utils.mdx#constants","326":"docs/pages/api/utils.mdx#error-handling-1","327":"docs/pages/api/utils.mdx#see-also","328":"docs/pages/api/vm-and-submodules.mdx#vm--submodules","329":"docs/pages/api/vm-and-submodules.mdx#overview","330":"docs/pages/api/vm-and-submodules.mdx#evm-module","331":"docs/pages/api/vm-and-submodules.mdx#key-features","332":"docs/pages/api/vm-and-submodules.mdx#common-operations","333":"docs/pages/api/vm-and-submodules.mdx#blockchain-module","334":"docs/pages/api/vm-and-submodules.mdx#fork-support","335":"docs/pages/api/vm-and-submodules.mdx#statemanager","336":"docs/pages/api/vm-and-submodules.mdx#working-with-accounts","337":"docs/pages/api/vm-and-submodules.mdx#transaction-pool","338":"docs/pages/api/vm-and-submodules.mdx#transaction-validation","339":"docs/pages/api/vm-and-submodules.mdx#receiptsmanager","340":"docs/pages/api/vm-and-submodules.mdx#working-with-logs","341":"docs/pages/api/vm-and-submodules.mdx#best-practices","342":"docs/pages/api/vm-and-submodules.mdx#related-topics","343":"docs/pages/api/vm.mdx#tevmvm","344":"docs/pages/api/vm.mdx#installation","345":"docs/pages/api/vm.mdx#main-components","346":"docs/pages/api/vm.mdx#creating-a-vm-instance","347":"docs/pages/api/vm.mdx#vm-options","348":"docs/pages/api/vm.mdx#core-functionality","349":"docs/pages/api/vm.mdx#block-operations","350":"docs/pages/api/vm.mdx#building-blocks","351":"docs/pages/api/vm.mdx#running-blocks","352":"docs/pages/api/vm.mdx#transaction-operations","353":"docs/pages/api/vm.mdx#state-management","354":"docs/pages/api/vm.mdx#events","355":"docs/pages/api/vm.mdx#block-building","356":"docs/pages/api/vm.mdx#types","357":"docs/pages/api/vm.mdx#runblockopts","358":"docs/pages/api/vm.mdx#runtxopts","359":"docs/pages/api/vm.mdx#error-handling","360":"docs/pages/api/vm.mdx#usage-example","361":"docs/pages/api/vm.mdx#see-also","362":"docs/pages/examples/debugger-ui.mdx#building-a-debugger-ui","363":"docs/pages/examples/debugger-ui.mdx#project-setup","364":"docs/pages/examples/debugger-ui.mdx#components","365":"docs/pages/examples/debugger-ui.mdx#1-evmdebuggersvelte","366":"docs/pages/examples/debugger-ui.mdx#2-appsvelte","367":"docs/pages/examples/debugger-ui.mdx#advanced-features","368":"docs/pages/examples/debugger-ui.mdx#memory-viewer-component","369":"docs/pages/examples/debugger-ui.mdx#storage-viewer-component","370":"docs/pages/examples/debugger-ui.mdx#usage","371":"docs/pages/examples/debugger-ui.mdx#customization","372":"docs/pages/examples/debugger-ui.mdx#adding-transaction-history","373":"docs/pages/examples/debugger-ui.mdx#adding-gas-profiling","374":"docs/pages/examples/debugger-ui.mdx#related-topics","375":"docs/pages/examples/ethers.mdx#using-with-ethersjs","376":"docs/pages/examples/ethers.mdx#basic-setup","377":"docs/pages/examples/ethers.mdx#contract-interaction","378":"docs/pages/examples/ethers.mdx#1-reading-contract-state","379":"docs/pages/examples/ethers.mdx#2-writing-to-contracts","380":"docs/pages/examples/ethers.mdx#event-handling","381":"docs/pages/examples/ethers.mdx#1-listening-for-events","382":"docs/pages/examples/ethers.mdx#2-querying-past-events","383":"docs/pages/examples/ethers.mdx#advanced-usage","384":"docs/pages/examples/ethers.mdx#1-contract-deployment","385":"docs/pages/examples/ethers.mdx#2-low-level-transaction-handling","386":"docs/pages/examples/ethers.mdx#3-interface-encodingdecoding","387":"docs/pages/examples/ethers.mdx#testing-with-ethers","388":"docs/pages/examples/ethers.mdx#best-practices","389":"docs/pages/examples/ethers.mdx#related-topics","390":"docs/pages/examples/forking-mainnet.mdx#forking-mainnet-example","391":"docs/pages/examples/forking-mainnet.mdx#basic-fork-setup","392":"docs/pages/examples/forking-mainnet.mdx#account-impersonation","393":"docs/pages/examples/forking-mainnet.mdx#working-with-forked-contracts","394":"docs/pages/examples/forking-mainnet.mdx#fork-at-specific-block","395":"docs/pages/examples/forking-mainnet.mdx#multiple-network-support","396":"docs/pages/examples/local-testing.mdx#local-testing","397":"docs/pages/examples/local-testing.mdx#basic-test-setup","398":"docs/pages/examples/local-testing.mdx#contract-testing","399":"docs/pages/examples/local-testing.mdx#1-deployment--interaction","400":"docs/pages/examples/local-testing.mdx#2-event-testing","401":"docs/pages/examples/local-testing.mdx#complex-testing-scenarios","402":"docs/pages/examples/local-testing.mdx#1-state-management","403":"docs/pages/examples/local-testing.mdx#2-fork-testing","404":"docs/pages/examples/local-testing.mdx#3-time-based-testing","405":"docs/pages/examples/local-testing.mdx#testing-utilities","406":"docs/pages/examples/local-testing.mdx#1-account-management","407":"docs/pages/examples/local-testing.mdx#2-transaction-helpers","408":"docs/pages/examples/local-testing.mdx#related-topics","409":"docs/pages/examples/local-testing.mdx#replaying-contracts-with-shadow-events","410":"docs/pages/examples/local-testing.mdx#estimating-gas-for-token-approval","411":"docs/pages/examples/viem.mdx#using-with-viem","412":"docs/pages/examples/viem.mdx#basic-setup","413":"docs/pages/examples/viem.mdx#using-viem","414":"docs/pages/examples/viem.mdx#1-public-actions","415":"docs/pages/examples/viem.mdx#2-wallet-actions","416":"docs/pages/examples/viem.mdx#3-test-actions","417":"docs/pages/examples/viem.mdx#tevm-actions","418":"docs/pages/examples/viem.mdx#1-contract-interactions","419":"docs/pages/examples/viem.mdx#2-account-management","420":"docs/pages/examples/viem.mdx#3-other-tevm-actions","421":"docs/pages/examples/viem.mdx#complete-action-reference","422":"docs/pages/examples/viem.mdx#public-actions","423":"docs/pages/examples/viem.mdx#contract-interactions","424":"docs/pages/examples/viem.mdx#block--transaction","425":"docs/pages/examples/viem.mdx#account--chain","426":"docs/pages/examples/viem.mdx#test-actions","427":"docs/pages/examples/viem.mdx#block--mining","428":"docs/pages/examples/viem.mdx#account--state","429":"docs/pages/examples/viem.mdx#state-management","430":"docs/pages/examples/viem.mdx#wallet-actions","431":"docs/pages/examples/viem.mdx#account-management","432":"docs/pages/examples/viem.mdx#transaction-operations","433":"docs/pages/examples/viem.mdx#signing-operations","434":"docs/pages/examples/viem.mdx#chain-management","435":"docs/pages/examples/viem.mdx#permissions--assets","436":"docs/pages/introduction/architecture-overview.mdx#architecture-overview","437":"docs/pages/introduction/architecture-overview.mdx#what-is-tevm-node","438":"docs/pages/introduction/architecture-overview.mdx#what-can-you-do-with-tevm-node","439":"docs/pages/introduction/architecture-overview.mdx#core-architecture","440":"docs/pages/introduction/architecture-overview.mdx#1-virtual-machine-evm","441":"docs/pages/introduction/architecture-overview.mdx#2-state-manager","442":"docs/pages/introduction/architecture-overview.mdx#3-transaction-pool-mempool","443":"docs/pages/introduction/architecture-overview.mdx#4-blockchain","444":"docs/pages/introduction/architecture-overview.mdx#5-receipts-manager","445":"docs/pages/introduction/architecture-overview.mdx#available-apis","446":"docs/pages/introduction/architecture-overview.mdx#1-high-level-actions","447":"docs/pages/introduction/architecture-overview.mdx#2-json-rpc-interface","448":"docs/pages/introduction/architecture-overview.mdx#3-direct-vm-access","449":"docs/pages/introduction/architecture-overview.mdx#4-contract-utilities","450":"docs/pages/introduction/architecture-overview.mdx#key-features","451":"docs/pages/introduction/architecture-overview.mdx#1-forking","452":"docs/pages/introduction/architecture-overview.mdx#2-mining-modes","453":"docs/pages/introduction/architecture-overview.mdx#3-custom-precompiles","454":"docs/pages/introduction/architecture-overview.mdx#4-state-management","455":"docs/pages/introduction/architecture-overview.mdx#common-use-cases","456":"docs/pages/introduction/architecture-overview.mdx#integration-examples","457":"docs/pages/introduction/architecture-overview.mdx#with-viem","458":"docs/pages/introduction/architecture-overview.mdx#with-ethersjs","459":"docs/pages/introduction/architecture-overview.mdx#next-steps","460":"docs/pages/introduction/installation.mdx#installation--quickstart","461":"docs/pages/introduction/installation.mdx#1-install","462":"docs/pages/introduction/installation.mdx#2-quick-start","463":"docs/pages/introduction/installation.mdx#3-next-steps","464":"docs/pages/introduction/what-is-tevm-node.mdx#what-is-tevm-node","465":"docs/pages/introduction/what-is-tevm-node.mdx#key-features","466":"docs/pages/introduction/what-is-tevm-node.mdx#hello-world-example","467":"docs/pages/introduction/what-is-tevm-node.mdx#motivations--why-tevm-node","468":"docs/pages/introduction/what-is-tevm-node.mdx#next-steps","469":"docs/pages/introduction/why-run-ethereum-in-js.mdx#why-run-ethereum-in-javascript","470":"docs/pages/introduction/why-run-ethereum-in-js.mdx#1-advanced-gas-estimation--local-execution","471":"docs/pages/introduction/why-run-ethereum-in-js.mdx#2-user-experience-enhancements","472":"docs/pages/introduction/why-run-ethereum-in-js.mdx#3-testing--debugging","473":"docs/pages/introduction/why-run-ethereum-in-js.mdx#4-ecosystem--portability"},"fieldIds":{"title":0,"titles":1,"text":2},"fieldLength":{"0":[2,1,21],"1":[1,2,4],"2":[2,2,1],"3":[5,4,78],"4":[4,4,85],"5":[4,4,38],"6":[2,2,36],"7":[2,2,1],"8":[3,4,42],"9":[3,4,53],"10":[3,4,24],"11":[3,4,27],"12":[2,2,1],"13":[4,4,20],"14":[3,4,17],"15":[2,4,16],"16":[2,2,33],"17":[2,4,34],"18":[4,4,19],"19":[3,4,18],"20":[3,4,13],"21":[3,4,31],"22":[4,4,16],"23":[3,4,23],"24":[2,2,19],"25":[2,1,30],"26":[3,2,79],"27":[2,2,59],"28":[2,2,19],"29":[2,2,1],"30":[4,4,47],"31":[4,4,38],"32":[4,4,34],"33":[3,4,33],"34":[2,2,101],"35":[2,2,16],"36":[3,1,22],"37":[3,3,22],"38":[3,3,20],"39":[2,3,34],"40":[2,3,1],"41":[3,4,41],"42":[4,4,25],"43":[4,4,32],"44":[2,3,1],"45":[3,5,36],"46":[3,5,27],"47":[3,5,39],"48":[2,3,68],"49":[2,3,8],"50":[3,1,19],"51":[2,3,62],"52":[2,5,31],"53":[2,3,1],"54":[5,4,54],"55":[2,4,45],"56":[2,4,43],"57":[2,3,33],"58":[2,5,59],"59":[2,3,9],"60":[2,1,29],"61":[2,2,40],"62":[2,2,47],"63":[2,2,1],"64":[2,4,42],"65":[2,4,36],"66":[2,2,1],"67":[2,4,36],"68":[2,4,49],"69":[2,4,30],"70":[2,4,24],"71":[2,2,1],"72":[2,4,18],"73":[2,4,21],"74":[2,2,1],"75":[3,4,33],"76":[3,4,29],"77":[3,4,16],"78":[3,4,31],"79":[2,2,1],"80":[2,4,34],"81":[2,2,9],"82":[2,1,13],"83":[1,2,14],"84":[1,3,32],"85":[2,3,44],"86":[1,3,31],"87":[1,2,11],"88":[1,3,24],"89":[2,3,9],"90":[1,3,1],"91":[4,4,14],"92":[4,4,14],"93":[4,4,17],"94":[2,2,43],"95":[2,2,8],"96":[3,1,39],"97":[1,3,5],"98":[2,3,1],"99":[2,5,53],"100":[4,5,6],"101":[3,9,18],"102":[2,9,18],"103":[2,9,13],"104":[2,9,17],"105":[3,9,10],"106":[5,5,8],"107":[2,10,21],"108":[2,10,9],"109":[2,10,14],"110":[2,10,12],"111":[2,5,11],"112":[2,3,47],"113":[2,3,50],"114":[2,3,8],"115":[1,1,22],"116":[2,1,9],"117":[1,2,17],"118":[2,2,1],"119":[6,4,56],"120":[6,4,23],"121":[6,4,23],"122":[2,2,1],"123":[2,4,19],"124":[2,4,22],"125":[2,4,23],"126":[1,1,1],"127":[1,2,30],"128":[2,1,8],"129":[2,1,23],"130":[2,2,1],"131":[2,4,62],"132":[3,4,19],"133":[1,7,29],"134":[2,2,1],"135":[2,4,1],"136":[2,6,17],"137":[2,6,22],"138":[2,6,15],"139":[2,4,1],"140":[2,6,14],"141":[2,6,22],"142":[2,4,13],"143":[1,2,18],"144":[2,2,24],"145":[2,2,34],"146":[2,1,30],"147":[2,2,1],"148":[2,4,42],"149":[4,4,21],"150":[1,7,32],"151":[2,4,32],"152":[2,4,32],"153":[2,2,1],"154":[2,4,29],"155":[3,4,35],"156":[3,4,17],"157":[2,4,34],"158":[2,2,26],"159":[2,2,33],"160":[2,2,8],"161":[2,1,22],"162":[1,2,47],"163":[3,3,31],"164":[2,2,56],"165":[2,2,38],"166":[2,2,31],"167":[2,2,1],"168":[3,4,31],"169":[3,4,27],"170":[3,4,21],"171":[3,4,24],"172":[2,2,14],"173":[3,1,29],"174":[1,3,5],"175":[2,3,1],"176":[1,5,64],"177":[1,5,67],"178":[1,5,22],"179":[1,3,1],"180":[1,4,31],"181":[1,4,32],"182":[1,3,1],"183":[2,4,30],"184":[2,4,46],"185":[1,3,40],"186":[2,3,7],"187":[2,1,28],"188":[2,2,33],"189":[2,2,66],"190":[2,2,69],"191":[2,2,59],"192":[2,2,36],"193":[2,2,34],"194":[2,2,5],"195":[3,1,41],"196":[1,3,5],"197":[2,3,1],"198":[2,5,47],"199":[1,7,40],"200":[4,5,41],"201":[2,5,54],"202":[1,3,1],"203":[2,3,52],"204":[3,3,35],"205":[2,3,7],"206":[3,1,24],"207":[3,3,35],"208":[2,3,1],"209":[3,5,62],"210":[2,5,44],"211":[2,3,1],"212":[3,5,27],"213":[3,5,23],"214":[2,3,63],"215":[2,3,90],"216":[2,3,21],"217":[3,3,104],"218":[5,3,79],"219":[1,1,79],"220":[1,1,4],"221":[2,1,20],"222":[1,1,24],"223":[2,1,1],"224":[2,3,52],"225":[4,3,26],"226":[2,1,1],"227":[2,3,15],"228":[2,3,14],"229":[2,3,18],"230":[2,1,32],"231":[2,1,24],"232":[2,1,9],"233":[4,1,20],"234":[1,4,6],"235":[2,4,1],"236":[1,6,23],"237":[1,7,46],"238":[2,6,1],"239":[1,8,27],"240":[1,8,16],"241":[1,8,21],"242":[1,8,26],"243":[2,4,1],"244":[4,6,24],"245":[4,6,25],"246":[2,6,43],"247":[1,4,33],"248":[2,4,16],"249":[3,1,39],"250":[1,3,14],"251":[2,3,1],"252":[1,5,61],"253":[4,5,12],"254":[2,3,1],"255":[2,5,29],"256":[2,5,39],"257":[2,5,24],"258":[4,5,23],"259":[2,5,14],"260":[2,3,44],"261":[2,3,9],"262":[3,1,41],"263":[1,3,5],"264":[2,3,1],"265":[2,5,36],"266":[1,5,30],"267":[2,5,35],"268":[2,3,1],"269":[2,5,22],"270":[3,5,15],"271":[3,5,14],"272":[3,5,18],"273":[2,3,1],"274":[2,5,29],"275":[2,5,7],"276":[2,5,31],"277":[2,3,26],"278":[2,3,18],"279":[3,1,36],"280":[1,3,5],"281":[2,3,1],"282":[2,5,29],"283":[2,7,9],"284":[2,5,1],"285":[2,7,13],"286":[2,7,25],"287":[2,7,15],"288":[2,7,15],"289":[2,5,39],"290":[2,3,21],"291":[3,3,1],"292":[3,6,30],"293":[2,6,19],"294":[2,3,24],"295":[2,3,24],"296":[2,3,42],"297":[2,3,17],"298":[3,1,33],"299":[1,3,36],"300":[1,4,12],"301":[3,4,30],"302":[2,3,39],"303":[1,3,28],"304":[1,4,23],"305":[2,4,9],"306":[2,3,30],"307":[3,3,70],"308":[3,1,48],"309":[1,3,5],"310":[2,3,1],"311":[4,5,1],"312":[4,9,36],"313":[2,9,13],"314":[2,5,1],"315":[2,7,21],"316":[2,7,28],"317":[3,5,34],"318":[3,5,18],"319":[2,5,23],"320":[2,5,22],"321":[1,3,1],"322":[2,4,22],"323":[2,4,24],"324":[2,4,24],"325":[1,3,20],"326":[2,3,21],"327":[2,3,7],"328":[3,1,24],"329":[1,3,32],"330":[2,3,39],"331":[2,5,28],"332":[2,5,30],"333":[2,3,41],"334":[2,5,21],"335":[1,3,41],"336":[3,4,22],"337":[2,3,32],"338":[2,5,15],"339":[1,3,37],"340":[3,4,15],"341":[2,3,53],"342":[2,3,24],"343":[3,1,41],"344":[1,3,5],"345":[2,3,1],"346":[4,5,23],"347":[2,5,41],"348":[2,3,1],"349":[2,5,1],"350":[2,7,24],"351":[2,7,18],"352":[2,5,16],"353":[2,5,17],"354":[1,3,28],"355":[2,3,53],"356":[1,3,1],"357":[1,4,21],"358":[1,4,19],"359":[2,3,39],"360":[2,3,55],"361":[2,3,7],"362":[4,1,31],"363":[2,4,20],"364":[1,4,1],"365":[3,5,169],"366":[3,5,29],"367":[2,4,1],"368":[3,6,74],"369":[3,6,79],"370":[1,4,49],"371":[1,4,1],"372":[3,5,53],"373":[3,5,56],"374":[2,4,5],"375":[4,1,20],"376":[2,4,32],"377":[2,4,1],"378":[4,6,43],"379":[4,6,45],"380":[2,4,1],"381":[4,6,41],"382":[4,6,38],"383":[2,4,1],"384":[3,6,34],"385":[5,6,32],"386":[4,6,42],"387":[3,4,64],"388":[2,4,90],"389":[2,4,8],"390":[3,1,1],"391":[3,3,48],"392":[2,3,37],"393":[4,3,40],"394":[4,3,33],"395":[3,3,29],"396":[2,1,29],"397":[3,2,70],"398":[2,2,1],"399":[4,3,69],"400":[3,3,58],"401":[3,2,1],"402":[3,4,49],"403":[3,4,62],"404":[4,4,72],"405":[2,2,1],"406":[3,3,37],"407":[3,3,41],"408":[2,2,13],"409":[5,2,89],"410":[5,2,51],"411":[3,1,20],"412":[2,3,51],"413":[2,3,13],"414":[3,4,30],"415":[3,4,50],"416":[3,4,58],"417":[2,3,15],"418":[3,5,34],"419":[3,5,30],"420":[4,5,60],"421":[3,3,1],"422":[2,6,9],"423":[2,8,7],"424":[3,8,8],"425":[3,8,6],"426":[2,6,9],"427":[3,8,8],"428":[3,8,7],"429":[2,8,6],"430":[2,6,9],"431":[2,8,3],"432":[2,8,5],"433":[2,8,3],"434":[2,8,3],"435":[3,8,4],"436":[2,1,1],"437":[5,2,37],"438":[8,2,70],"439":[2,2,12],"440":[5,3,23],"441":[3,3,23],"442":[5,3,17],"443":[2,3,18],"444":[3,3,20],"445":[2,2,12],"446":[4,4,53],"447":[4,4,26],"448":[4,4,22],"449":[3,4,46],"450":[2,2,1],"451":[2,4,27],"452":[3,4,21],"453":[3,4,25],"454":[3,4,27],"455":[3,2,51],"456":[2,2,1],"457":[2,4,13],"458":[3,4,11],"459":[2,2,9],"460":[3,1,1],"461":[2,3,9],"462":[3,3,37],"463":[3,3,8],"464":[5,1,48],"465":[2,5,56],"466":[3,5,36],"467":[4,5,40],"468":[2,5,9],"469":[6,1,1],"470":[7,6,32],"471":[4,6,17],"472":[4,6,13],"473":[4,6,19]},"averageFieldLength":[2.3987341772151898,3.782700421940928,26.044303797468356],"storedFields":{"0":{"href":"/getting-started#getting-started","html":"</header>\n<p>Welcome to <a href=\"https://github.com/evmts/tevm-monorepo\">Tevm Node</a>! This guide will help you navigate our documentation and get started with running <a href=\"https://ethereum.org\">Ethereum</a> in JavaScript.</p>\n","isPage":true,"text":"\nWelcome to Tevm Node! This guide will help you navigate our documentation and get started with running Ethereum in JavaScript.\n","title":"Getting Started","titles":[]},"1":{"href":"/getting-started#installation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> tevm</span></span></code></pre>\n","isPage":false,"text":"\nnpm install tevm\n","title":"Installation","titles":["Getting Started"]},"2":{"href":"/getting-started#quick-examples","html":"\n","isPage":false,"text":"\n","title":"Quick Examples","titles":["Getting Started"]},"3":{"href":"/getting-started#1-raw-tevm-node-api","html":"\n<p>The most direct way to use Tevm is with the raw <a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/node/docs/functions/createTevmNode.md\"><code>createTevmNode</code></a> API. This gives you access to the <a href=\"/api/actions\">complete actions API</a>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// tevm/actions has many useful high level actions to interact with</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// the tevm api including the entire json rpc api</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  callHandler,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  setAccountHandler,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  getAccountHandler,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/actions&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Execute a contract call</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> callHandler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234567890123456789012345678901234567890&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Set account state</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> tevmSetAccountHandler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234567890123456789012345678901234567890&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  balance: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000000000000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // 1 ETH</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get account state</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> account</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getAccountHandler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234567890123456789012345678901234567890&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// You can also interact directly with the low level node apis</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.blockchain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">putBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(newBlock)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">putContractCode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">420</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">hexToBytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))</span></span></code></pre>\n","isPage":false,"text":"\nThe most direct way to use Tevm is with the raw createTevmNode API. This gives you access to the complete actions API:\nimport { createTevmNode } from &#x27;tevm&#x27;\n// tevm/actions has many useful high level actions to interact with\n// the tevm api including the entire json rpc api\nimport {\n  callHandler,\n  setAccountHandler,\n  getAccountHandler,\n} from &#x27;tevm/actions&#x27;\n \nconst node = createTevmNode()\n \n// Execute a contract call\nconst result = await callHandler(node)({\n  to: &#x27;0x1234567890123456789012345678901234567890&#x27;,\n  data: &#x27;0x...&#x27;,\n  value: 0n\n})\n \n// Set account state\nawait tevmSetAccountHandler(node)({\n  address: &#x27;0x1234567890123456789012345678901234567890&#x27;,\n  balance: 1000000000000000000n // 1 ETH\n})\n \n// Get account state\nconst account = await getAccountHandler(node)({\n  address: &#x27;0x1234567890123456789012345678901234567890&#x27;\n})\n \n// You can also interact directly with the low level node apis\nconst vm = await node.getVm()\nawait node.blockchain.putBlock(newBlock)\nawait node.stateManager.putContractCode(createAddress(420), hexToBytes(&#x27;0x...&#x27;))\n","title":"1. Raw Tevm Node API","titles":["Getting Started","Quick Examples"]},"4":{"href":"/getting-started#2-using-with-viem","html":"\n<p>For a more familiar developer experience, you can use <a href=\"./examples/viem\">Tevm with Viem</a>:</p>\n<p>You can still use the <a href=\"#1-raw-tevm-node-api\">Raw Tevm Node API</a> referencing <a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/node/docs/functions/createTevmNode.md\"><code>client.transport.tevm</code></a></p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createMemoryClient, http } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { optimism } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/common&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create a client that forks from Optimism mainnet</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// See [MemoryClient docs](/api/memory-client) for more configuration options</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createMemoryClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  fork: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transport: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">http</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;https://mainnet.optimism.io&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)({}),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    blockTag: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;latest&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  common: optimism,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Use viem&#x27;s public, wallet, or test actions</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> block</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ blockTag: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;latest&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(block)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Mix with Tevm actions</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> testAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;0x1234567890123456789012345678901234567890&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">tevmSetAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: testAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  balance: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000000000000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // 1 ETH</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get account state</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> account</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">tevmGetAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ address: testAddress })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(account)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Use the raw Tevm node api via `client.transport.tevm`</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.transport.tevm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> block</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.blockchain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBlockByTag</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;latest&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nFor a more familiar developer experience, you can use Tevm with Viem:\nYou can still use the Raw Tevm Node API referencing client.transport.tevm\nimport { createMemoryClient, http } from &#x27;tevm&#x27;\nimport { optimism } from &#x27;tevm/common&#x27;\n \n// Create a client that forks from Optimism mainnet\n// See [MemoryClient docs](/api/memory-client) for more configuration options\nconst client = createMemoryClient({\n  fork: {\n    transport: http(&#x27;https://mainnet.optimism.io&#x27;)({}),\n    blockTag: &#x27;latest&#x27;,\n  },\n  common: optimism,\n})\n \n// Use viem&#x27;s public, wallet, or test actions\nconst block = await client.getBlock({ blockTag: &#x27;latest&#x27; })\nconsole.log(block)\n \n// Mix with Tevm actions\nconst testAddress = &#x27;0x1234567890123456789012345678901234567890&#x27;\nawait client.tevmSetAccount({\n  address: testAddress,\n  balance: 1000000000000000000n // 1 ETH\n})\n \n// Get account state\nconst account = await client.tevmGetAccount({ address: testAddress })\nconsole.log(account)\n \n// Use the raw Tevm node api via `client.transport.tevm`\nconst vm = await client.transport.tevm.getVm()\nconst block = await vm.blockchain.getBlockByTag(&#x27;latest&#x27;)\n","title":"2. Using with Viem","titles":["Getting Started","Quick Examples"]},"5":{"href":"/getting-started#3-using-with-ethers","html":"\n<p>You can also use Tevm with <a href=\"./examples/ethers\">Ethers.js</a>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { requestEip1193 } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/decorators&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { BrowserProvider } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;ethers&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create Tevm Node with EIP-1193 support</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">extend</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">requestEip1193</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create Ethers provider</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> provider</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> BrowserProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Use standard Ethers API</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> block</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> provider.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBlockNumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> balance</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> provider.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBalance</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nYou can also use Tevm with Ethers.js:\nimport { createTevmNode } from &#x27;tevm&#x27;\nimport { requestEip1193 } from &#x27;tevm/decorators&#x27;\nimport { BrowserProvider } from &#x27;ethers&#x27;\n \n// Create Tevm Node with EIP-1193 support\nconst node = createTevmNode().extend(requestEip1193())\n \n// Create Ethers provider\nconst provider = new BrowserProvider(node)\n \n// Use standard Ethers API\nconst block = await provider.getBlockNumber()\nconst balance = await provider.getBalance(&#x27;0x1234...&#x27;)\n","title":"3. Using with Ethers","titles":["Getting Started","Quick Examples"]},"6":{"href":"/getting-started#quick-start","html":"\n<p>Start here to understand the basics:</p>\n<ul>\n<li><a href=\"./introduction/what-is-tevm-node\">What is Tevm Node?</a> - Overview and key features</li>\n<li><a href=\"./introduction/architecture-overview\">Architecture Overview</a> - High-level explanation of how Tevm works</li>\n<li><a href=\"./introduction/why-run-ethereum-in-js\">Why run Ethereum in JS?</a> - Benefits and use cases</li>\n<li><a href=\"./introduction/installation\">Installation &amp; Quickstart</a> - Get up and running</li>\n</ul>\n","isPage":false,"text":"\nStart here to understand the basics:\n\nWhat is Tevm Node? - Overview and key features\nArchitecture Overview - High-level explanation of how Tevm works\nWhy run Ethereum in JS? - Benefits and use cases\nInstallation &amp; Quickstart - Get up and running\n\n","title":"Quick Start","titles":["Getting Started"]},"7":{"href":"/getting-started#learning-path","html":"\n","isPage":false,"text":"\n","title":"Learning Path","titles":["Getting Started"]},"8":{"href":"/getting-started#1-core-concepts","html":"\n<p>Learn the fundamental building blocks:</p>\n<ul>\n<li><a href=\"./core/create-tevm-node\">Creating a Node</a> - Set up and configure your node</li>\n<li><a href=\"./core/tevm-node-interface\">Node Interface</a> - Understand the main API surface</li>\n<li><a href=\"./core/forking\">Forking &amp; Reforking</a> - Fork from networks or other Tevm instances</li>\n<li><a href=\"./core/managing-state\">Managing State</a> - Handle accounts, storage, and blockchain state</li>\n<li><a href=\"#TODO\">Mining Configuration</a> - Configure block production</li>\n</ul>\n","isPage":false,"text":"\nLearn the fundamental building blocks:\n\nCreating a Node - Set up and configure your node\nNode Interface - Understand the main API surface\nForking &amp; Reforking - Fork from networks or other Tevm instances\nManaging State - Handle accounts, storage, and blockchain state\nMining Configuration - Configure block production\n\n","title":"1. Core Concepts","titles":["Getting Started","Learning Path"]},"9":{"href":"/getting-started#2-essential-apis","html":"\n<p>Most commonly used APIs:</p>\n<ul>\n<li><a href=\"./api/tevm-call\">tevmCall API</a> - Execute contract calls and transactions</li>\n<li><a href=\"./api/json-rpc\">JSON-RPC Support</a> - Standard Ethereum JSON-RPC interface</li>\n<li><a href=\"./api/account-management\">Account Management</a> - Work with accounts and balances</li>\n<li><a href=\"./api/contracts\">Contract Utilities</a> - Create and interact with contracts</li>\n<li><a href=\"./api/utils\">Utilities &amp; Addresses</a> - Core utilities for addresses and common operations</li>\n<li><a href=\"./api/methods\">Methods &amp; Properties</a> - Complete API reference</li>\n<li><a href=\"./api/vm-and-submodules\">VM &amp; Submodules</a> - Internal architecture based on ethereumjs</li>\n<li><a href=\"./api/evm-events\">EVM Events</a> - Debug and trace EVM execution</li>\n</ul>\n","isPage":false,"text":"\nMost commonly used APIs:\n\ntevmCall API - Execute contract calls and transactions\nJSON-RPC Support - Standard Ethereum JSON-RPC interface\nAccount Management - Work with accounts and balances\nContract Utilities - Create and interact with contracts\nUtilities &amp; Addresses - Core utilities for addresses and common operations\nMethods &amp; Properties - Complete API reference\nVM &amp; Submodules - Internal architecture based on ethereumjs\nEVM Events - Debug and trace EVM execution\n\n","title":"2. Essential APIs","titles":["Getting Started","Learning Path"]},"10":{"href":"/getting-started#3-integration-examples","html":"\n<p>Real-world usage examples:</p>\n<ul>\n<li><a href=\"./examples/local-testing\">Local Testing</a> - Write tests for your contracts</li>\n<li><a href=\"./examples/forking-mainnet\">Forking Mainnet</a> - Work with production state locally</li>\n<li><a href=\"./examples/viem\">Using with Viem</a> - Integration with <a href=\"https://viem.sh\">Viem</a></li>\n<li><a href=\"./examples/ethers\">Using with Ethers</a> - Integration with <a href=\"https://docs.ethers.org\">Ethers.js</a></li>\n</ul>\n","isPage":false,"text":"\nReal-world usage examples:\n\nLocal Testing - Write tests for your contracts\nForking Mainnet - Work with production state locally\nUsing with Viem - Integration with Viem\nUsing with Ethers - Integration with Ethers.js\n\n","title":"3. Integration Examples","titles":["Getting Started","Learning Path"]},"11":{"href":"/getting-started#4-advanced-features","html":"\n<p>Dive deeper into advanced capabilities:</p>\n<ul>\n<li><a href=\"./advanced/txpool\">Transaction Pool</a> - Manage pending transactions</li>\n<li><a href=\"./advanced/custom-precompiles\">Custom Precompiles</a> - Extend EVM functionality</li>\n<li><a href=\"./advanced/performance-profiler\">Performance Profiler</a> - Optimize performance</li>\n<li><a href=\"./advanced/receipts-and-logs\">Receipts &amp; Logs</a> - Handle events and logs</li>\n</ul>\n","isPage":false,"text":"\nDive deeper into advanced capabilities:\n\nTransaction Pool - Manage pending transactions\nCustom Precompiles - Extend EVM functionality\nPerformance Profiler - Optimize performance\nReceipts &amp; Logs - Handle events and logs\n\n","title":"4. Advanced Features","titles":["Getting Started","Learning Path"]},"12":{"href":"/getting-started#key-features","html":"\n","isPage":false,"text":"\n","title":"Key Features","titles":["Getting Started"]},"13":{"href":"/getting-started#forking--state-management","html":"\n<ul>\n<li>Fork from any EVM-compatible network</li>\n<li>Memory-efficient reforking strategies</li>\n<li>Complete state control and manipulation</li>\n<li>Account impersonation for testing</li>\n</ul>\n","isPage":false,"text":"\n\nFork from any EVM-compatible network\nMemory-efficient reforking strategies\nComplete state control and manipulation\nAccount impersonation for testing\n\n","title":"Forking &amp; State Management","titles":["Getting Started","Key Features"]},"14":{"href":"/getting-started#performance--flexibility","html":"\n<ul>\n<li>Automatic or manual block mining</li>\n<li>Lazy loading with caching</li>\n<li>Custom precompiles in JavaScript</li>\n<li>Comprehensive debugging tools</li>\n</ul>\n","isPage":false,"text":"\n\nAutomatic or manual block mining\nLazy loading with caching\nCustom precompiles in JavaScript\nComprehensive debugging tools\n\n","title":"Performance &amp; Flexibility","titles":["Getting Started","Key Features"]},"15":{"href":"/getting-started#developer-experience","html":"\n<ul>\n<li>TypeScript-first design</li>\n<li>Viem &amp; Ethers.js compatibility</li>\n<li>Standard JSON-RPC support</li>\n<li>Rich testing utilities</li>\n</ul>\n","isPage":false,"text":"\n\nTypeScript-first design\nViem &amp; Ethers.js compatibility\nStandard JSON-RPC support\nRich testing utilities\n\n","title":"Developer Experience","titles":["Getting Started","Key Features"]},"16":{"href":"/getting-started#package-documentation","html":"\n<p>All Tevm packages can be installed individually (e.g., <code>npm install @tevm/actions</code>) or together by installing <code>tevm</code> and importing from the specific package (e.g., <code>import { ... } from &#x27;tevm/actions&#x27;</code>). Each package has its own generated API documentation:</p>\n","isPage":false,"text":"\nAll Tevm packages can be installed individually (e.g., npm install @tevm/actions) or together by installing tevm and importing from the specific package (e.g., import { ... } from &#x27;tevm/actions&#x27;). Each package has its own generated API documentation:\n","title":"Package Documentation","titles":["Getting Started"]},"17":{"href":"/getting-started#core-packages","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs\">@tevm/actions</a> - Comprehensive set of actions for interacting with the Tevm client</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/vm/docs\">@tevm/vm</a> - Custom Ethereum Virtual Machine implementation</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs\">@tevm/state</a> - State management for accounts, storage, and contracts</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/blockchain/docs\">@tevm/blockchain</a> - Blockchain implementation and block management</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/evm/docs\">@tevm/evm</a> - EVM execution environment and bytecode processing</li>\n</ul>\n","isPage":false,"text":"\n\n@tevm/actions - Comprehensive set of actions for interacting with the Tevm client\n@tevm/vm - Custom Ethereum Virtual Machine implementation\n@tevm/state - State management for accounts, storage, and contracts\n@tevm/blockchain - Blockchain implementation and block management\n@tevm/evm - EVM execution environment and bytecode processing\n\n","title":"Core Packages","titles":["Getting Started","Package Documentation"]},"18":{"href":"/getting-started#transaction--block-handling","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/block/docs\">@tevm/block</a> - Block creation and manipulation utilities</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/tx/docs\">@tevm/tx</a> - Transaction types and handling</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/txpool/docs\">@tevm/txpool</a> - Transaction pool (mempool) implementation</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/receipt-manager/docs\">@tevm/receipt-manager</a> - Transaction receipt management</li>\n</ul>\n","isPage":false,"text":"\n\n@tevm/block - Block creation and manipulation utilities\n@tevm/tx - Transaction types and handling\n@tevm/txpool - Transaction pool (mempool) implementation\n@tevm/receipt-manager - Transaction receipt management\n\n","title":"Transaction &amp; Block Handling","titles":["Getting Started","Package Documentation"]},"19":{"href":"/getting-started#client--communication","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/memory-client/docs\">@tevm/memory-client</a> - In-memory Ethereum client implementation</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/http-client/docs\">@tevm/http-client</a> - HTTP client for remote Tevm nodes</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/jsonrpc/docs\">@tevm/jsonrpc</a> - JSON-RPC protocol implementation</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/server/docs\">@tevm/server</a> - Tevm server implementation</li>\n</ul>\n","isPage":false,"text":"\n\n@tevm/memory-client - In-memory Ethereum client implementation\n@tevm/http-client - HTTP client for remote Tevm nodes\n@tevm/jsonrpc - JSON-RPC protocol implementation\n@tevm/server - Tevm server implementation\n\n","title":"Client &amp; Communication","titles":["Getting Started","Package Documentation"]},"20":{"href":"/getting-started#smart-contract-tools","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/contract/docs\">@tevm/contract</a> - Smart contract interaction utilities</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/precompiles/docs\">@tevm/precompiles</a> - Precompiled contract implementations</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/predeploys/docs\">@tevm/predeploys</a> - Pre-deployed contract management</li>\n</ul>\n","isPage":false,"text":"\n\n@tevm/contract - Smart contract interaction utilities\n@tevm/precompiles - Precompiled contract implementations\n@tevm/predeploys - Pre-deployed contract management\n\n","title":"Smart Contract Tools","titles":["Getting Started","Package Documentation"]},"21":{"href":"/getting-started#utilities--helpers","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/utils/docs\">@tevm/utils</a> - Common utilities for Ethereum data structures</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/common/docs\">@tevm/common</a> - Shared constants and chain configurations</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/decorators/docs\">@tevm/decorators</a> - Function decorators for extending client functionality</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/procedures/docs\">@tevm/procedures</a> - Common procedures and operations</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/rlp/docs\">@tevm/rlp</a> - RLP encoding/decoding utilities</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/trie/docs\">@tevm/trie</a> - Merkle Patricia Tree implementation</li>\n</ul>\n","isPage":false,"text":"\n\n@tevm/utils - Common utilities for Ethereum data structures\n@tevm/common - Shared constants and chain configurations\n@tevm/decorators - Function decorators for extending client functionality\n@tevm/procedures - Common procedures and operations\n@tevm/rlp - RLP encoding/decoding utilities\n@tevm/trie - Merkle Patricia Tree implementation\n\n","title":"Utilities &amp; Helpers","titles":["Getting Started","Package Documentation"]},"22":{"href":"/getting-started#development--error-handling","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/errors/docs\">@tevm/errors</a> - Error types and handling</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/logger/docs\">@tevm/logger</a> - Logging functionality</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/effect/docs\">@tevm/effect</a> - Effect system for handling side effects</li>\n</ul>\n","isPage":false,"text":"\n\n@tevm/errors - Error types and handling\n@tevm/logger - Logging functionality\n@tevm/effect - Effect system for handling side effects\n\n","title":"Development &amp; Error Handling","titles":["Getting Started","Package Documentation"]},"23":{"href":"/getting-started#storage--synchronization","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/sync-storage-persister/docs\">@tevm/sync-storage-persister</a> - Storage persistence and synchronization</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/client-types/docs\">@tevm/client-types</a> - Type definitions for client interfaces</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/node/docs\">@tevm/node</a> - Node implementation and management</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/address/docs\">@tevm/address</a> - Ethereum address utilities and validation</li>\n</ul>\n","isPage":false,"text":"\n\n@tevm/sync-storage-persister - Storage persistence and synchronization\n@tevm/client-types - Type definitions for client interfaces\n@tevm/node - Node implementation and management\n@tevm/address - Ethereum address utilities and validation\n\n","title":"Storage &amp; Synchronization","titles":["Getting Started","Package Documentation"]},"24":{"href":"/getting-started#additional-resources","html":"\n<ul>\n<li><a href=\"https://ethereum.org/en/developers/docs/\">Ethereum Development Documentation</a> - Official Ethereum docs</li>\n<li><a href=\"https://ethereum.org/en/developers/docs/evm/\">EVM Deep Dive</a> - Understanding the EVM</li>\n<li><a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/\">JSON-RPC API</a> - Standard Ethereum API</li>\n<li><a href=\"https://github.com/ethereumjs/ethereumjs-monorepo\">ethereumjs/ethereumjs-monorepo</a> - Core EVM implementation</li>\n</ul>","isPage":false,"text":"\n\nEthereum Development Documentation - Official Ethereum docs\nEVM Deep Dive - Understanding the EVM\nJSON-RPC API - Standard Ethereum API\nethereumjs/ethereumjs-monorepo - Core EVM implementation\n","title":"Additional Resources","titles":["Getting Started"]},"25":{"href":"/advanced/custom-precompiles#custom-precompiles","html":"</header>\n<p><a href=\"https://github.com/evmts/tevm-monorepo\">Tevm Node</a> allows you to extend the <a href=\"https://ethereum.org/en/developers/docs/evm/\">EVM</a> with custom <a href=\"https://ethereum.org/en/developers/docs/evm/precompiles/\">precompiled contracts</a> written in JavaScript. These precompiles can provide native functionality at specific addresses, similar to <a href=\"https://www.evm.codes/precompiled\">Ethereum&#x27;s built-in precompiles</a>.</p>\n","isPage":true,"text":"\nTevm Node allows you to extend the EVM with custom precompiled contracts written in JavaScript. These precompiles can provide native functionality at specific addresses, similar to Ethereum&#x27;s built-in precompiles.\n","title":"Custom Precompiles","titles":[]},"26":{"href":"/advanced/custom-precompiles#using-tevmprecompiles","html":"\n<p>The <code>tevm/precompiles</code> package provides utilities for creating type-safe precompiles from contract <a href=\"https://docs.soliditylang.org/en/latest/abi-spec.html\">ABIs</a>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode, definePrecompile } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createAddress } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/address&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createContract } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/contract&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { parseAbi } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/utils&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createImpersonatedTx } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/tx&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { EvmError, EvmErrorMessage } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/evm&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create a basic precompile</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> customPrecompile</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> definePrecompile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  contract: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    abi: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;function double(bytes) returns (bytes)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x0000000000000000000000000000000000000123&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }),</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  call</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ({ </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Simple precompile that doubles each byte</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> input</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Array.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">from</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      returnValue: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(input.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">byte</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(byte) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      executionGasUsed: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">200</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create node with precompile</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  customPrecompiles: [customPrecompile.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">precompile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create a transaction to interact with the precompile</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createImpersonatedTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  impersonatedAddress: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234567890123456789012345678901234567890&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: customPrecompile.contract.address,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x00&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  gasLimit: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">21000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Execute the transaction</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ tx })</span></span></code></pre>\n","isPage":false,"text":"\nThe tevm/precompiles package provides utilities for creating type-safe precompiles from contract ABIs:\nimport { createTevmNode, definePrecompile } from &#x27;tevm&#x27;\nimport { createAddress } from &#x27;tevm/address&#x27;\nimport { createContract } from &#x27;tevm/contract&#x27;\nimport { parseAbi } from &#x27;tevm/utils&#x27;\nimport { createImpersonatedTx } from &#x27;tevm/tx&#x27;\nimport { EvmError, EvmErrorMessage } from &#x27;tevm/evm&#x27;\n \n// Create a basic precompile\nconst customPrecompile = definePrecompile({\n  contract: createContract({\n    abi: parseAbi([&#x27;function double(bytes) returns (bytes)&#x27;]),\n    address: &#x27;0x0000000000000000000000000000000000000123&#x27;\n  }),\n  call: async ({ data }) =&gt; {\n    // Simple precompile that doubles each byte\n    const input = Array.from(data)\n    return {\n      returnValue: new Uint8Array(input.map(byte =&gt; Number(byte) * 2)),\n      executionGasUsed: 200n,\n    }\n  },\n})\n \n// Create node with precompile\nconst node = createTevmNode({\n  customPrecompiles: [customPrecompile.precompile()],\n})\n \n// Create a transaction to interact with the precompile\nconst tx = createImpersonatedTx({\n  impersonatedAddress: createAddress(&#x27;0x1234567890123456789012345678901234567890&#x27;),\n  to: customPrecompile.contract.address,\n  data: &#x27;0x00&#x27;,\n  gasLimit: 21000n,\n})\n \n// Execute the transaction\nconst vm = await node.getVm()\nconst result = await vm.runTx({ tx })\n","title":"Using tevm/precompiles","titles":["Custom Precompiles"]},"27":{"href":"/advanced/custom-precompiles#basic-usage","html":"\n<p>Here&#x27;s a simple example of creating and using a precompile:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode, definePrecompile } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createAddress } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/address&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createContract } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/contract&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { parseAbi } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/utils&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createImpersonatedTx } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/tx&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { EvmError, EvmErrorMessage } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/evm&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> myPrecompile</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> definePrecompile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  contract: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    abi: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;function process(bytes) returns (bytes)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x0000000000000000000000000000000000000123&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }),</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  call</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ({ </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">gasLimit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> executionGasUsed</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 200</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (gasLimit </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> executionGasUsed) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        returnValue: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        exceptionError: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> EvmError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(EvmErrorMessage.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">OUT_OF_GAS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        executionGasUsed: gasLimit,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Process input data</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> processedData</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      returnValue: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">processedData]),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      executionGasUsed,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  customPrecompiles: [myPrecompile.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">precompile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nHere&#x27;s a simple example of creating and using a precompile:\nimport { createTevmNode, definePrecompile } from &#x27;tevm&#x27;\nimport { createAddress } from &#x27;tevm/address&#x27;\nimport { createContract } from &#x27;tevm/contract&#x27;\nimport { parseAbi } from &#x27;tevm/utils&#x27;\nimport { createImpersonatedTx } from &#x27;tevm/tx&#x27;\nimport { EvmError, EvmErrorMessage } from &#x27;tevm/evm&#x27;\n \nconst myPrecompile = definePrecompile({\n  contract: createContract({\n    abi: parseAbi([&#x27;function process(bytes) returns (bytes)&#x27;]),\n    address: &#x27;0x0000000000000000000000000000000000000123&#x27;\n  }),\n  call: async ({ data, gasLimit }) =&gt; {\n    const executionGasUsed = 200n\n    if (gasLimit &lt;= executionGasUsed) {\n      return {\n        returnValue: new Uint8Array(),\n        exceptionError: new EvmError(EvmErrorMessage.OUT_OF_GAS),\n        executionGasUsed: gasLimit,\n      }\n    }\n    // Process input data\n    const processedData = data\n    return {\n      returnValue: new Uint8Array([...processedData]),\n      executionGasUsed,\n    }\n  },\n})\n \nconst node = createTevmNode({\n  customPrecompiles: [myPrecompile.precompile()],\n})\n","title":"Basic Usage","titles":["Custom Precompiles"]},"28":{"href":"/advanced/custom-precompiles#precompile-interface","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> PrecompileInput</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  gasLimit</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> PrecompileOutput</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  returnValue</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  executionGasUsed</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> PrecompileContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Contract</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  call</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">input</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> PrecompileInput</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">PrecompileOutput</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\ninterface PrecompileInput {\n  data: Uint8Array\n  gasLimit: bigint\n}\n \ninterface PrecompileOutput {\n  returnValue: Uint8Array\n  executionGasUsed: bigint\n}\n \ninterface PrecompileContract {\n  contract: Contract\n  call: (input: PrecompileInput) =&gt; Promise&lt;PrecompileOutput&gt;\n}\n","title":"Precompile Interface","titles":["Custom Precompiles"]},"29":{"href":"/advanced/custom-precompiles#example-implementations","html":"\n","isPage":false,"text":"\n","title":"Example Implementations","titles":["Custom Precompiles"]},"30":{"href":"/advanced/custom-precompiles#1-state-access-precompile","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> statePrecompile</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> definePrecompile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  contract: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    abi: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;function store(bytes32,bytes32)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x0000000000000000000000000000000000000124&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }),</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  call</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ({ </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">gasLimit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> key</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">slice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> value</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> data.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">slice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">putContractStorage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">      createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(statePrecompile.contract.address),</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">      hexToBytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(key),</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">      hexToBytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(value)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    )</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> executionGasUsed</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 200</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (gasLimit </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> executionGasUsed) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        returnValue: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        exceptionError: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> EvmError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(EvmErrorMessage.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">OUT_OF_GAS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        executionGasUsed: gasLimit,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      returnValue: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      executionGasUsed,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nconst statePrecompile = definePrecompile({\n  contract: createContract({\n    abi: parseAbi([&#x27;function store(bytes32,bytes32)&#x27;]),\n    address: &#x27;0x0000000000000000000000000000000000000124&#x27;\n  }),\n  call: async ({ data, gasLimit }) =&gt; {\n    const key = data.slice(0, 32)\n    const value = data.slice(32)\n    const vm = await node.getVm()\n    await vm.stateManager.putContractStorage(\n      createAddress(statePrecompile.contract.address),\n      hexToBytes(key),\n      hexToBytes(value)\n    )\n    const executionGasUsed = 200n\n    if (gasLimit &lt;= executionGasUsed) {\n      return {\n        returnValue: new Uint8Array(),\n        exceptionError: new EvmError(EvmErrorMessage.OUT_OF_GAS),\n        executionGasUsed: gasLimit,\n      }\n    }\n    return {\n      returnValue: new Uint8Array(),\n      executionGasUsed,\n    }\n  },\n})\n","title":"1. State Access Precompile","titles":["Custom Precompiles","Example Implementations"]},"31":{"href":"/advanced/custom-precompiles#2-gas-calculation-precompile","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> gasPrecompile</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> definePrecompile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  contract: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    abi: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;function processWithGas(bytes)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x0000000000000000000000000000000000000125&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }),</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  call</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ({ </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">gasLimit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Charge 100 gas per byte</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> gasUsed</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> BigInt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">length</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (gasUsed </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> gasLimit) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      throw</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Out of gas&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      returnValue: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      executionGasUsed: gasUsed,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nconst gasPrecompile = definePrecompile({\n  contract: createContract({\n    abi: parseAbi([&#x27;function processWithGas(bytes)&#x27;]),\n    address: &#x27;0x0000000000000000000000000000000000000125&#x27;\n  }),\n  call: async ({ data, gasLimit }) =&gt; {\n    // Charge 100 gas per byte\n    const gasUsed = BigInt(data.length * 100)\n    if (gasUsed &gt; gasLimit) {\n      throw new Error(&#x27;Out of gas&#x27;)\n    }\n    return {\n      returnValue: new Uint8Array(),\n      executionGasUsed: gasUsed,\n    }\n  },\n})\n","title":"2. Gas Calculation Precompile","titles":["Custom Precompiles","Example Implementations"]},"32":{"href":"/advanced/custom-precompiles#3-error-handling-precompile","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> errorPrecompile</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> definePrecompile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  contract: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    abi: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;function process()&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x0000000000000000000000000000000000000126&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }),</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  call</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ({ </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (data.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">length</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ===</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      throw</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Empty input not allowed&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      returnValue: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      executionGasUsed: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">200</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nconst errorPrecompile = definePrecompile({\n  contract: createContract({\n    abi: parseAbi([&#x27;function process()&#x27;]),\n    address: &#x27;0x0000000000000000000000000000000000000126&#x27;\n  }),\n  call: async ({ data }) =&gt; {\n    if (data.length === 0) {\n      throw new Error(&#x27;Empty input not allowed&#x27;)\n    }\n    return {\n      returnValue: new Uint8Array(),\n      executionGasUsed: 200n,\n    }\n  },\n})\n","title":"3. Error Handling Precompile","titles":["Custom Precompiles","Example Implementations"]},"33":{"href":"/advanced/custom-precompiles#4-multiple-precompiles","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> precompileA</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> definePrecompile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  contract: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    abi: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;function processA() returns (bytes)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x0000000000000000000000000000000000000127&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }),</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  call</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    returnValue: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    executionGasUsed: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">200</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> precompileB</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> definePrecompile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  contract: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    abi: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;function processB() returns (bytes)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x0000000000000000000000000000000000000128&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }),</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  call</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    returnValue: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    executionGasUsed: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">200</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  customPrecompiles: [precompileA.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">precompile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(), precompileB.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">precompile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nconst precompileA = definePrecompile({\n  contract: createContract({\n    abi: parseAbi([&#x27;function processA() returns (bytes)&#x27;]),\n    address: &#x27;0x0000000000000000000000000000000000000127&#x27;\n  }),\n  call: async () =&gt; ({\n    returnValue: new Uint8Array([1]),\n    executionGasUsed: 200n,\n  }),\n})\n \nconst precompileB = definePrecompile({\n  contract: createContract({\n    abi: parseAbi([&#x27;function processB() returns (bytes)&#x27;]),\n    address: &#x27;0x0000000000000000000000000000000000000128&#x27;\n  }),\n  call: async () =&gt; ({\n    returnValue: new Uint8Array([2]),\n    executionGasUsed: 200n,\n  }),\n})\n \nconst node = createTevmNode({\n  customPrecompiles: [precompileA.precompile(), precompileB.precompile()],\n})\n","title":"4. Multiple Precompiles","titles":["Custom Precompiles","Example Implementations"]},"34":{"href":"/advanced/custom-precompiles#best-practices","html":"\n<ol>\n<li><strong>Gas Calculation</strong>:\n<ul>\n<li>Always calculate gas based on input size or operations performed</li>\n<li>Check against provided gas limit</li>\n<li>Return accurate gas usage and proper error types</li>\n</ul>\n</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> precompile</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> definePrecompile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  contract: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    abi: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;function process(bytes)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    address: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x0000000000000000000000000000000000000123&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }),</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  call</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ({ </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">gasLimit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> gasPerByte</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 100</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> gasUsed</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> BigInt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">length</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> gasPerByte</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (gasUsed </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> gasLimit) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        returnValue: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        exceptionError: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> EvmError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(EvmErrorMessage.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">OUT_OF_GAS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        executionGasUsed: gasLimit,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      returnValue: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">processData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      executionGasUsed: gasUsed,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n<ol start=\"2\">\n<li><strong>Error Handling</strong>:\n<ul>\n<li>Use proper EvmError types for EVM-specific errors</li>\n<li>Check input validity</li>\n<li>Handle gas limits properly</li>\n</ul>\n</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> precompile</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> definePrecompile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  contract: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    abi: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;function process(bytes)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    address: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x0000000000000000000000000000000000000123&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }),</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  call</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ({ </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">gasLimit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (data.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">length</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ===</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        throw</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Empty input not allowed&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> executionGasUsed</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 200</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (gasLimit </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> executionGasUsed) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          returnValue: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          exceptionError: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> EvmError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(EvmErrorMessage.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">OUT_OF_GAS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          executionGasUsed: gasLimit,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      }</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">      // Process data</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        returnValue: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">processData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        executionGasUsed,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      throw</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`Precompile error: ${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">error</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">message</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n<ol start=\"3\">\n<li><strong>State Management</strong>:\n<ul>\n<li>Use VM state manager for persistent storage</li>\n<li>Handle state access errors</li>\n<li>Clean up resources when needed</li>\n</ul>\n</li>\n</ol>\n","isPage":false,"text":"\n\nGas Calculation:\n\nAlways calculate gas based on input size or operations performed\nCheck against provided gas limit\nReturn accurate gas usage and proper error types\n\n\n\nconst precompile = definePrecompile({\n  contract: createContract({\n    abi: parseAbi([&#x27;function process(bytes)&#x27;]),\n    address: createAddress(&#x27;0x0000000000000000000000000000000000000123&#x27;)\n  }),\n  call: async ({ data, gasLimit }) =&gt; {\n    const gasPerByte = 100n\n    const gasUsed = BigInt(data.length) * gasPerByte\n    if (gasUsed &gt; gasLimit) {\n      return {\n        returnValue: new Uint8Array(),\n        exceptionError: new EvmError(EvmErrorMessage.OUT_OF_GAS),\n        executionGasUsed: gasLimit,\n      }\n    }\n    return {\n      returnValue: processData(data),\n      executionGasUsed: gasUsed,\n    }\n  },\n})\n\nError Handling:\n\nUse proper EvmError types for EVM-specific errors\nCheck input validity\nHandle gas limits properly\n\n\n\nconst precompile = definePrecompile({\n  contract: createContract({\n    abi: parseAbi([&#x27;function process(bytes)&#x27;]),\n    address: createAddress(&#x27;0x0000000000000000000000000000000000000123&#x27;)\n  }),\n  call: async ({ data, gasLimit }) =&gt; {\n    try {\n      if (data.length === 0) {\n        throw new Error(&#x27;Empty input not allowed&#x27;)\n      }\n      const executionGasUsed = 200n\n      if (gasLimit &lt;= executionGasUsed) {\n        return {\n          returnValue: new Uint8Array(),\n          exceptionError: new EvmError(EvmErrorMessage.OUT_OF_GAS),\n          executionGasUsed: gasLimit,\n        }\n      }\n      // Process data\n      return {\n        returnValue: processData(data),\n        executionGasUsed,\n      }\n    } catch (error) {\n      throw new Error(`Precompile error: ${error.message}`)\n    }\n  },\n})\n\nState Management:\n\nUse VM state manager for persistent storage\nHandle state access errors\nClean up resources when needed\n\n\n\n","title":"Best Practices","titles":["Custom Precompiles"]},"35":{"href":"/advanced/custom-precompiles#related-topics","html":"\n<ul>\n<li><a href=\"../api/contracts\">Contract Utilities</a></li>\n<li><a href=\"../core/managing-state\">State Management</a></li>\n<li><a href=\"../api/json-rpc\">JSON-RPC Support</a></li>\n<li><a href=\"https://www.evm.codes/\">EVM Opcodes Reference</a></li>\n<li><a href=\"https://ethereum.github.io/yellowpaper/paper.pdf\">Ethereum Yellow Paper</a></li>\n<li><a href=\"https://github.com/ethereumjs/ethereumjs-monorepo\">ethereumjs/ethereumjs-monorepo</a></li>\n</ul>","isPage":false,"text":"\n\nContract Utilities\nState Management\nJSON-RPC Support\nEVM Opcodes Reference\nEthereum Yellow Paper\nethereumjs/ethereumjs-monorepo\n","title":"Related Topics","titles":["Custom Precompiles"]},"36":{"href":"/advanced/performance-profiler#performance--profiler","html":"</header>\n<p>Tevm Node includes a built-in performance profiler that helps you analyze EVM execution, identify bottlenecks, and optimize your smart contracts.</p>\n","isPage":true,"text":"\nTevm Node includes a built-in performance profiler that helps you analyze EVM execution, identify bottlenecks, and optimize your smart contracts.\n","title":"Performance &amp; Profiler","titles":[]},"37":{"href":"/advanced/performance-profiler#enabling-the-profiler","html":"\n<p>Enable profiling when creating your node:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  profiler: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    enabled: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Optional: Configure profiling options</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    includeOpcodes: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    includePrecompiles: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nEnable profiling when creating your node:\nimport { createTevmNode } from &#x27;tevm&#x27;\n \nconst node = createTevmNode({\n  profiler: {\n    enabled: true,\n    // Optional: Configure profiling options\n    includeOpcodes: true,\n    includePrecompiles: true,\n  },\n})\n","title":"Enabling the Profiler","titles":["Performance &amp; Profiler"]},"38":{"href":"/advanced/performance-profiler#collecting-performance-data","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Execute some transactions</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ </span><span style=\"color:#6A737D;--shiki-dark:#768390\">/* ... */</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get performance logs</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> logs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.evm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getPerformanceLogs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Clear logs when done</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.evm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">clearPerformanceLogs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n","isPage":false,"text":"\nconst vm = await node.getVm()\n \n// Execute some transactions\nawait vm.runTx({ /* ... */ })\n \n// Get performance logs\nconst logs = vm.evm.getPerformanceLogs()\n \n// Clear logs when done\nvm.evm.clearPerformanceLogs()\n","title":"Collecting Performance Data","titles":["Performance &amp; Profiler"]},"39":{"href":"/advanced/performance-profiler#log-types","html":"\n<p>The profiler collects various types of performance data:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> PerformanceLog</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  type</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;opcode&#x27;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;precompile&#x27;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;call&#x27;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;create&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  startTime</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  endTime</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  executionTime</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  gasUsed</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Additional data based on type</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> OpcodeLog</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> extends</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> PerformanceLog</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  type</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;opcode&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  opcode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  pc</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> PrecompileLog</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> extends</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> PerformanceLog</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  type</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;precompile&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  name</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe profiler collects various types of performance data:\ninterface PerformanceLog {\n  type: &#x27;opcode&#x27; | &#x27;precompile&#x27; | &#x27;call&#x27; | &#x27;create&#x27;\n  startTime: number\n  endTime: number\n  executionTime: number\n  gasUsed?: bigint\n  // Additional data based on type\n}\n \ninterface OpcodeLog extends PerformanceLog {\n  type: &#x27;opcode&#x27;\n  opcode: string\n  pc: number\n}\n \ninterface PrecompileLog extends PerformanceLog {\n  type: &#x27;precompile&#x27;\n  address: string\n  name: string\n}\n","title":"Log Types","titles":["Performance &amp; Profiler"]},"40":{"href":"/advanced/performance-profiler#analyzing-performance","html":"\n","isPage":false,"text":"\n","title":"Analyzing Performance","titles":["Performance &amp; Profiler"]},"41":{"href":"/advanced/performance-profiler#1-opcode-analysis","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Group by opcode</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> opcodeStats</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> logs</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">filter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">log</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> log.type </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">===</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;opcode&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">reduce</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">((</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">acc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> key</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> log.opcode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    acc[key] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> acc[key] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">||</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { count: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, totalTime: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, totalGas: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    acc[key].count</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    acc[key].totalTime </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> log.executionTime</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    acc[key].totalGas </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> log.gasUsed </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">??</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> acc</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }, {})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Find expensive operations</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> expensiveOps</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Object.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">entries</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(opcodeStats)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sort</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(([, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">], [, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> b.totalTime </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> a.totalTime)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">slice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Most expensive operations:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, expensiveOps)</span></span></code></pre>\n","isPage":false,"text":"\n// Group by opcode\nconst opcodeStats = logs\n  .filter(log =&gt; log.type === &#x27;opcode&#x27;)\n  .reduce((acc, log) =&gt; {\n    const key = log.opcode\n    acc[key] = acc[key] || { count: 0, totalTime: 0, totalGas: 0n }\n    acc[key].count++\n    acc[key].totalTime += log.executionTime\n    acc[key].totalGas += log.gasUsed ?? 0n\n    return acc\n  }, {})\n \n// Find expensive operations\nconst expensiveOps = Object.entries(opcodeStats)\n  .sort(([, a], [, b]) =&gt; b.totalTime - a.totalTime)\n  .slice(0, 10)\n \nconsole.log(&#x27;Most expensive operations:&#x27;, expensiveOps)\n","title":"1. Opcode Analysis","titles":["Performance &amp; Profiler","Analyzing Performance"]},"42":{"href":"/advanced/performance-profiler#2-call-tree-analysis","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Analyze call depth and patterns</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> callTree</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> logs</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">filter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">log</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> log.type </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">===</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;call&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">log</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    from: log.from,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    to: log.to,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    value: log.value,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    executionTime: log.executionTime,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    gasUsed: log.gasUsed,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }))</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Call tree:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, callTree)</span></span></code></pre>\n","isPage":false,"text":"\n// Analyze call depth and patterns\nconst callTree = logs\n  .filter(log =&gt; log.type === &#x27;call&#x27;)\n  .map(log =&gt; ({\n    from: log.from,\n    to: log.to,\n    value: log.value,\n    executionTime: log.executionTime,\n    gasUsed: log.gasUsed,\n  }))\n \nconsole.log(&#x27;Call tree:&#x27;, callTree)\n","title":"2. Call Tree Analysis","titles":["Performance &amp; Profiler","Analyzing Performance"]},"43":{"href":"/advanced/performance-profiler#3-gas-usage-patterns","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Track gas usage over time</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> gasTimeline</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> logs</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">filter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">log</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> log.gasUsed </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!==</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">log</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    timestamp: log.startTime,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    gasUsed: log.gasUsed,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    type: log.type,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }))</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Calculate gas efficiency</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> gasEfficiency</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> gasTimeline.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">reduce</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">((</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">acc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  acc.totalGas </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> log.gasUsed </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">??</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  acc.totalTime </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> log.executionTime</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> acc</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, { totalGas: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, totalTime: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> })</span></span></code></pre>\n","isPage":false,"text":"\n// Track gas usage over time\nconst gasTimeline = logs\n  .filter(log =&gt; log.gasUsed !== undefined)\n  .map(log =&gt; ({\n    timestamp: log.startTime,\n    gasUsed: log.gasUsed,\n    type: log.type,\n  }))\n \n// Calculate gas efficiency\nconst gasEfficiency = gasTimeline.reduce((acc, log) =&gt; {\n  acc.totalGas += log.gasUsed ?? 0n\n  acc.totalTime += log.executionTime\n  return acc\n}, { totalGas: 0n, totalTime: 0 })\n","title":"3. Gas Usage Patterns","titles":["Performance &amp; Profiler","Analyzing Performance"]},"44":{"href":"/advanced/performance-profiler#use-cases","html":"\n","isPage":false,"text":"\n","title":"Use Cases","titles":["Performance &amp; Profiler"]},"45":{"href":"/advanced/performance-profiler#1-contract-optimization","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Deploy and profile contract</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ tx: deployTx })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Clear previous logs</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.evm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">clearPerformanceLogs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Profile specific function</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ tx: functionCallTx })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> logs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.evm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getPerformanceLogs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Analyze performance</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> functionProfile</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> analyzeLogs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(logs)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Function performance:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  totalTime: functionProfile.executionTime,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  gasUsed: functionProfile.gasUsed,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  hotspots: functionProfile.hotspots,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\n// Deploy and profile contract\nconst vm = await node.getVm()\nawait vm.runTx({ tx: deployTx })\n \n// Clear previous logs\nvm.evm.clearPerformanceLogs()\n \n// Profile specific function\nawait vm.runTx({ tx: functionCallTx })\nconst logs = vm.evm.getPerformanceLogs()\n \n// Analyze performance\nconst functionProfile = analyzeLogs(logs)\nconsole.log(&#x27;Function performance:&#x27;, {\n  totalTime: functionProfile.executionTime,\n  gasUsed: functionProfile.gasUsed,\n  hotspots: functionProfile.hotspots,\n})\n","title":"1. Contract Optimization","titles":["Performance &amp; Profiler","Use Cases"]},"46":{"href":"/advanced/performance-profiler#2-comparative-analysis","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> compareImplementations</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">implementations</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[]) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> results</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> impl</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> of</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> implementations) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.evm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">clearPerformanceLogs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ tx: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createCallTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(impl) })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> logs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.evm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getPerformanceLogs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    results.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">push</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">analyzePerformance</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(logs))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  return</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> compareResults</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(results)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nasync function compareImplementations(implementations: string[]) {\n  const results = []\n  const vm = await node.getVm()\n \n  for (const impl of implementations) {\n    vm.evm.clearPerformanceLogs()\n    await vm.runTx({ tx: createCallTx(impl) })\n    const logs = vm.evm.getPerformanceLogs()\n    results.push(analyzePerformance(logs))\n  }\n \n  return compareResults(results)\n}\n","title":"2. Comparative Analysis","titles":["Performance &amp; Profiler","Use Cases"]},"47":{"href":"/advanced/performance-profiler#3-gas-optimization","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Track gas usage by contract</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contractGasUsage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> logs</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">filter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">log</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> log.type </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">===</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;call&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">reduce</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">((</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">acc</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> log.to</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    acc[contract] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> acc[contract] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">||</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { calls: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, totalGas: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    acc[contract].calls</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    acc[contract].totalGas </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> log.gasUsed </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">??</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> acc</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }, {})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Identify gas-intensive contracts</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> gasHotspots</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Object.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">entries</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(contractGasUsage)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  .</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sort</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(([, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">], [, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">b</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(b.totalGas </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> a.totalGas))</span></span></code></pre>\n","isPage":false,"text":"\n// Track gas usage by contract\nconst contractGasUsage = logs\n  .filter(log =&gt; log.type === &#x27;call&#x27;)\n  .reduce((acc, log) =&gt; {\n    const contract = log.to\n    acc[contract] = acc[contract] || { calls: 0, totalGas: 0n }\n    acc[contract].calls++\n    acc[contract].totalGas += log.gasUsed ?? 0n\n    return acc\n  }, {})\n \n// Identify gas-intensive contracts\nconst gasHotspots = Object.entries(contractGasUsage)\n  .sort(([, a], [, b]) =&gt; Number(b.totalGas - a.totalGas))\n","title":"3. Gas Optimization","titles":["Performance &amp; Profiler","Use Cases"]},"48":{"href":"/advanced/performance-profiler#best-practices","html":"\n<ol>\n<li>\n<p><strong>Targeted Profiling</strong>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Clear logs before specific operations</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.evm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">clearPerformanceLogs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Run the operation you want to profile</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ </span><span style=\"color:#6A737D;--shiki-dark:#768390\">/* ... */</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> })</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Analyze just that operation</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> logs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.evm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getPerformanceLogs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n</li>\n<li>\n<p><strong>Memory Management</strong>:</p>\n<ul>\n<li>Clear logs periodically</li>\n<li>Profile specific operations rather than entire sessions</li>\n<li>Export and analyze large datasets externally</li>\n</ul>\n</li>\n<li>\n<p><strong>Comparative Analysis</strong>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Compare before/after optimization</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> beforeLogs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> profileOperation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(originalCode)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> afterLogs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> profileOperation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(optimizedCode)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> improvement</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> compareProfiles</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(beforeLogs, afterLogs)</span></span></code></pre>\n</li>\n<li>\n<p><strong>Production Considerations</strong>:</p>\n<ul>\n<li>Disable profiler in production</li>\n<li>Use sampling for long-running operations</li>\n<li>Consider the overhead of profiling itself</li>\n</ul>\n</li>\n</ol>\n","isPage":false,"text":"\n\n\nTargeted Profiling:\n// Clear logs before specific operations\nvm.evm.clearPerformanceLogs()\n// Run the operation you want to profile\nawait vm.runTx({ /* ... */ })\n// Analyze just that operation\nconst logs = vm.evm.getPerformanceLogs()\n\n\nMemory Management:\n\nClear logs periodically\nProfile specific operations rather than entire sessions\nExport and analyze large datasets externally\n\n\n\nComparative Analysis:\n// Compare before/after optimization\nconst beforeLogs = await profileOperation(originalCode)\nconst afterLogs = await profileOperation(optimizedCode)\nconst improvement = compareProfiles(beforeLogs, afterLogs)\n\n\nProduction Considerations:\n\nDisable profiler in production\nUse sampling for long-running operations\nConsider the overhead of profiling itself\n\n\n\n","title":"Best Practices","titles":["Performance &amp; Profiler"]},"49":{"href":"/advanced/performance-profiler#related-topics","html":"\n<ul>\n<li><a href=\"../api/vm-and-submodules\">VM &amp; Submodules</a></li>\n<li><a href=\"../api/methods\">Gas Estimation</a></li>\n<li><a href=\"./txpool\">Transaction Pool</a></li>\n</ul>","isPage":false,"text":"\n\nVM &amp; Submodules\nGas Estimation\nTransaction Pool\n","title":"Related Topics","titles":["Performance &amp; Profiler"]},"50":{"href":"/advanced/receipts-and-logs#receipts--logs","html":"</header>\n<p>Tevm Node provides robust support for managing transaction receipts and event logs through the ReceiptsManager module and filter system.</p>\n","isPage":true,"text":"\nTevm Node provides robust support for managing transaction receipts and event logs through the ReceiptsManager module and filter system.\n","title":"Receipts &amp; Logs","titles":[]},"51":{"href":"/advanced/receipts-and-logs#receipt-management","html":"\n<p>The ReceiptsManager maintains an index of all transaction receipts and their associated logs.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createImpersonatedTx } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/tx&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { runTx } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/vm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createAddress, hexToBytes } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/utils&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> receiptsManager</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getReceiptsManager</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Execute a transaction and get receipt</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createImpersonatedTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  impersonatedAddress: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234567890123456789012345678901234567890&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x2345678901234567890123456789012345678901&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000000000000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  gasLimit: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">21000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm)({ tx })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> receiptResult</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receiptsManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getReceiptByTxHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">hash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (receiptResult) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">receipt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">blockHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">txIndex</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">logIndex</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receiptResult</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Access receipt data</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    status: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;status&#x27;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> in</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receipt </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receipt.status </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    gasUsed: receipt.cumulativeBlockGasUsed,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    logs: receipt.logs</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe ReceiptsManager maintains an index of all transaction receipts and their associated logs.\nimport { createTevmNode } from &#x27;tevm&#x27;\nimport { createImpersonatedTx } from &#x27;tevm/tx&#x27;\nimport { runTx } from &#x27;tevm/vm&#x27;\nimport { createAddress, hexToBytes } from &#x27;tevm/utils&#x27;\n \nconst node = createTevmNode()\nconst receiptsManager = await node.getReceiptsManager()\n \n// Execute a transaction and get receipt\nconst vm = await node.getVm()\nconst tx = createImpersonatedTx({\n  impersonatedAddress: createAddress(&#x27;0x1234567890123456789012345678901234567890&#x27;),\n  to: createAddress(&#x27;0x2345678901234567890123456789012345678901&#x27;),\n  value: 1000000000000000000n,\n  gasLimit: 21000n,\n})\n \nconst result = await runTx(vm)({ tx })\nconst receiptResult = await receiptsManager.getReceiptByTxHash(tx.hash())\n \nif (receiptResult) {\n  const [receipt, blockHash, txIndex, logIndex] = receiptResult\n  // Access receipt data\n  console.log({\n    status: &#x27;status&#x27; in receipt ? receipt.status : undefined,\n    gasUsed: receipt.cumulativeBlockGasUsed,\n    logs: receipt.logs\n  })\n}\n","title":"Receipt Management","titles":["Receipts &amp; Logs"]},"52":{"href":"/advanced/receipts-and-logs#receipt-types","html":"\n<p>Tevm supports different receipt types based on the Ethereum hardfork:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> PreByzantiumReceipt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  stateRoot</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  cumulativeBlockGasUsed</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  logs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> PostByzantiumReceipt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  status</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // 1 for success, 0 for failure</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  cumulativeBlockGasUsed</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  logs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> EIP4844Receipt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> extends</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> PostByzantiumReceipt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  blobGasUsed</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  blobGasPrice</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nTevm supports different receipt types based on the Ethereum hardfork:\ninterface PreByzantiumReceipt {\n  stateRoot: Uint8Array\n  cumulativeBlockGasUsed: bigint\n  logs: Log[]\n}\n \ninterface PostByzantiumReceipt {\n  status: number // 1 for success, 0 for failure\n  cumulativeBlockGasUsed: bigint\n  logs: Log[]\n}\n \ninterface EIP4844Receipt extends PostByzantiumReceipt {\n  blobGasUsed: bigint\n  blobGasPrice: bigint\n}\n","title":"Receipt Types","titles":["Receipts &amp; Logs","Receipt Management"]},"53":{"href":"/advanced/receipts-and-logs#event-logs","html":"\n","isPage":false,"text":"\n","title":"Event Logs","titles":["Receipts &amp; Logs"]},"54":{"href":"/advanced/receipts-and-logs#contract-deployment-and-event-emission","html":"\n<p>Here&#x27;s how to deploy a contract and capture its events:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Deploy contract</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> deployTx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createImpersonatedTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  impersonatedAddress: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234567890123456789012345678901234567890&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">CONTRACT_BYTECODE</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  gasLimit: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> deployResult</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm)({ tx: deployTx })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contractAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> deployResult.createdAddress</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">contractAddress) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">throw</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Contract deployment failed&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Interact with contract to emit events</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> interactTx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createImpersonatedTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  impersonatedAddress: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234567890123456789012345678901234567890&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: contractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">EMIT_EVENT_SELECTOR</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Function selector that emits events</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  gasLimit: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm)({ tx: interactTx })</span></span></code></pre>\n","isPage":false,"text":"\nHere&#x27;s how to deploy a contract and capture its events:\n// Deploy contract\nconst deployTx = createImpersonatedTx({\n  impersonatedAddress: createAddress(&#x27;0x1234567890123456789012345678901234567890&#x27;),\n  data: CONTRACT_BYTECODE,\n  gasLimit: 1000000n,\n})\n \nconst vm = await node.getVm()\nconst deployResult = await runTx(vm)({ tx: deployTx })\nconst contractAddress = deployResult.createdAddress\nif (!contractAddress) throw new Error(&#x27;Contract deployment failed&#x27;)\n \n// Interact with contract to emit events\nconst interactTx = createImpersonatedTx({\n  impersonatedAddress: createAddress(&#x27;0x1234567890123456789012345678901234567890&#x27;),\n  to: contractAddress,\n  data: EMIT_EVENT_SELECTOR, // Function selector that emits events\n  gasLimit: 100000n,\n})\n \nawait runTx(vm)({ tx: interactTx })\n","title":"Contract Deployment and Event Emission","titles":["Receipts &amp; Logs","Event Logs"]},"55":{"href":"/advanced/receipts-and-logs#querying-logs","html":"\n<p>The ReceiptsManager provides flexible log querying with multiple filter options:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get blocks for filtering</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> fromBlock</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.blockchain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBlockByTag</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;earliest&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> toBlock</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.blockchain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBlockByTag</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;latest&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Filter by contract address</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> addressLogs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receiptsManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getLogs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  fromBlock,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  toBlock,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  [contractAddress.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toBytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()],</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  undefined</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Filter by event topic</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> eventTopic</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> hexToBytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x000000000000000000000000000000000000000000000000000000000000abcd&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> topicLogs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receiptsManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getLogs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  fromBlock,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  toBlock,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  [eventTopic]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Filter by both address and topic</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> combinedLogs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receiptsManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getLogs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  fromBlock,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  toBlock,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  [contractAddress.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toBytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  [eventTopic]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nThe ReceiptsManager provides flexible log querying with multiple filter options:\n// Get blocks for filtering\nconst fromBlock = await vm.blockchain.getBlockByTag(&#x27;earliest&#x27;)\nconst toBlock = await vm.blockchain.getBlockByTag(&#x27;latest&#x27;)\n \n// Filter by contract address\nconst addressLogs = await receiptsManager.getLogs(\n  fromBlock,\n  toBlock,\n  [contractAddress.toBytes()],\n  undefined\n)\n \n// Filter by event topic\nconst eventTopic = hexToBytes(&#x27;0x000000000000000000000000000000000000000000000000000000000000abcd&#x27;)\nconst topicLogs = await receiptsManager.getLogs(\n  fromBlock,\n  toBlock,\n  undefined,\n  [eventTopic]\n)\n \n// Filter by both address and topic\nconst combinedLogs = await receiptsManager.getLogs(\n  fromBlock,\n  toBlock,\n  [contractAddress.toBytes()],\n  [eventTopic]\n)\n","title":"Querying Logs","titles":["Receipts &amp; Logs","Event Logs"]},"56":{"href":"/advanced/receipts-and-logs#error-handling","html":"\n<p>The ReceiptsManager includes robust error handling:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Handle non-existent receipts</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nonExistentHash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> hexToBytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234567890123456789012345678901234567890123456789012345678901234&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> receipt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receiptsManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getReceiptByTxHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(nonExistentHash)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (receipt </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">===</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> null</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Receipt not found&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Handle invalid log filters</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> invalidAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> hexToBytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x0000&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> logs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receiptsManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getLogs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(fromBlock, toBlock, [invalidAddress], </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (logs.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">length</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ===</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;No logs found for invalid address&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe ReceiptsManager includes robust error handling:\n// Handle non-existent receipts\nconst nonExistentHash = hexToBytes(&#x27;0x1234567890123456789012345678901234567890123456789012345678901234&#x27;)\nconst receipt = await receiptsManager.getReceiptByTxHash(nonExistentHash)\nif (receipt === null) {\n  console.log(&#x27;Receipt not found&#x27;)\n}\n \n// Handle invalid log filters\nconst invalidAddress = hexToBytes(&#x27;0x0000&#x27;)\nconst logs = await receiptsManager.getLogs(fromBlock, toBlock, [invalidAddress], undefined)\nif (logs.length === 0) {\n  console.log(&#x27;No logs found for invalid address&#x27;)\n}\n","title":"Error Handling","titles":["Receipts &amp; Logs","Event Logs"]},"57":{"href":"/advanced/receipts-and-logs#performance-considerations","html":"\n<p>The ReceiptsManager includes built-in limits to prevent excessive resource usage:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Log query limits</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> GET_LOGS_LIMIT</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 10000</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // Maximum number of logs</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> GET_LOGS_LIMIT_MEGABYTES</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 150</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // Maximum response size</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> GET_LOGS_BLOCK_RANGE_LIMIT</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 2500</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // Maximum block range</span></span></code></pre>\n","isPage":false,"text":"\nThe ReceiptsManager includes built-in limits to prevent excessive resource usage:\n// Log query limits\nconst GET_LOGS_LIMIT = 10000 // Maximum number of logs\nconst GET_LOGS_LIMIT_MEGABYTES = 150 // Maximum response size\nconst GET_LOGS_BLOCK_RANGE_LIMIT = 2500 // Maximum block range\n","title":"Performance Considerations","titles":["Receipts &amp; Logs"]},"58":{"href":"/advanced/receipts-and-logs#best-practices","html":"\n<ol>\n<li>\n<p><strong>Efficient Log Queries</strong>:</p>\n<ul>\n<li>Use specific address and topic filters</li>\n<li>Limit block ranges for large queries</li>\n<li>Handle null results appropriately</li>\n</ul>\n</li>\n<li>\n<p><strong>Receipt Storage</strong>:</p>\n<ul>\n<li>Always check for null/undefined results</li>\n<li>Handle receipt pruning gracefully</li>\n<li>Verify contract deployment success</li>\n</ul>\n</li>\n<li>\n<p><strong>Type Safety</strong>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Ensure contract deployment success</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contractAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> deployResult.createdAddress</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">contractAddress) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">throw</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Contract deployment failed&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Handle receipt types</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (receiptResult) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">receipt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receiptResult</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;status&#x27;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> in</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receipt) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`Transaction ${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">receipt</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">status</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ===</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ?</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;succeeded&#x27;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> :</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;failed&#x27;}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n</li>\n</ol>\n","isPage":false,"text":"\n\n\nEfficient Log Queries:\n\nUse specific address and topic filters\nLimit block ranges for large queries\nHandle null results appropriately\n\n\n\nReceipt Storage:\n\nAlways check for null/undefined results\nHandle receipt pruning gracefully\nVerify contract deployment success\n\n\n\nType Safety:\n// Ensure contract deployment success\nconst contractAddress = deployResult.createdAddress\nif (!contractAddress) throw new Error(&#x27;Contract deployment failed&#x27;)\n \n// Handle receipt types\nif (receiptResult) {\n  const [receipt] = receiptResult\n  if (&#x27;status&#x27; in receipt) {\n    console.log(`Transaction ${receipt.status === 1 ? &#x27;succeeded&#x27; : &#x27;failed&#x27;}`)\n  }\n}\n\n\n","title":"Best Practices","titles":["Receipts &amp; Logs","Performance Considerations"]},"59":{"href":"/advanced/receipts-and-logs#related-topics","html":"\n<ul>\n<li><a href=\"../api/json-rpc\">JSON-RPC Support</a></li>\n<li><a href=\"../api/vm-and-submodules\">VM &amp; Submodules</a></li>\n<li><a href=\"./txpool\">Transaction Pool</a></li>\n</ul>","isPage":false,"text":"\n\nJSON-RPC Support\nVM &amp; Submodules\nTransaction Pool\n","title":"Related Topics","titles":["Receipts &amp; Logs"]},"60":{"href":"/advanced/txpool#transaction-pool","html":"</header>\n<p>The Transaction Pool (TxPool) is a crucial component that manages pending transactions before they&#x27;re included in blocks. It handles transaction ordering, replacement, validation, and lifecycle management.</p>\n","isPage":true,"text":"\nThe Transaction Pool (TxPool) is a crucial component that manages pending transactions before they&#x27;re included in blocks. It handles transaction ordering, replacement, validation, and lifecycle management.\n","title":"Transaction Pool","titles":[]},"61":{"href":"/advanced/txpool#quick-start","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createAddress } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/address&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createImpersonatedTx } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/tx&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Initialize node and get txpool</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txPool</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getTxPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create and add a transaction</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createImpersonatedTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  impersonatedAddress: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x2345...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000000000000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 1 ETH</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  gasLimit: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">21000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  maxFeePerGas: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">20000000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  maxPriorityFeePerGas: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">20000000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  nonce: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">addUnverified</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tx)</span></span></code></pre>\n","isPage":false,"text":"\nimport { createTevmNode } from &#x27;tevm&#x27;\nimport { createAddress } from &#x27;tevm/address&#x27;\nimport { createImpersonatedTx } from &#x27;tevm/tx&#x27;\n \n// Initialize node and get txpool\nconst node = createTevmNode()\nconst txPool = await node.getTxPool()\n \n// Create and add a transaction\nconst tx = createImpersonatedTx({\n  impersonatedAddress: createAddress(&#x27;0x1234...&#x27;),\n  to: createAddress(&#x27;0x2345...&#x27;),\n  value: 1000000000000000000n, // 1 ETH\n  gasLimit: 21000n,\n  maxFeePerGas: 20000000000n,\n  maxPriorityFeePerGas: 20000000000n,\n  nonce: 0n,\n})\n \nawait txPool.addUnverified(tx)\n","title":"Quick Start","titles":["Transaction Pool"]},"62":{"href":"/advanced/txpool#key-features","html":"\n<ul>\n<li>🔍 <strong>Transaction Validation</strong> - Comprehensive validation including nonce, balance, and gas checks</li>\n<li>🔄 <strong>Transaction Replacement</strong> - Replace pending transactions with higher gas price versions</li>\n<li>📊 <strong>Nonce Ordering</strong> - Maintains correct transaction sequence per account</li>\n<li>🧹 <strong>Automatic Pruning</strong> - Removes old transactions to prevent memory bloat</li>\n<li>⚡ <strong>Performance Optimized</strong> - Efficient handling of large transaction volumes</li>\n</ul>\n","isPage":false,"text":"\n\n🔍 Transaction Validation - Comprehensive validation including nonce, balance, and gas checks\n🔄 Transaction Replacement - Replace pending transactions with higher gas price versions\n📊 Nonce Ordering - Maintains correct transaction sequence per account\n🧹 Automatic Pruning - Removes old transactions to prevent memory bloat\n⚡ Performance Optimized - Efficient handling of large transaction volumes\n\n","title":"Key Features","titles":["Transaction Pool"]},"63":{"href":"/advanced/txpool#core-concepts","html":"\n","isPage":false,"text":"\n","title":"Core Concepts","titles":["Transaction Pool"]},"64":{"href":"/advanced/txpool#pool-limits","html":"\n<p>The TxPool enforces several limits to ensure stable operation:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> LIMITS</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  MAX_POOL_SIZE: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,           </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Maximum total transactions</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  MAX_TXS_PER_ACCOUNT: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,      </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Maximum per account</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  MIN_GAS_PRICE: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,     </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 0.1 GWei minimum</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  TX_MAX_DATA_SIZE: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">128</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1024</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 128KB max transaction size</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe TxPool enforces several limits to ensure stable operation:\nconst LIMITS = {\n  MAX_POOL_SIZE: 5000,           // Maximum total transactions\n  MAX_TXS_PER_ACCOUNT: 100,      // Maximum per account\n  MIN_GAS_PRICE: 100000000n,     // 0.1 GWei minimum\n  TX_MAX_DATA_SIZE: 128 * 1024,  // 128KB max transaction size\n}\n","title":"Pool Limits","titles":["Transaction Pool","Core Concepts"]},"65":{"href":"/advanced/txpool#transaction-lifecycle","html":"\n<ol>\n<li><strong>Addition</strong> - Transactions enter the pool via <code>add()</code> or <code>addUnverified()</code></li>\n<li><strong>Validation</strong> - Optional checks for nonce, balance, and gas parameters</li>\n<li><strong>Storage</strong> - Valid transactions are stored and ordered by nonce</li>\n<li><strong>Pruning</strong> - Old transactions are removed after <code>POOLED_STORAGE_TIME_LIMIT</code> (20 minutes)</li>\n</ol>\n","isPage":false,"text":"\n\nAddition - Transactions enter the pool via add() or addUnverified()\nValidation - Optional checks for nonce, balance, and gas parameters\nStorage - Valid transactions are stored and ordered by nonce\nPruning - Old transactions are removed after POOLED_STORAGE_TIME_LIMIT (20 minutes)\n\n","title":"Transaction Lifecycle","titles":["Transaction Pool","Core Concepts"]},"66":{"href":"/advanced/txpool#detailed-usage","html":"\n","isPage":false,"text":"\n","title":"Detailed Usage","titles":["Transaction Pool"]},"67":{"href":"/advanced/txpool#adding-transactions","html":"\n<p>Two methods for adding transactions, each with different validation levels:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Method 1: With full validation</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tx)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error.message.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">includes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;insufficient balance&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Account has insufficient funds&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Method 2: Without validation (faster)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">addUnverified</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tx)</span></span></code></pre>\n","isPage":false,"text":"\nTwo methods for adding transactions, each with different validation levels:\n// Method 1: With full validation\ntry {\n  await txPool.add(tx)\n} catch (error) {\n  if (error.message.includes(&#x27;insufficient balance&#x27;)) {\n    console.error(&#x27;Account has insufficient funds&#x27;)\n  }\n}\n \n// Method 2: Without validation (faster)\nawait txPool.addUnverified(tx)\n","title":"Adding Transactions","titles":["Transaction Pool","Detailed Usage"]},"68":{"href":"/advanced/txpool#transaction-replacement","html":"\n<p>Replace a pending transaction by submitting a new one with the same nonce and higher gas price:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> originalTx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createImpersonatedTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // ... base transaction params ...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  maxFeePerGas: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">20000000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  nonce: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> replacementTx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createImpersonatedTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // ... same params as original ...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  maxFeePerGas: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">30000000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// At least 10% higher</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  nonce: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Same nonce as original</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">addUnverified</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(originalTx)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">addUnverified</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(replacementTx) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Replaces originalTx</span></span></code></pre>\n<blockquote>\n<p><strong>Note</strong>: Replacement transactions must increase gas price by at least <code>MIN_GAS_PRICE_BUMP_PERCENT</code> (10%)</p>\n</blockquote>\n","isPage":false,"text":"\nReplace a pending transaction by submitting a new one with the same nonce and higher gas price:\nconst originalTx = createImpersonatedTx({\n  // ... base transaction params ...\n  maxFeePerGas: 20000000000n,\n  nonce: 0n,\n})\n \nconst replacementTx = createImpersonatedTx({\n  // ... same params as original ...\n  maxFeePerGas: 30000000000n, // At least 10% higher\n  nonce: 0n, // Same nonce as original\n})\n \nawait txPool.addUnverified(originalTx)\nawait txPool.addUnverified(replacementTx) // Replaces originalTx\n\nNote: Replacement transactions must increase gas price by at least MIN_GAS_PRICE_BUMP_PERCENT (10%)\n\n","title":"Transaction Replacement","titles":["Transaction Pool","Detailed Usage"]},"69":{"href":"/advanced/txpool#querying-transactions","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get transactions by sender</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> senderTxs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBySenderAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(senderAddress)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get transactions by hash</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txHashes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [hash1, hash2]</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> specificTxs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getByHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txHashes)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get ordered transactions for mining</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> orderedTxs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">txsByPriceAndNonce</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  baseFee: currentBaseFee,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  allowedBlobs: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">6</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// For EIP-4844</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\n// Get transactions by sender\nconst senderTxs = await txPool.getBySenderAddress(senderAddress)\n \n// Get transactions by hash\nconst txHashes = [hash1, hash2]\nconst specificTxs = txPool.getByHash(txHashes)\n \n// Get ordered transactions for mining\nconst orderedTxs = await txPool.txsByPriceAndNonce({\n  baseFee: currentBaseFee,\n  allowedBlobs: 6, // For EIP-4844\n})\n","title":"Querying Transactions","titles":["Transaction Pool","Detailed Usage"]},"70":{"href":"/advanced/txpool#block-processing","html":"\n<p>When new blocks are added, update the pool:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { mineHandler } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/actions&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Mine new blocks</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> mineHandler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Remove included transactions</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">removeNewBlockTxs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(newBlocks)</span></span></code></pre>\n","isPage":false,"text":"\nWhen new blocks are added, update the pool:\nimport { mineHandler } from &#x27;tevm/actions&#x27;\n \n// Mine new blocks\nawait mineHandler(node)()\n \n// Remove included transactions\ntxPool.removeNewBlockTxs(newBlocks)\n","title":"Block Processing","titles":["Transaction Pool","Detailed Usage"]},"71":{"href":"/advanced/txpool#advanced-features","html":"\n","isPage":false,"text":"\n","title":"Advanced Features","titles":["Transaction Pool"]},"72":{"href":"/advanced/txpool#pool-management","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Start transaction processing</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">start</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Stop processing (but keep transactions)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stop</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Clear all transactions</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Manual cleanup of old transactions</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">cleanup</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n","isPage":false,"text":"\n// Start transaction processing\ntxPool.start()\n \n// Stop processing (but keep transactions)\ntxPool.stop()\n \n// Clear all transactions\ntxPool.close()\n \n// Manual cleanup of old transactions\ntxPool.cleanup()\n","title":"Pool Management","titles":["Transaction Pool","Advanced Features"]},"73":{"href":"/advanced/txpool#transaction-types","html":"\n<p>The pool supports all Ethereum transaction types:</p>\n<ul>\n<li>Legacy Transactions</li>\n<li>EIP-2930 (Access Lists)</li>\n<li>EIP-1559 (Fee Market)</li>\n<li>EIP-4844 (Blob Transactions)</li>\n<li>Tevm Impersonated Transactions</li>\n</ul>\n","isPage":false,"text":"\nThe pool supports all Ethereum transaction types:\n\nLegacy Transactions\nEIP-2930 (Access Lists)\nEIP-1559 (Fee Market)\nEIP-4844 (Blob Transactions)\nTevm Impersonated Transactions\n\n","title":"Transaction Types","titles":["Transaction Pool","Advanced Features"]},"74":{"href":"/advanced/txpool#best-practices","html":"\n","isPage":false,"text":"\n","title":"Best Practices","titles":["Transaction Pool"]},"75":{"href":"/advanced/txpool#1-transaction-creation","html":"\n<p>Always use <code>createImpersonatedTx</code> with proper types:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createImpersonatedTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  impersonatedAddress: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(recipient),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseEther</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;1&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Use helper functions for values</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  gasLimit: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">21000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  maxFeePerGas: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">gweiToWei</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;20&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  maxPriorityFeePerGas: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">gweiToWei</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;2&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  nonce: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nAlways use createImpersonatedTx with proper types:\nconst tx = createImpersonatedTx({\n  impersonatedAddress: createAddress(address),\n  to: createAddress(recipient),\n  value: parseEther(&#x27;1&#x27;), // Use helper functions for values\n  gasLimit: 21000n,\n  maxFeePerGas: gweiToWei(&#x27;20&#x27;),\n  maxPriorityFeePerGas: gweiToWei(&#x27;2&#x27;),\n  nonce: 0n,\n})\n","title":"1. Transaction Creation","titles":["Transaction Pool","Best Practices"]},"76":{"href":"/advanced/txpool#2-error-handling","html":"\n<p>Implement comprehensive error handling:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tx)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  switch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    case</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> error.message.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">includes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;insufficient balance&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">):</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">      // Handle balance error</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      break</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    case</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> error.message.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">includes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;nonce too low&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">):</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">      // Handle nonce error</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      break</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    case</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> error.message.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">includes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;gas price too low&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">):</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">      // Handle gas price error</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      break</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    default</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">      // Handle unknown errors</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nImplement comprehensive error handling:\ntry {\n  await txPool.add(tx)\n} catch (error) {\n  switch (true) {\n    case error.message.includes(&#x27;insufficient balance&#x27;):\n      // Handle balance error\n      break\n    case error.message.includes(&#x27;nonce too low&#x27;):\n      // Handle nonce error\n      break\n    case error.message.includes(&#x27;gas price too low&#x27;):\n      // Handle gas price error\n      break\n    default:\n      // Handle unknown errors\n  }\n}\n","title":"2. Error Handling","titles":["Transaction Pool","Best Practices"]},"77":{"href":"/advanced/txpool#3-performance-optimization","html":"\n<ul>\n<li>Use <code>addUnverified</code> for bulk operations</li>\n<li>Implement proper cleanup cycles</li>\n<li>Monitor pool size and transaction age</li>\n</ul>\n","isPage":false,"text":"\n\nUse addUnverified for bulk operations\nImplement proper cleanup cycles\nMonitor pool size and transaction age\n\n","title":"3. Performance Optimization","titles":["Transaction Pool","Best Practices"]},"78":{"href":"/advanced/txpool#4-memory-management","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Regular cleanup cycle</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setInterval</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">cleanup</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 60</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Every 5 minutes</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Monitor pool size</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> poolSize</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> txPool.txsInPool</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (poolSize </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> MAX_POOL_SIZE</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0.8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">warn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Pool approaching capacity&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\n// Regular cleanup cycle\nsetInterval(() =&gt; {\n  txPool.cleanup()\n}, 5 * 60 * 1000) // Every 5 minutes\n \n// Monitor pool size\nconst poolSize = txPool.txsInPool\nif (poolSize &gt; MAX_POOL_SIZE * 0.8) {\n  console.warn(&#x27;Pool approaching capacity&#x27;)\n}\n","title":"4. Memory Management","titles":["Transaction Pool","Best Practices"]},"79":{"href":"/advanced/txpool#api-reference","html":"\n","isPage":false,"text":"\n","title":"API Reference","titles":["Transaction Pool"]},"80":{"href":"/advanced/txpool#txpool-class","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">class</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TxPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  constructor</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">options</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Vm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  async</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Transaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">void</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  async</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> addUnverified</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Transaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">void</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  async</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getBySenderAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TxPoolObject</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[]&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  getByHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">hashes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[])</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Transaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[]</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  removeByHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">hash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> void</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  removeNewBlockTxs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">blocks</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[])</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> void</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  start</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> boolean</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  stop</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> boolean</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  cleanup</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> void</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> void</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nclass TxPool {\n  constructor(options: { vm: Vm })\n  async add(tx: Transaction): Promise&lt;void&gt;\n  async addUnverified(tx: Transaction): Promise&lt;void&gt;\n  async getBySenderAddress(address: Address): Promise&lt;TxPoolObject[]&gt;\n  getByHash(hashes: Uint8Array[]): Transaction[]\n  removeByHash(hash: string): void\n  removeNewBlockTxs(blocks: Block[]): void\n  start(): boolean\n  stop(): boolean\n  cleanup(): void\n  close(): void\n}\n","title":"TxPool Class","titles":["Transaction Pool","API Reference"]},"81":{"href":"/advanced/txpool#related-topics","html":"\n<ul>\n<li><a href=\"../api/json-rpc\">JSON-RPC Support</a></li>\n<li><a href=\"../api/vm-and-submodules\">VM &amp; Submodules</a></li>\n<li><a href=\"./receipts-and-logs\">Receipts &amp; Logs</a></li>\n</ul>","isPage":false,"text":"\n\nJSON-RPC Support\nVM &amp; Submodules\nReceipts &amp; Logs\n","title":"Related Topics","titles":["Transaction Pool"]},"82":{"href":"/api/account-management#account-management","html":"</header>\n<p>Tevm provides two key actions for managing account state: <code>getAccountHandler</code> and <code>setAccountHandler</code>.</p>\n","isPage":true,"text":"\nTevm provides two key actions for managing account state: getAccountHandler and setAccountHandler.\n","title":"Account Management","titles":[]},"83":{"href":"/api/account-management#getaccounthandler","html":"\n<p>The <code>getAccountHandler</code> action allows you to retrieve the current state of an account.</p>\n","isPage":false,"text":"\nThe getAccountHandler action allows you to retrieve the current state of an account.\n","title":"getAccountHandler","titles":["Account Management"]},"84":{"href":"/api/account-management#parameters","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> GetAccountParams</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Required address of the account</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Optional block tag to query state from</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  blockTag</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;latest&#x27;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;pending&#x27;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;earliest&#x27;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Whether to return storage (can be expensive)</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  returnStorage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> boolean</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\ntype GetAccountParams = {\n  // Required address of the account\n  address: Address\n  // Optional block tag to query state from\n  blockTag?: &#x27;latest&#x27; | &#x27;pending&#x27; | &#x27;earliest&#x27; | number\n  // Whether to return storage (can be expensive)\n  returnStorage?: boolean\n}\n","title":"Parameters","titles":["Account Management","getAccountHandler"]},"85":{"href":"/api/account-management#return-type","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> GetAccountResult</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Address of the account</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Current nonce</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  nonce</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Balance in wei</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  balance</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Deployed bytecode (if contract)</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  deployedBytecode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Hex</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Storage root</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  storageRoot</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Hex</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Code hash</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  codeHash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Hex</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Whether this is a contract</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  isContract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> boolean</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Whether account is empty</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  isEmpty</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> boolean</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Storage (if returnStorage=true)</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  storage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { [</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">key</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Hex</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Hex</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Any errors that occurred</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  errors</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TevmGetAccountError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\ntype GetAccountResult = {\n  // Address of the account\n  address: Address\n  // Current nonce\n  nonce: bigint\n  // Balance in wei\n  balance: bigint\n  // Deployed bytecode (if contract)\n  deployedBytecode: Hex\n  // Storage root\n  storageRoot: Hex\n  // Code hash\n  codeHash: Hex\n  // Whether this is a contract\n  isContract: boolean\n  // Whether account is empty\n  isEmpty: boolean\n  // Storage (if returnStorage=true)\n  storage?: { [key: Hex]: Hex }\n  // Any errors that occurred\n  errors?: TevmGetAccountError[]\n}\n","title":"Return Type","titles":["Account Management","getAccountHandler"]},"86":{"href":"/api/account-management#example","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { getAccountHandler } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/actions&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> account</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getAccountHandler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  blockTag: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;latest&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  returnStorage: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Balance:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, account.balance)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Nonce:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, account.nonce)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (account.isContract) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Code:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, account.deployedBytecode)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Storage:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, account.storage)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nimport { createTevmNode } from &#x27;tevm&#x27;\nimport { getAccountHandler } from &#x27;tevm/actions&#x27;\n \nconst node = createTevmNode()\n \nconst account = await getAccountHandler(node)({\n  address: &#x27;0x...&#x27;,\n  blockTag: &#x27;latest&#x27;,\n  returnStorage: true\n})\n \nconsole.log(&#x27;Balance:&#x27;, account.balance)\nconsole.log(&#x27;Nonce:&#x27;, account.nonce)\nif (account.isContract) {\n  console.log(&#x27;Code:&#x27;, account.deployedBytecode)\n  console.log(&#x27;Storage:&#x27;, account.storage)\n}\n","title":"Example","titles":["Account Management","getAccountHandler"]},"87":{"href":"/api/account-management#setaccounthandler","html":"\n<p>The <code>setAccountHandler</code> action allows you to modify account state directly.</p>\n","isPage":false,"text":"\nThe setAccountHandler action allows you to modify account state directly.\n","title":"setAccountHandler","titles":["Account Management"]},"88":{"href":"/api/account-management#parameters-1","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> SetAccountParams</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Required address to modify</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // New nonce value</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  nonce</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // New balance in wei</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  balance</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // New deployed bytecode</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  deployedBytecode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Hex</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // New storage values</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  state</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { [</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">key</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Hex</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Hex</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\ntype SetAccountParams = {\n  // Required address to modify\n  address: Address\n  // New nonce value\n  nonce?: bigint\n  // New balance in wei\n  balance?: bigint\n  // New deployed bytecode\n  deployedBytecode?: Hex\n  // New storage values\n  state?: { [key: Hex]: Hex }\n}\n","title":"Parameters","titles":["Account Management","setAccountHandler"]},"89":{"href":"/api/account-management#return-type-1","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> SetAccountResult</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Any errors that occurred</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  errors</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TevmSetAccountError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\ntype SetAccountResult = {\n  // Any errors that occurred\n  errors?: TevmSetAccountError[]\n}\n","title":"Return Type","titles":["Account Management","setAccountHandler"]},"90":{"href":"/api/account-management#examples","html":"\n","isPage":false,"text":"\n","title":"Examples","titles":["Account Management","setAccountHandler"]},"91":{"href":"/api/account-management#1-setting-account-balance","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { setAccountHandler } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/actions&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setAccountHandler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  balance: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseEther</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;100&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nimport { setAccountHandler } from &#x27;tevm/actions&#x27;\n \nawait setAccountHandler(node)({\n  address: &#x27;0x...&#x27;,\n  balance: parseEther(&#x27;100&#x27;)\n})\n","title":"1. Setting Account Balance","titles":["Account Management","setAccountHandler","Examples"]},"92":{"href":"/api/account-management#2-deploying-contract-code","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setAccountHandler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: contractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  deployedBytecode: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  state: {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Initial storage values</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &#x27;0x0000...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x0000...&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nawait setAccountHandler(node)({\n  address: contractAddress,\n  deployedBytecode: &#x27;0x...&#x27;,\n  state: {\n    // Initial storage values\n    &#x27;0x0000...&#x27;: &#x27;0x0000...&#x27;\n  }\n})\n","title":"2. Deploying Contract Code","titles":["Account Management","setAccountHandler","Examples"]},"93":{"href":"/api/account-management#3-modifying-multiple-properties","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setAccountHandler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  nonce: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  balance: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseEther</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;10&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  state: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    [slot1]: value1,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    [slot2]: value2</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nawait setAccountHandler(node)({\n  address: &#x27;0x...&#x27;,\n  nonce: 5n,\n  balance: parseEther(&#x27;10&#x27;),\n  state: {\n    [slot1]: value1,\n    [slot2]: value2\n  }\n})\n","title":"3. Modifying Multiple Properties","titles":["Account Management","setAccountHandler","Examples"]},"94":{"href":"/api/account-management#best-practices","html":"\n<ol>\n<li>\n<p><strong>Storage Management</strong>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Avoid fetching storage unless needed</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> account</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getAccountHandler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  returnStorage: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // default</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n</li>\n<li>\n<p><strong>State Consistency</strong>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Check account exists before modifying</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> account</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getAccountHandler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)({ address })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">account.isEmpty) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setAccountHandler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    address,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    balance: account.balance </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> amount</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n</li>\n<li>\n<p><strong>Error Handling</strong>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setAccountHandler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  balance: newBalance,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  throwOnFail: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (result.errors) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Failed to set account:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, result.errors)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n</li>\n</ol>\n","isPage":false,"text":"\n\n\nStorage Management:\n// Avoid fetching storage unless needed\nconst account = await getAccountHandler(node)({\n  address: &#x27;0x...&#x27;,\n  returnStorage: false // default\n})\n\n\nState Consistency:\n// Check account exists before modifying\nconst account = await getAccountHandler(node)({ address })\nif (!account.isEmpty) {\n  await setAccountHandler(node)({\n    address,\n    balance: account.balance + amount\n  })\n}\n\n\nError Handling:\nconst result = await setAccountHandler(node)({\n  address: &#x27;0x...&#x27;,\n  balance: newBalance,\n  throwOnFail: false\n})\n \nif (result.errors) {\n  console.error(&#x27;Failed to set account:&#x27;, result.errors)\n}\n\n\n","title":"Best Practices","titles":["Account Management"]},"95":{"href":"/api/account-management#related-topics","html":"\n<ul>\n<li><a href=\"../core/managing-state\">State Management</a></li>\n<li><a href=\"./tevm-call\">Call API</a></li>\n<li><a href=\"./json-rpc\">JSON-RPC Support</a></li>\n</ul>","isPage":false,"text":"\n\nState Management\nCall API\nJSON-RPC Support\n","title":"Related Topics","titles":["Account Management"]},"96":{"href":"/api/actions#tevmactions","html":"</header>\n<blockquote>\n<p><strong>Generated API Documentation</strong>: View the full API documentation in the <a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs\">evmts/tevm-monorepo/packages/actions/docs</a> folder.</p>\n</blockquote>\n<p>The <code>@tevm/actions</code> package provides a comprehensive set of actions for interacting with the Tevm client. It includes both standard Ethereum JSON-RPC methods and Tevm-specific functionality.</p>\n","isPage":true,"text":"\n\nGenerated API Documentation: View the full API documentation in the evmts/tevm-monorepo/packages/actions/docs folder.\n\nThe @tevm/actions package provides a comprehensive set of actions for interacting with the Tevm client. It includes both standard Ethereum JSON-RPC methods and Tevm-specific functionality.\n","title":"@tevm/actions","titles":[]},"97":{"href":"/api/actions#installation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> @tevm/actions</span></span></code></pre>\n","isPage":false,"text":"\nnpm install @tevm/actions\n","title":"Installation","titles":["@tevm/actions"]},"98":{"href":"/api/actions#main-categories","html":"\n","isPage":false,"text":"\n","title":"Main Categories","titles":["@tevm/actions"]},"99":{"href":"/api/actions#base-actions","html":"\n<ul>\n<li>\n<p><strong>Call</strong>: Execute EVM calls</p>\n<ul>\n<li><code>CallHandler</code>: Execute a call against the VM</li>\n<li><code>BaseCallParams</code>: Common parameters for call operations</li>\n<li><code>CallResult</code>: Result of call execution</li>\n</ul>\n</li>\n<li>\n<p><strong>Contract</strong>: Smart contract interactions</p>\n<ul>\n<li><code>ContractHandler</code>: Execute contract calls with type safety</li>\n<li><code>ContractParams</code>: Parameters for contract calls</li>\n<li><code>ContractResult</code>: Result of contract execution</li>\n</ul>\n</li>\n<li>\n<p><strong>Deploy</strong>: Contract deployment</p>\n<ul>\n<li><code>DeployHandler</code>: Deploy contracts to the VM</li>\n<li><code>DeployParams</code>: Parameters for contract deployment</li>\n<li><code>DeployResult</code>: Result of deployment</li>\n</ul>\n</li>\n<li>\n<p><strong>State Management</strong>:</p>\n<ul>\n<li><code>DumpStateHandler</code>: Dump current VM state</li>\n<li><code>LoadStateHandler</code>: Load a previously dumped state</li>\n<li><code>GetAccountHandler</code>: Get account state</li>\n<li><code>SetAccountHandler</code>: Set account state</li>\n</ul>\n</li>\n</ul>\n","isPage":false,"text":"\n\n\nCall: Execute EVM calls\n\nCallHandler: Execute a call against the VM\nBaseCallParams: Common parameters for call operations\nCallResult: Result of call execution\n\n\n\nContract: Smart contract interactions\n\nContractHandler: Execute contract calls with type safety\nContractParams: Parameters for contract calls\nContractResult: Result of contract execution\n\n\n\nDeploy: Contract deployment\n\nDeployHandler: Deploy contracts to the VM\nDeployParams: Parameters for contract deployment\nDeployResult: Result of deployment\n\n\n\nState Management:\n\nDumpStateHandler: Dump current VM state\nLoadStateHandler: Load a previously dumped state\nGetAccountHandler: Get account state\nSetAccountHandler: Set account state\n\n\n\n","title":"Base Actions","titles":["@tevm/actions","Main Categories"]},"100":{"href":"/api/actions#ethereum-json-rpc-actions","html":"\n<p>Standard Ethereum JSON-RPC methods:</p>\n","isPage":false,"text":"\nStandard Ethereum JSON-RPC methods:\n","title":"Ethereum JSON-RPC Actions","titles":["@tevm/actions","Main Categories"]},"101":{"href":"/api/actions#account--network","html":"\n<ul>\n<li><code>eth_accounts</code>: List available accounts</li>\n<li><code>eth_chainId</code>: Get current chain ID</li>\n<li><code>eth_coinbase</code>: Get coinbase address</li>\n<li><code>eth_gasPrice</code>: Get current gas price</li>\n<li><code>eth_blockNumber</code>: Get current block number</li>\n</ul>\n","isPage":false,"text":"\n\neth_accounts: List available accounts\neth_chainId: Get current chain ID\neth_coinbase: Get coinbase address\neth_gasPrice: Get current gas price\neth_blockNumber: Get current block number\n\n","title":"Account &amp; Network","titles":["@tevm/actions","Main Categories","Ethereum JSON-RPC Actions"]},"102":{"href":"/api/actions#state-reading","html":"\n<ul>\n<li><code>eth_getBalance</code>: Get account balance</li>\n<li><code>eth_getCode</code>: Get contract code</li>\n<li><code>eth_getStorageAt</code>: Get storage at position</li>\n<li><code>eth_call</code>: Execute call without state changes</li>\n</ul>\n","isPage":false,"text":"\n\neth_getBalance: Get account balance\neth_getCode: Get contract code\neth_getStorageAt: Get storage at position\neth_call: Execute call without state changes\n\n","title":"State Reading","titles":["@tevm/actions","Main Categories","Ethereum JSON-RPC Actions"]},"103":{"href":"/api/actions#block-operations","html":"\n<ul>\n<li><code>eth_getBlockByHash</code>: Get block by hash</li>\n<li><code>eth_getBlockByNumber</code>: Get block by number</li>\n<li><code>eth_getBlockTransactionCountByHash</code>: Get block transaction count by hash</li>\n<li><code>eth_getBlockTransactionCountByNumber</code>: Get block transaction count by number</li>\n</ul>\n","isPage":false,"text":"\n\neth_getBlockByHash: Get block by hash\neth_getBlockByNumber: Get block by number\neth_getBlockTransactionCountByHash: Get block transaction count by hash\neth_getBlockTransactionCountByNumber: Get block transaction count by number\n\n","title":"Block Operations","titles":["@tevm/actions","Main Categories","Ethereum JSON-RPC Actions"]},"104":{"href":"/api/actions#transaction-operations","html":"\n<ul>\n<li><code>eth_getTransactionByHash</code>: Get transaction by hash</li>\n<li><code>eth_getTransactionByBlockHashAndIndex</code>: Get transaction by block hash and index</li>\n<li><code>eth_getTransactionByBlockNumberAndIndex</code>: Get transaction by block number and index</li>\n<li><code>eth_estimateGas</code>: Estimate gas usage</li>\n</ul>\n","isPage":false,"text":"\n\neth_getTransactionByHash: Get transaction by hash\neth_getTransactionByBlockHashAndIndex: Get transaction by block hash and index\neth_getTransactionByBlockNumberAndIndex: Get transaction by block number and index\neth_estimateGas: Estimate gas usage\n\n","title":"Transaction Operations","titles":["@tevm/actions","Main Categories","Ethereum JSON-RPC Actions"]},"105":{"href":"/api/actions#logs--filters","html":"\n<ul>\n<li><code>eth_getLogs</code>: Get event logs</li>\n<li><code>eth_getFilterChanges</code>: Get filter changes</li>\n<li><code>eth_getFilterLogs</code>: Get filter logs</li>\n</ul>\n","isPage":false,"text":"\n\neth_getLogs: Get event logs\neth_getFilterChanges: Get filter changes\neth_getFilterLogs: Get filter logs\n\n","title":"Logs &amp; Filters","titles":["@tevm/actions","Main Categories","Ethereum JSON-RPC Actions"]},"106":{"href":"/api/actions#anvil-testing--development-actions","html":"\n<p>Anvil-compatible actions for testing and development:</p>\n","isPage":false,"text":"\nAnvil-compatible actions for testing and development:\n","title":"Anvil (Testing &amp; Development) Actions","titles":["@tevm/actions","Main Categories"]},"107":{"href":"/api/actions#state-manipulation","html":"\n<ul>\n<li><code>anvil_setBalance</code>: Set account balance</li>\n<li><code>anvil_setCode</code>: Set contract code</li>\n<li><code>anvil_setNonce</code>: Set account nonce</li>\n<li><code>anvil_setStorageAt</code>: Set storage at position</li>\n<li><code>anvil_setChainId</code>: Set chain ID</li>\n<li><code>anvil_setCoinbase</code>: Set coinbase address</li>\n</ul>\n","isPage":false,"text":"\n\nanvil_setBalance: Set account balance\nanvil_setCode: Set contract code\nanvil_setNonce: Set account nonce\nanvil_setStorageAt: Set storage at position\nanvil_setChainId: Set chain ID\nanvil_setCoinbase: Set coinbase address\n\n","title":"State Manipulation","titles":["@tevm/actions","Main Categories","Anvil (Testing &amp; Development) Actions"]},"108":{"href":"/api/actions#account-management","html":"\n<ul>\n<li><code>anvil_impersonateAccount</code>: Impersonate an account</li>\n<li><code>anvil_stopImpersonatingAccount</code>: Stop impersonating account</li>\n</ul>\n","isPage":false,"text":"\n\nanvil_impersonateAccount: Impersonate an account\nanvil_stopImpersonatingAccount: Stop impersonating account\n\n","title":"Account Management","titles":["@tevm/actions","Main Categories","Anvil (Testing &amp; Development) Actions"]},"109":{"href":"/api/actions#transaction-management","html":"\n<ul>\n<li><code>anvil_dropTransaction</code>: Remove transaction from pool</li>\n<li><code>anvil_mine</code>: Mine blocks</li>\n<li><code>anvil_automine</code>: Get/set automine status</li>\n</ul>\n","isPage":false,"text":"\n\nanvil_dropTransaction: Remove transaction from pool\nanvil_mine: Mine blocks\nanvil_automine: Get/set automine status\n\n","title":"Transaction Management","titles":["@tevm/actions","Main Categories","Anvil (Testing &amp; Development) Actions"]},"110":{"href":"/api/actions#state-management","html":"\n<ul>\n<li><code>anvil_dumpState</code>: Dump current state</li>\n<li><code>anvil_loadState</code>: Load state</li>\n<li><code>anvil_reset</code>: Reset to initial state</li>\n</ul>\n","isPage":false,"text":"\n\nanvil_dumpState: Dump current state\nanvil_loadState: Load state\nanvil_reset: Reset to initial state\n\n","title":"State Management","titles":["@tevm/actions","Main Categories","Anvil (Testing &amp; Development) Actions"]},"111":{"href":"/api/actions#debug-actions","html":"\n<p>Debugging functionality:</p>\n<ul>\n<li><code>debug_traceCall</code>: Trace a call execution</li>\n<li><code>debug_traceTransaction</code>: Trace a transaction execution</li>\n</ul>\n","isPage":false,"text":"\nDebugging functionality:\n\ndebug_traceCall: Trace a call execution\ndebug_traceTransaction: Trace a transaction execution\n\n","title":"Debug Actions","titles":["@tevm/actions","Main Categories"]},"112":{"href":"/api/actions#usage-example","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/node&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  callHandler,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  contractHandler,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  deployHandler,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ethCallHandler</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/actions&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create base client</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Initialize handlers</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> call</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> callHandler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(client)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> contractHandler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(client)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> deploy</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deployHandler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(client)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ethCall</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> ethCallHandler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(client)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Execute a call</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> callResult</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> call</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x123...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x456...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Execute a contract call</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contractResult</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x123...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  abi: [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  function: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  args: [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x456...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Deploy a contract</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> deployResult</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deploy</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  bytecode: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  abi: [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  args: [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;constructor arg&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Standard eth_call</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ethCallResult</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> ethCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x123...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x456...&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nimport { createTevmNode } from &#x27;tevm/node&#x27;\nimport {\n  callHandler,\n  contractHandler,\n  deployHandler,\n  ethCallHandler\n} from &#x27;@tevm/actions&#x27;\n \n// Create base client\nconst client = createTevmNode()\n \n// Initialize handlers\nconst call = callHandler(client)\nconst contract = contractHandler(client)\nconst deploy = deployHandler(client)\nconst ethCall = ethCallHandler(client)\n \n// Execute a call\nconst callResult = await call({\n  to: &#x27;0x123...&#x27;,\n  data: &#x27;0x456...&#x27;,\n  value: 1000n\n})\n \n// Execute a contract call\nconst contractResult = await contract({\n  to: &#x27;0x123...&#x27;,\n  abi: [...],\n  function: &#x27;transfer&#x27;,\n  args: [&#x27;0x456...&#x27;, 1000n]\n})\n \n// Deploy a contract\nconst deployResult = await deploy({\n  bytecode: &#x27;0x...&#x27;,\n  abi: [...],\n  args: [&#x27;constructor arg&#x27;]\n})\n \n// Standard eth_call\nconst ethCallResult = await ethCall({\n  to: &#x27;0x123...&#x27;,\n  data: &#x27;0x456...&#x27;\n})\n","title":"Usage Example","titles":["@tevm/actions"]},"113":{"href":"/api/actions#error-handling","html":"\n<p>The package includes several error types:</p>\n<ul>\n<li><code>BlobGasLimitExceededError</code>: When blob gas limit is exceeded</li>\n<li><code>MissingAccountError</code>: When an account doesn&#x27;t exist</li>\n<li><code>NoForkUrlSetError</code>: When fork URL is required but not set</li>\n</ul>\n<p>All actions support a <code>throwOnFail</code> parameter to control error handling:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> call</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x123...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  throwOnFail: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // Return errors in result instead of throwing</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nThe package includes several error types:\n\nBlobGasLimitExceededError: When blob gas limit is exceeded\nMissingAccountError: When an account doesn&#x27;t exist\nNoForkUrlSetError: When fork URL is required but not set\n\nAll actions support a throwOnFail parameter to control error handling:\nconst result = await call({\n  to: &#x27;0x123...&#x27;,\n  throwOnFail: false // Return errors in result instead of throwing\n})\n","title":"Error Handling","titles":["@tevm/actions"]},"114":{"href":"/api/actions#see-also","html":"\n<ul>\n<li><a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/\">Ethereum JSON-RPC Specification</a></li>\n<li><a href=\"https://book.getfoundry.sh/reference/anvil/\">Anvil Documentation</a></li>\n<li><a href=\"https://tevm.sh/\">Tevm Documentation</a></li>\n</ul>","isPage":false,"text":"\n\nEthereum JSON-RPC Specification\nAnvil Documentation\nTevm Documentation\n","title":"See Also","titles":["@tevm/actions"]},"115":{"href":"/api/block#block","html":"</header>\n<p>The <code>@tevm/block</code> package provides functionality for working with Ethereum blocks. It includes classes and utilities for handling block headers, block data, and block-related operations.</p>\n","isPage":true,"text":"\nThe @tevm/block package provides functionality for working with Ethereum blocks. It includes classes and utilities for handling block headers, block data, and block-related operations.\n","title":"Block","titles":[]},"116":{"href":"/api/block#block-class","html":"\n<p>The main class for working with Ethereum blocks.</p>\n","isPage":false,"text":"\nThe main class for working with Ethereum blocks.\n","title":"Block Class","titles":["Block"]},"117":{"href":"/api/block#constructor","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Block } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/block&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createCommon } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/common&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { mainnet } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;viem/chains&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create a new block</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> block</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  common: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createCommon</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainnet })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nimport { Block } from &#x27;@tevm/block&#x27;\nimport { createCommon } from &#x27;@tevm/common&#x27;\nimport { mainnet } from &#x27;viem/chains&#x27;\n \n// Create a new block\nconst block = new Block({\n  common: createCommon({ ...mainnet })\n})\n","title":"Constructor","titles":["Block","Block Class"]},"118":{"href":"/api/block#static-methods","html":"\n","isPage":false,"text":"\n","title":"Static Methods","titles":["Block","Block Class"]},"119":{"href":"/api/block#fromblockdatablockdata-blockdata-opts-blockoptions-block","html":"\n<p>Creates a block from block data dictionary:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Block } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/block&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createCommon } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/common&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { mainnet } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;viem/chains&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { EthjsAddress } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/utils&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> common</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createCommon</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainnet })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> blockData</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  header: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    parentHash: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x0000000000000000000000000000000000000000000000000000000000000000&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    uncleHash: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    coinbase: EthjsAddress.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">fromString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x0000000000000000000000000000000000000000&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    stateRoot: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x0000000000000000000000000000000000000000000000000000000000000000&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transactionsTrie: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    receiptTrie: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    logsBloom: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0xx27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    difficulty: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    number: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    gasLimit: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">30000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    gasUsed: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    timestamp: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">BigInt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Math.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">floor</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Date.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">now</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">/</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    extraData: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    mixHash: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x0000000000000000000000000000000000000000000000000000000000000000&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    nonce: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x0000000000000000&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    baseFeePerGas: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> block</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Block.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">fromBlockData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(blockData, { common })</span></span></code></pre>\n","isPage":false,"text":"\nCreates a block from block data dictionary:\nimport { Block } from &#x27;@tevm/block&#x27;\nimport { createCommon } from &#x27;@tevm/common&#x27;\nimport { mainnet } from &#x27;viem/chains&#x27;\nimport { EthjsAddress } from &#x27;@tevm/utils&#x27;\n \nconst common = createCommon({ ...mainnet })\n \nconst blockData = {\n  header: {\n    parentHash: &#x27;0x0000000000000000000000000000000000000000000000000000000000000000&#x27;,\n    uncleHash: &#x27;0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347&#x27;,\n    coinbase: EthjsAddress.fromString(&#x27;0x0000000000000000000000000000000000000000&#x27;),\n    stateRoot: &#x27;0x0000000000000000000000000000000000000000000000000000000000000000&#x27;,\n    transactionsTrie: &#x27;0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421&#x27;,\n    receiptTrie: &#x27;0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421&#x27;,\n    logsBloom: &#x27;0xx27;,\n    difficulty: 0n,\n    number: 0n,\n    gasLimit: 30000000n,\n    gasUsed: 0n,\n    timestamp: BigInt(Math.floor(Date.now() / 1000)),\n    extraData: &#x27;0x&#x27;,\n    mixHash: &#x27;0x0000000000000000000000000000000000000000000000000000000000000000&#x27;,\n    nonce: &#x27;0x0000000000000000&#x27;,\n    baseFeePerGas: 1000000000n\n  }\n}\n \nconst block = Block.fromBlockData(blockData, { common })\n","title":"fromBlockData(blockData: BlockData, opts: BlockOptions): Block","titles":["Block","Block Class","Static Methods"]},"120":{"href":"/api/block#fromrlpserializedblockserialized-uint8array-opts-blockoptions-block","html":"\n<p>Creates a block from RLP-serialized block data:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Block } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/block&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createCommon } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/common&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { mainnet } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;viem/chains&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> common</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createCommon</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainnet })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> serializedBlock</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#6A737D;--shiki-dark:#768390\">/* ... */</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> block</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Block.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">fromRLPSerializedBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(serializedBlock, { common })</span></span></code></pre>\n","isPage":false,"text":"\nCreates a block from RLP-serialized block data:\nimport { Block } from &#x27;@tevm/block&#x27;\nimport { createCommon } from &#x27;@tevm/common&#x27;\nimport { mainnet } from &#x27;viem/chains&#x27;\n \nconst common = createCommon({ ...mainnet })\nconst serializedBlock = new Uint8Array([/* ... */])\nconst block = Block.fromRLPSerializedBlock(serializedBlock, { common })\n","title":"fromRLPSerializedBlock(serialized: Uint8Array, opts: BlockOptions): Block","titles":["Block","Block Class","Static Methods"]},"121":{"href":"/api/block#fromvaluesarrayvalues-blockbytes-opts-blockoptions-block","html":"\n<p>Creates a block from an array of Bytes values:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Block } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/block&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createCommon } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/common&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { mainnet } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;viem/chains&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> common</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createCommon</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainnet })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> values</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#6A737D;--shiki-dark:#768390\">/* ... */</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Array of block values</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> block</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> Block.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">fromValuesArray</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(values, { common })</span></span></code></pre>\n","isPage":false,"text":"\nCreates a block from an array of Bytes values:\nimport { Block } from &#x27;@tevm/block&#x27;\nimport { createCommon } from &#x27;@tevm/common&#x27;\nimport { mainnet } from &#x27;viem/chains&#x27;\n \nconst common = createCommon({ ...mainnet })\nconst values = [/* ... */] // Array of block values\nconst block = Block.fromValuesArray(values, { common })\n","title":"fromValuesArray(values: BlockBytes, opts: BlockOptions): Block","titles":["Block","Block Class","Static Methods"]},"122":{"href":"/api/block#instance-methods","html":"\n","isPage":false,"text":"\n","title":"Instance Methods","titles":["Block","Block Class"]},"123":{"href":"/api/block#hash-uint8array","html":"\n<p>Returns the hash of the block:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Block } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/block&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createCommon } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/common&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { mainnet } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;viem/chains&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> common</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createCommon</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainnet })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> block</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ common })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> hash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> block.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">hash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n","isPage":false,"text":"\nReturns the hash of the block:\nimport { Block } from &#x27;@tevm/block&#x27;\nimport { createCommon } from &#x27;@tevm/common&#x27;\nimport { mainnet } from &#x27;viem/chains&#x27;\n \nconst common = createCommon({ ...mainnet })\nconst block = new Block({ common })\nconst hash = block.hash()\n","title":"hash(): Uint8Array","titles":["Block","Block Class","Instance Methods"]},"124":{"href":"/api/block#serialize-uint8array","html":"\n<p>Returns the RLP encoding of the block:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Block } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/block&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createCommon } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/common&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { mainnet } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;viem/chains&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> common</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createCommon</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainnet })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> block</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ common })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> serialized</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> block.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">serialize</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n","isPage":false,"text":"\nReturns the RLP encoding of the block:\nimport { Block } from &#x27;@tevm/block&#x27;\nimport { createCommon } from &#x27;@tevm/common&#x27;\nimport { mainnet } from &#x27;viem/chains&#x27;\n \nconst common = createCommon({ ...mainnet })\nconst block = new Block({ common })\nconst serialized = block.serialize()\n","title":"serialize(): Uint8Array","titles":["Block","Block Class","Instance Methods"]},"125":{"href":"/api/block#tojson-jsonblock","html":"\n<p>Converts the block to a JSON representation:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Block } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/block&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createCommon } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/common&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { mainnet } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;viem/chains&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> common</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createCommon</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainnet })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> block</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ common })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> json</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> block.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toJSON</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n","isPage":false,"text":"\nConverts the block to a JSON representation:\nimport { Block } from &#x27;@tevm/block&#x27;\nimport { createCommon } from &#x27;@tevm/common&#x27;\nimport { mainnet } from &#x27;viem/chains&#x27;\n \nconst common = createCommon({ ...mainnet })\nconst block = new Block({ common })\nconst json = block.toJSON()\n","title":"toJSON(): JsonBlock","titles":["Block","Block Class","Instance Methods"]},"126":{"href":"/api/block#types","html":"\n","isPage":false,"text":"\n","title":"Types","titles":["Block"]},"127":{"href":"/api/block#headerdata","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> HeaderData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  parentHash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">|</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TransformabletoBytes</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  uncleHash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">|</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TransformabletoBytes</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  coinbase</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  stateRoot</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">|</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TransformabletoBytes</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  transactionsTrie</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">|</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TransformabletoBytes</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  receiptTrie</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">|</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TransformabletoBytes</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  logsBloom</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">|</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TransformabletoBytes</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  difficulty</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  number</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  gasLimit</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  gasUsed</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  timestamp</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  extraData</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">|</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TransformabletoBytes</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  mixHash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">|</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TransformabletoBytes</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  nonce</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">|</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TransformabletoBytes</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  baseFeePerGas</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  withdrawalsRoot</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">|</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TransformabletoBytes</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  blobGasUsed</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  excessBlobGas</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  parentBeaconBlockRoot</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">|</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TransformabletoBytes</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  requestsRoot</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">|</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TransformabletoBytes</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\ninterface HeaderData {\n  parentHash?: string | number | bigint | Uint8Array | number[] | TransformabletoBytes\n  uncleHash?: string | number | bigint | Uint8Array | number[] | TransformabletoBytes\n  coinbase?: string | Uint8Array | Address\n  stateRoot?: string | number | bigint | Uint8Array | number[] | TransformabletoBytes\n  transactionsTrie?: string | number | bigint | Uint8Array | number[] | TransformabletoBytes\n  receiptTrie?: string | number | bigint | Uint8Array | number[] | TransformabletoBytes\n  logsBloom?: string | number | bigint | Uint8Array | number[] | TransformabletoBytes\n  difficulty?: string | number | bigint | Uint8Array\n  number?: string | number | bigint | Uint8Array\n  gasLimit?: string | number | bigint | Uint8Array\n  gasUsed?: string | number | bigint | Uint8Array\n  timestamp?: string | number | bigint | Uint8Array\n  extraData?: string | number | bigint | Uint8Array | number[] | TransformabletoBytes\n  mixHash?: string | number | bigint | Uint8Array | number[] | TransformabletoBytes\n  nonce?: string | number | bigint | Uint8Array | number[] | TransformabletoBytes\n  baseFeePerGas?: string | number | bigint | Uint8Array\n  withdrawalsRoot?: string | number | bigint | Uint8Array | number[] | TransformabletoBytes\n  blobGasUsed?: string | number | bigint | Uint8Array\n  excessBlobGas?: string | number | bigint | Uint8Array\n  parentBeaconBlockRoot?: string | number | bigint | Uint8Array | number[] | TransformabletoBytes\n  requestsRoot?: string | number | bigint | Uint8Array | number[] | TransformabletoBytes\n}\n","title":"HeaderData","titles":["Block","Types"]},"128":{"href":"/api/block#see-also","html":"\n<ul>\n<li><a href=\"../introduction/what-is-tevm-node\">What is Tevm Node?</a></li>\n<li><a href=\"../core/create-tevm-node\">Creating a Node</a></li>\n<li><a href=\"./common\">Common</a></li>\n</ul>","isPage":false,"text":"\n\nWhat is Tevm Node?\nCreating a Node\nCommon\n","title":"See Also","titles":["Block"]},"129":{"href":"/api/blockchain#blockchain-package","html":"</header>\n<p>The <code>@tevm/blockchain</code> package provides a custom implementation of the Ethereum blockchain, offering functionality for managing blocks, handling chain state, and interacting with the blockchain.</p>\n","isPage":true,"text":"\nThe @tevm/blockchain package provides a custom implementation of the Ethereum blockchain, offering functionality for managing blocks, handling chain state, and interacting with the blockchain.\n","title":"Blockchain Package","titles":[]},"130":{"href":"/api/blockchain#main-exports","html":"\n","isPage":false,"text":"\n","title":"Main Exports","titles":["Blockchain Package"]},"131":{"href":"/api/blockchain#chain-interface","html":"\n<p>The main interface for interacting with the blockchain.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Chain</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Core Methods</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  putBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">block</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">void</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  getBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">blockId</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  delBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">blockHash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">void</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  getBlockByTag</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">blockTag</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Hex</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> BlockTag</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Iterator Methods</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  getIteratorHead</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">name</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  setIteratorHead</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">tag</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">headHash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">void</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  iterator</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">name</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">onBlock</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> OnBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">maxBlocks</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">releaseLockOnCallback</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> boolean</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Chain State</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  getCanonicalHeadBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  validateHeader</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">header</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> BlockHeader</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">height</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">void</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  getTotalDifficulty</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">hash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">number</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">bigint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Utilities</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  shallowCopy</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Chain</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  deepCopy</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Chain</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Optional Events</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  events</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> AsyncEventEmitter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">BlockchainEvents</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe main interface for interacting with the blockchain.\ntype Chain = {\n  // Core Methods\n  putBlock(block: Block): Promise&lt;void&gt;\n  getBlock(blockId: Uint8Array | number | bigint): Promise&lt;Block&gt;\n  delBlock(blockHash: Uint8Array): Promise&lt;void&gt;\n  getBlockByTag(blockTag: Hex | Uint8Array | number | bigint | BlockTag): Promise&lt;Block&gt;\n \n  // Iterator Methods\n  getIteratorHead(name?: string): Promise&lt;Block&gt;\n  setIteratorHead(tag: string, headHash: Uint8Array): Promise&lt;void&gt;\n  iterator(name: string, onBlock: OnBlock, maxBlocks?: number, releaseLockOnCallback?: boolean): Promise&lt;number&gt;\n \n  // Chain State\n  getCanonicalHeadBlock(): Promise&lt;Block&gt;\n  validateHeader(header: BlockHeader, height?: bigint): Promise&lt;void&gt;\n  getTotalDifficulty?(hash: Uint8Array, number?: bigint): Promise&lt;bigint&gt;\n \n  // Utilities\n  shallowCopy(): Chain\n  deepCopy(): Promise&lt;Chain&gt;\n \n  // Optional Events\n  events?: AsyncEventEmitter&lt;BlockchainEvents&gt;\n}\n","title":"Chain Interface","titles":["Blockchain Package","Main Exports"]},"132":{"href":"/api/blockchain#creating-a-chain","html":"\n<p>The main factory function to create a new blockchain instance:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createChain</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">options</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ChainOptions</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Chain</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span></code></pre>\n","isPage":false,"text":"\nThe main factory function to create a new blockchain instance:\nasync function createChain(options: ChainOptions): Promise&lt;Chain&gt;\n","title":"Creating a Chain","titles":["Blockchain Package","Main Exports"]},"133":{"href":"/api/blockchain#chainoptions","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ChainOptions</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Logging configuration</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  loggingLevel</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> LogOptions</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;level&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Chain configuration</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  common</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Common</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  genesisBlock</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Block</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  genesisStateRoot</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Forking configuration</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  fork</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    transport</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">request</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> EIP1193RequestFn</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    blockTag</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> BlockTag</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> `0x${</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\ntype ChainOptions = {\n  // Logging configuration\n  loggingLevel?: LogOptions[&#x27;level&#x27;]\n \n  // Chain configuration\n  common: Common\n  genesisBlock?: Block\n  genesisStateRoot?: Uint8Array\n \n  // Forking configuration\n  fork?: {\n    transport: { request: EIP1193RequestFn }\n    blockTag?: BlockTag | bigint | `0x${string}`\n  }\n}\n","title":"ChainOptions","titles":["Blockchain Package","Main Exports","Creating a Chain"]},"134":{"href":"/api/blockchain#core-functionality","html":"\n","isPage":false,"text":"\n","title":"Core Functionality","titles":["Blockchain Package"]},"135":{"href":"/api/blockchain#block-management","html":"\n","isPage":false,"text":"\n","title":"Block Management","titles":["Blockchain Package","Core Functionality"]},"136":{"href":"/api/blockchain#adding-blocks","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">putBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(block)</span></span></code></pre>\n<p>Adds a new block to the blockchain. The block must match the chain&#x27;s chainId.</p>\n","isPage":false,"text":"\nawait chain.putBlock(block)\nAdds a new block to the blockchain. The block must match the chain&#x27;s chainId.\n","title":"Adding Blocks","titles":["Blockchain Package","Core Functionality","Block Management"]},"137":{"href":"/api/blockchain#retrieving-blocks","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// By hash or number</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> block</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(blockId)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// By tag (latest, earliest, pending, etc.)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> block</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBlockByTag</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(blockTag)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get latest block</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> head</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getCanonicalHeadBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n","isPage":false,"text":"\n// By hash or number\nconst block = await chain.getBlock(blockId)\n \n// By tag (latest, earliest, pending, etc.)\nconst block = await chain.getBlockByTag(blockTag)\n \n// Get latest block\nconst head = await chain.getCanonicalHeadBlock()\n","title":"Retrieving Blocks","titles":["Blockchain Package","Core Functionality","Block Management"]},"138":{"href":"/api/blockchain#deleting-blocks","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">delBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(blockHash)</span></span></code></pre>\n<p>Deletes a block and all its child blocks from the chain.</p>\n","isPage":false,"text":"\nawait chain.delBlock(blockHash)\nDeletes a block and all its child blocks from the chain.\n","title":"Deleting Blocks","titles":["Blockchain Package","Core Functionality","Block Management"]},"139":{"href":"/api/blockchain#chain-state","html":"\n","isPage":false,"text":"\n","title":"Chain State","titles":["Blockchain Package","Core Functionality"]},"140":{"href":"/api/blockchain#header-validation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">validateHeader</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(header, height</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n<p>Validates a block header against the chain&#x27;s rules.</p>\n","isPage":false,"text":"\nawait chain.validateHeader(header, height?)\nValidates a block header against the chain&#x27;s rules.\n","title":"Header Validation","titles":["Blockchain Package","Core Functionality","Chain State"]},"141":{"href":"/api/blockchain#iterator-management","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Set iterator head</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setIteratorHead</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tag, headHash)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get iterator head</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> head</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getIteratorHead</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tag)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Iterate through blocks</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">iterator</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(name, (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">reorg</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Process block</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}, maxBlocks)</span></span></code></pre>\n","isPage":false,"text":"\n// Set iterator head\nawait chain.setIteratorHead(tag, headHash)\n \n// Get iterator head\nconst head = await chain.getIteratorHead(tag)\n \n// Iterate through blocks\nawait chain.iterator(name, (block, reorg) =&gt; {\n  // Process block\n}, maxBlocks)\n","title":"Iterator Management","titles":["Blockchain Package","Core Functionality","Chain State"]},"142":{"href":"/api/blockchain#chain-copying","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Shallow copy (shares state)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> shallowCopy</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">shallowCopy</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Deep copy (independent state)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> deepCopy</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deepCopy</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n","isPage":false,"text":"\n// Shallow copy (shares state)\nconst shallowCopy = chain.shallowCopy()\n \n// Deep copy (independent state)\nconst deepCopy = await chain.deepCopy()\n","title":"Chain Copying","titles":["Blockchain Package","Core Functionality"]},"143":{"href":"/api/blockchain#events","html":"\n<p>The blockchain can optionally emit events for various operations:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">chain.events?.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">on</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;block&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Handle new block</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nThe blockchain can optionally emit events for various operations:\nchain.events?.on(&#x27;block&#x27;, (block) =&gt; {\n  // Handle new block\n})\n","title":"Events","titles":["Blockchain Package"]},"144":{"href":"/api/blockchain#error-handling","html":"\n<p>The blockchain package throws specific errors for various conditions:</p>\n<ul>\n<li><code>UnknownBlockError</code>: When a requested block cannot be found</li>\n<li><code>InvalidBlockError</code>: When a block fails validation</li>\n<li><code>InternalError</code>: For internal blockchain errors</li>\n</ul>\n","isPage":false,"text":"\nThe blockchain package throws specific errors for various conditions:\n\nUnknownBlockError: When a requested block cannot be found\nInvalidBlockError: When a block fails validation\nInternalError: For internal blockchain errors\n\n","title":"Error Handling","titles":["Blockchain Package"]},"145":{"href":"/api/blockchain#usage-example","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createChain } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/blockchain&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Common } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/common&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create a new chain</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> chain</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createChain</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  common: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Common</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ chain: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;mainnet&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  loggingLevel: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;info&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Add a block</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">putBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(block)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get latest block</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> latestBlock</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getCanonicalHeadBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Fork from existing chain</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> forkedChain</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createChain</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  common: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Common</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ chain: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;mainnet&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  fork: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transport: { request: myJsonRpcProvider },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    blockTag: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;latest&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>","isPage":false,"text":"\nimport { createChain } from &#x27;@tevm/blockchain&#x27;\nimport { Common } from &#x27;@tevm/common&#x27;\n \n// Create a new chain\nconst chain = await createChain({\n  common: new Common({ chain: &#x27;mainnet&#x27; }),\n  loggingLevel: &#x27;info&#x27;\n})\n \n// Add a block\nawait chain.putBlock(block)\n \n// Get latest block\nconst latestBlock = await chain.getCanonicalHeadBlock()\n \n// Fork from existing chain\nconst forkedChain = await createChain({\n  common: new Common({ chain: &#x27;mainnet&#x27; }),\n  fork: {\n    transport: { request: myJsonRpcProvider },\n    blockTag: &#x27;latest&#x27;\n  }\n})","title":"Usage Example","titles":["Blockchain Package"]},"146":{"href":"/api/common#common-package","html":"</header>\n<p>The <code>@tevm/common</code> package provides chain-specific configuration and utilities for Tevm clients. It wraps both Viem chain configurations and EthereumJS Common functionality to provide a unified interface for chain parameters, hardforks, and EIPs.</p>\n","isPage":true,"text":"\nThe @tevm/common package provides chain-specific configuration and utilities for Tevm clients. It wraps both Viem chain configurations and EthereumJS Common functionality to provide a unified interface for chain parameters, hardforks, and EIPs.\n","title":"Common Package","titles":[]},"147":{"href":"/api/common#main-exports","html":"\n","isPage":false,"text":"\n","title":"Main Exports","titles":["Common Package"]},"148":{"href":"/api/common#common-type","html":"\n<p>The main type representing chain-specific configuration:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Common</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Chain Identification</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  id</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  name</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  nativeCurrency</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ChainNativeCurrency</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Chain Configuration</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  rpcUrls</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    default</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ChainRpcUrls</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    [key: string]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ChainRpcUrls</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  blockExplorers</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    default</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ChainBlockExplorer</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    [key: string]</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ChainBlockExplorer</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Contract Information</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  contracts</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    ensRegistry</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ChainContract</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    ensUniversalResolver</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ChainContract</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    multicall3</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ChainContract</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Chain Properties</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  testnet</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> boolean</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  sourceId</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // EthereumJS Common Instance</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  ethjsCommon</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> EthjsCommon</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Utilities</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  copy</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Common</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe main type representing chain-specific configuration:\ntype Common = {\n  // Chain Identification\n  id: number\n  name: string\n  nativeCurrency: ChainNativeCurrency\n \n  // Chain Configuration\n  rpcUrls: {\n    default: ChainRpcUrls\n    [key: string]: ChainRpcUrls\n  }\n  blockExplorers?: {\n    default: ChainBlockExplorer\n    [key: string]: ChainBlockExplorer\n  }\n \n  // Contract Information\n  contracts?: {\n    ensRegistry?: ChainContract\n    ensUniversalResolver?: ChainContract\n    multicall3?: ChainContract\n  }\n \n  // Chain Properties\n  testnet?: boolean\n  sourceId?: number\n \n  // EthereumJS Common Instance\n  ethjsCommon: EthjsCommon\n \n  // Utilities\n  copy(): Common\n}\n","title":"Common Type","titles":["Common Package","Main Exports"]},"149":{"href":"/api/common#creating-a-common-instance","html":"\n<p>The main factory function to create a Common instance:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createCommon } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/common&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { mainnet } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;viem/chains&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> common</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createCommon</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainnet })</span></span></code></pre>\n","isPage":false,"text":"\nThe main factory function to create a Common instance:\nimport { createCommon } from &#x27;@tevm/common&#x27;\nimport { mainnet } from &#x27;viem/chains&#x27;\n \nconst common = createCommon({ ...mainnet })\n","title":"Creating a Common Instance","titles":["Common Package","Main Exports"]},"150":{"href":"/api/common#commonoptions","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> CommonOptions</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ViemChain</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Hardfork configuration (default: &#x27;cancun&#x27;)</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  hardfork</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Hardfork</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // EIPs to enable (default: [1559, 4895])</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  eips</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ReadonlyArray</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Logging configuration (default: &#x27;warn&#x27;)</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  loggingLevel</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> LogOptions</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;level&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Custom crypto implementations</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  customCrypto</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> CustomCrypto</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\ntype CommonOptions = ViemChain &amp; {\n  // Hardfork configuration (default: &#x27;cancun&#x27;)\n  hardfork?: Hardfork\n \n  // EIPs to enable (default: [1559, 4895])\n  eips?: ReadonlyArray&lt;number&gt;\n \n  // Logging configuration (default: &#x27;warn&#x27;)\n  loggingLevel?: LogOptions[&#x27;level&#x27;]\n \n  // Custom crypto implementations\n  customCrypto?: CustomCrypto\n}\n","title":"CommonOptions","titles":["Common Package","Main Exports","Creating a Common Instance"]},"151":{"href":"/api/common#hardfork-support","html":"\n<p>The package supports various Ethereum hardforks:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Hardfork</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  |</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;chainstart&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  |</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;homestead&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  |</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;dao&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  |</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tangerineWhistle&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  |</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;spuriousDragon&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  |</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;byzantium&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  |</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;constantinople&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  |</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;petersburg&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  |</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;istanbul&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  |</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;muirGlacier&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  |</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;berlin&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  |</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;london&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  |</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;arrowGlacier&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  |</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;grayGlacier&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  |</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;mergeForkIdTransition&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  |</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;paris&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  |</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;shanghai&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  |</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;cancun&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  |</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;prague&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  |</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;osaka&#x27;</span></span></code></pre>\n","isPage":false,"text":"\nThe package supports various Ethereum hardforks:\ntype Hardfork =\n  | &#x27;chainstart&#x27;\n  | &#x27;homestead&#x27;\n  | &#x27;dao&#x27;\n  | &#x27;tangerineWhistle&#x27;\n  | &#x27;spuriousDragon&#x27;\n  | &#x27;byzantium&#x27;\n  | &#x27;constantinople&#x27;\n  | &#x27;petersburg&#x27;\n  | &#x27;istanbul&#x27;\n  | &#x27;muirGlacier&#x27;\n  | &#x27;berlin&#x27;\n  | &#x27;london&#x27;\n  | &#x27;arrowGlacier&#x27;\n  | &#x27;grayGlacier&#x27;\n  | &#x27;mergeForkIdTransition&#x27;\n  | &#x27;paris&#x27;\n  | &#x27;shanghai&#x27;\n  | &#x27;cancun&#x27;\n  | &#x27;prague&#x27;\n  | &#x27;osaka&#x27;\n","title":"Hardfork Support","titles":["Common Package","Main Exports"]},"152":{"href":"/api/common#preset-chains","html":"\n<p>The package uses Viem&#x27;s chain configurations. Import them directly from viem:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  mainnet,    </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Ethereum Mainnet</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  goerli,     </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Goerli Testnet</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  sepolia,    </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Sepolia Testnet</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  optimism,   </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Optimism</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  arbitrum,   </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Arbitrum</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  polygon,    </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Polygon</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // ... many more</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;viem/chains&#x27;</span></span></code></pre>\n","isPage":false,"text":"\nThe package uses Viem&#x27;s chain configurations. Import them directly from viem:\nimport {\n  mainnet,    // Ethereum Mainnet\n  goerli,     // Goerli Testnet\n  sepolia,    // Sepolia Testnet\n  optimism,   // Optimism\n  arbitrum,   // Arbitrum\n  polygon,    // Polygon\n  // ... many more\n} from &#x27;viem/chains&#x27;\n","title":"Preset Chains","titles":["Common Package","Main Exports"]},"153":{"href":"/api/common#usage-examples","html":"\n","isPage":false,"text":"\n","title":"Usage Examples","titles":["Common Package"]},"154":{"href":"/api/common#basic-usage","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createCommon } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/common&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { mainnet } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;viem/chains&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createMemoryClient } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Using a preset chain</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createMemoryClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  common: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createCommon</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainnet })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Creating a custom chain configuration</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> customCommon</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createCommon</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  ...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainnet,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  hardfork: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;london&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  eips: [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1559</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">4895</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  loggingLevel: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;debug&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nimport { createCommon } from &#x27;@tevm/common&#x27;\nimport { mainnet } from &#x27;viem/chains&#x27;\nimport { createMemoryClient } from &#x27;tevm&#x27;\n \n// Using a preset chain\nconst client = createMemoryClient({\n  common: createCommon({ ...mainnet })\n})\n \n// Creating a custom chain configuration\nconst customCommon = createCommon({\n  ...mainnet,\n  hardfork: &#x27;london&#x27;,\n  eips: [1559, 4895],\n  loggingLevel: &#x27;debug&#x27;\n})\n","title":"Basic Usage","titles":["Common Package","Usage Examples"]},"155":{"href":"/api/common#custom-chain-configuration","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createCommon } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/common&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> myChainCommon</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createCommon</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  id: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1234</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  name: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;My Custom Chain&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  nativeCurrency: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    name: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;My Token&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    symbol: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;MTK&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    decimals: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">18</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  rpcUrls: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    default: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      http: [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;https://my-chain-rpc.example.com&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  hardfork: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;london&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  eips: [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1559</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nimport { createCommon } from &#x27;@tevm/common&#x27;\n \nconst myChainCommon = createCommon({\n  id: 1234,\n  name: &#x27;My Custom Chain&#x27;,\n  nativeCurrency: {\n    name: &#x27;My Token&#x27;,\n    symbol: &#x27;MTK&#x27;,\n    decimals: 18\n  },\n  rpcUrls: {\n    default: {\n      http: [&#x27;https://my-chain-rpc.example.com&#x27;]\n    }\n  },\n  hardfork: &#x27;london&#x27;,\n  eips: [1559]\n})\n","title":"Custom Chain Configuration","titles":["Common Package","Usage Examples"]},"156":{"href":"/api/common#using-with-ethereumjs","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { VM } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@ethereumjs/vm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createCommon } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/common&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { mainnet } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;viem/chains&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> common</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createCommon</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  ...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">mainnet</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> VM</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  common: common.ethjsCommon</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nimport { VM } from &#x27;@ethereumjs/vm&#x27;\nimport { createCommon } from &#x27;@tevm/common&#x27;\nimport { mainnet } from &#x27;viem/chains&#x27;\n \nconst common = createCommon({\n  ...mainnet\n})\n \nconst vm = new VM({\n  common: common.ethjsCommon\n})\n","title":"Using with EthereumJS","titles":["Common Package","Usage Examples"]},"157":{"href":"/api/common#state-management","html":"\n<p>The package also includes interfaces for EVM state management:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> EvmStateManagerInterface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  getAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Account</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> undefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  putAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">account</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Account</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">void</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  deleteAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">void</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  getContractCode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  putContractCode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">value</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">void</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  getContractStorage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">key</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  putContractStorage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">key</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">value</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">void</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // ... additional state management methods</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe package also includes interfaces for EVM state management:\ninterface EvmStateManagerInterface {\n  getAccount(address: Address): Promise&lt;Account | undefined&gt;\n  putAccount(address: Address, account?: Account): Promise&lt;void&gt;\n  deleteAccount(address: Address): Promise&lt;void&gt;\n  getContractCode(address: Address): Promise&lt;Uint8Array&gt;\n  putContractCode(address: Address, value: Uint8Array): Promise&lt;void&gt;\n  getContractStorage(address: Address, key: Uint8Array): Promise&lt;Uint8Array&gt;\n  putContractStorage(address: Address, key: Uint8Array, value: Uint8Array): Promise&lt;void&gt;\n  // ... additional state management methods\n}\n","title":"State Management","titles":["Common Package","Usage Examples"]},"158":{"href":"/api/common#error-handling","html":"\n<p>The package uses the <code>@tevm/errors</code> package for error handling. Common errors include:</p>\n<ul>\n<li><code>InvalidParamsError</code>: Thrown when invalid parameters are provided to <code>createCommon</code></li>\n<li>Chain-specific validation errors from EthereumJS Common</li>\n</ul>\n","isPage":false,"text":"\nThe package uses the @tevm/errors package for error handling. Common errors include:\n\nInvalidParamsError: Thrown when invalid parameters are provided to createCommon\nChain-specific validation errors from EthereumJS Common\n\n","title":"Error Handling","titles":["Common Package"]},"159":{"href":"/api/common#custom-cryptography","html":"\n<p>The package supports custom cryptographic implementations through the <code>CustomCrypto</code> interface:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> CustomCrypto</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  keccak256</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">msg</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  ecrecover</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">msgHash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">v</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">r</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">s</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">chainId</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  ecsign</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">msg</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">pk</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">chainId</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ECDSASignature</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  ecdsaSign</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">msg</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">pk</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">signature</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">recid</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  kzg</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Kzg</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // ... other crypto methods</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe package supports custom cryptographic implementations through the CustomCrypto interface:\ninterface CustomCrypto {\n  keccak256?(msg: Uint8Array): Uint8Array\n  ecrecover?(msgHash: Uint8Array, v: bigint, r: Uint8Array, s: Uint8Array, chainId?: bigint): Uint8Array\n  ecsign?(msg: Uint8Array, pk: Uint8Array, chainId?: bigint): ECDSASignature\n  ecdsaSign?(msg: Uint8Array, pk: Uint8Array): { signature: Uint8Array; recid: number }\n  kzg?: Kzg\n  // ... other crypto methods\n}\n","title":"Custom Cryptography","titles":["Common Package"]},"160":{"href":"/api/common#see-also","html":"\n<ul>\n<li><a href=\"../introduction/what-is-tevm-node\">What is Tevm Node?</a></li>\n<li><a href=\"../core/create-tevm-node\">Creating a Node</a></li>\n<li><a href=\"./block\">Block</a></li>\n</ul>","isPage":false,"text":"\n\nWhat is Tevm Node?\nCreating a Node\nBlock\n","title":"See Also","titles":["Common Package"]},"161":{"href":"/api/contracts#contract-utilities","html":"</header>\n<p>The <a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/contract\"><code>tevm/contract</code></a> package provides powerful utilities for working with <a href=\"https://ethereum.org/en/developers/docs/smart-contracts/\">Ethereum smart contracts</a>, offering type-safe contract interactions and simplified deployment workflows.</p>\n","isPage":true,"text":"\nThe tevm/contract package provides powerful utilities for working with Ethereum smart contracts, offering type-safe contract interactions and simplified deployment workflows.\n","title":"Contract Utilities","titles":[]},"162":{"href":"/api/contracts#createcontract","html":"\n<p>Creates a strongly-typed contract instance with read and write actions:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createContract } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/contract&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Use as const for type safety</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  humanReadableAbi: [</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &#x27;function balanceOf(address) view returns (uint256)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &#x27;function transfer(address to, uint256 amount) returns (bool)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &#x27;event Transfer(address indexed from, address indexed to, uint256 value)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">as</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  name: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;MyToken&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Type-safe read actions</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> readAction</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract.read.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">balanceOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Type-safe write actions</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> writeAction</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract.write.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nCreates a strongly-typed contract instance with read and write actions:\nimport { createContract } from &#x27;tevm/contract&#x27;\n \nconst contract = createContract({\n  // Use as const for type safety\n  humanReadableAbi: [\n    &#x27;function balanceOf(address) view returns (uint256)&#x27;,\n    &#x27;function transfer(address to, uint256 amount) returns (bool)&#x27;,\n    &#x27;event Transfer(address indexed from, address indexed to, uint256 value)&#x27;,\n  ] as const,\n  name: &#x27;MyToken&#x27;,\n})\n \n// Type-safe read actions\nconst readAction = contract.read.balanceOf(&#x27;0x...&#x27;)\n \n// Type-safe write actions\nconst writeAction = contract.write.transfer(&#x27;0x...&#x27;, 1000n)\n","title":"createContract","titles":["Contract Utilities"]},"163":{"href":"/api/contracts#contract-with-address","html":"\n<p>Add an <a href=\"https://ethereum.org/en/developers/docs/accounts/#account-creation\">Ethereum address</a> to create a fully configured contract instance:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> token</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">withAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Now includes address in all actions</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> balanceAction</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> token.read.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">balanceOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// balanceAction.to will be set to the token address</span></span></code></pre>\n","isPage":false,"text":"\nAdd an Ethereum address to create a fully configured contract instance:\nconst token = contract.withAddress(&#x27;0x1234...&#x27;)\n \n// Now includes address in all actions\nconst balanceAction = token.read.balanceOf(&#x27;0x...&#x27;)\n// balanceAction.to will be set to the token address\n","title":"Contract with Address","titles":["Contract Utilities","createContract"]},"164":{"href":"/api/contracts#standard-contracts","html":"\n<p>The package includes pre-built contracts for common standards:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { ERC20, ERC721 } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/contract&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// ERC20 token with all standard methods</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> token</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ERC20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">withAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Read token info</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nameAction</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> token.read.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> symbolAction</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> token.read.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">symbol</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> supplyAction</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> token.read.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">totalSupply</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Transfer tokens</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transferAction</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> token.write.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// ERC721 NFT contract</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nft</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ERC721</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">withAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ownerAction</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> nft.read.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ownerOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n<p>For more information on token standards, see:\n- <a href=\"https://ethereum.org/en/developers/docs/standards/tokens/erc-20/\">ERC-20 Token Standard</a>\n- <a href=\"https://ethereum.org/en/developers/docs/standards/tokens/erc-721/\">ERC-721 NFT Standard</a></p>\n","isPage":false,"text":"\nThe package includes pre-built contracts for common standards:\nimport { ERC20, ERC721 } from &#x27;tevm/contract&#x27;\n \n// ERC20 token with all standard methods\nconst token = ERC20.withAddress(&#x27;0x...&#x27;)\n \n// Read token info\nconst nameAction = token.read.name()\nconst symbolAction = token.read.symbol()\nconst supplyAction = token.read.totalSupply()\n \n// Transfer tokens\nconst transferAction = token.write.transfer(&#x27;0x...&#x27;, 1000n)\n \n// ERC721 NFT contract\nconst nft = ERC721.withAddress(&#x27;0x...&#x27;)\nconst ownerAction = nft.read.ownerOf(1n)\nFor more information on token standards, see:\n- ERC-20 Token Standard\n- ERC-721 NFT Standard\n","title":"Standard Contracts","titles":["Contract Utilities"]},"165":{"href":"/api/contracts#deployless-scripts","html":"\n<p>Create self-deploying contract scripts that work with any client:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { ERC20 } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/contract&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create a script that deploys and initializes a token</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> script</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ERC20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">script</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  bytecode: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Contract bytecode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  args: [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;MyToken&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;MTK&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">], </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Constructor args</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Use with any compatible client</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> name</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(script.read.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">name</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> symbol</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(script.read.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">symbol</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span></code></pre>\n","isPage":false,"text":"\nCreate self-deploying contract scripts that work with any client:\nimport { ERC20 } from &#x27;tevm/contract&#x27;\n \n// Create a script that deploys and initializes a token\nconst script = ERC20.script({\n  bytecode: &#x27;0x...&#x27;,  // Contract bytecode\n  args: [&#x27;MyToken&#x27;, &#x27;MTK&#x27;, 1000000n], // Constructor args\n})\n \n// Use with any compatible client\nconst name = await client.contract(script.read.name())\nconst symbol = await client.contract(script.read.symbol())\n","title":"Deployless Scripts","titles":["Contract Utilities"]},"166":{"href":"/api/contracts#contract-types","html":"\n<p>The package exports useful types for contract development:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  Contract,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ContractAbi,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ContractFunctionName,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ContractEventName,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/contract&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Use with your own contracts</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> MyContract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">typeof</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> myAbi&gt;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> MyFunctions</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ContractFunctionName</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">typeof</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> myAbi&gt;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> MyEvents</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ContractEventName</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">typeof</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> myAbi&gt;</span></span></code></pre>\n","isPage":false,"text":"\nThe package exports useful types for contract development:\nimport type {\n  Contract,\n  ContractAbi,\n  ContractFunctionName,\n  ContractEventName,\n} from &#x27;tevm/contract&#x27;\n \n// Use with your own contracts\ntype MyContract = Contract&lt;typeof myAbi&gt;\ntype MyFunctions = ContractFunctionName&lt;typeof myAbi&gt;\ntype MyEvents = ContractEventName&lt;typeof myAbi&gt;\n","title":"Contract Types","titles":["Contract Utilities"]},"167":{"href":"/api/contracts#best-practices","html":"\n","isPage":false,"text":"\n","title":"Best Practices","titles":["Contract Utilities"]},"168":{"href":"/api/contracts#1-type-safety","html":"\n<p>Always use <code>as const</code> with <a href=\"https://docs.soliditylang.org/en/latest/abi-spec.html\">ABIs</a> to get full type inference:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function example(uint256 value) returns (bool)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">as</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> const</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  humanReadableAbi: abi,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  name: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Example&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// contract.write.example will have proper types</span></span></code></pre>\n","isPage":false,"text":"\nAlways use as const with ABIs to get full type inference:\nconst abi = [\n  &#x27;function example(uint256 value) returns (bool)&#x27;,\n] as const\n \nconst contract = createContract({\n  humanReadableAbi: abi,\n  name: &#x27;Example&#x27;,\n})\n// contract.write.example will have proper types\n","title":"1. Type Safety","titles":["Contract Utilities","Best Practices"]},"169":{"href":"/api/contracts#2-error-handling","html":"\n<p>Handle contract errors appropriately:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(contract.write.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (e) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (e.message.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">includes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;insufficient balance&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Handle specific error case</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  throw</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> e</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nHandle contract errors appropriately:\ntry {\n  const result = await client.contract(contract.write.transfer(&#x27;0x...&#x27;, 1000n))\n} catch (e) {\n  if (e.message.includes(&#x27;insufficient balance&#x27;)) {\n    // Handle specific error case\n  }\n  throw e\n}\n","title":"2. Error Handling","titles":["Contract Utilities","Best Practices"]},"170":{"href":"/api/contracts#3-gas-management","html":"\n<p>Consider <a href=\"https://ethereum.org/en/developers/docs/gas/\">gas costs</a> in write operations:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract.write.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">complexOperation</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  gas: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">500000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Set gas limit</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  maxFeePerGas: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">30000000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Set max fee</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nConsider gas costs in write operations:\nconst tx = contract.write.complexOperation(&#x27;0x...&#x27;, {\n  gas: 500000n,  // Set gas limit\n  maxFeePerGas: 30000000000n,  // Set max fee\n})\n","title":"3. Gas Management","titles":["Contract Utilities","Best Practices"]},"171":{"href":"/api/contracts#4-event-handling","html":"\n<p>Listen for contract <a href=\"https://docs.soliditylang.org/en/latest/contracts.html#events\">events</a>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create event filter</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> filter</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract.events.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  fromBlock: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;latest&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Process events</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">watchEvent</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(filter, (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">event</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Transfer:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    from: event.args.from,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    to: event.args.to,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    value: event.args.value,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nListen for contract events:\n// Create event filter\nconst filter = contract.events.Transfer({\n  fromBlock: &#x27;latest&#x27;,\n})\n \n// Process events\nclient.watchEvent(filter, (event) =&gt; {\n  console.log(&#x27;Transfer:&#x27;, {\n    from: event.args.from,\n    to: event.args.to,\n    value: event.args.value,\n  })\n})\n","title":"4. Event Handling","titles":["Contract Utilities","Best Practices"]},"172":{"href":"/api/contracts#related-topics","html":"\n<p>- <a href=\"./utils\">Utilities &amp; Addresses</a>\n- <a href=\"../advanced/custom-precompiles\">Custom Precompiles</a>\n- <a href=\"../core/managing-state\">State Management</a>\n- <a href=\"https://docs.soliditylang.org/\">Solidity Documentation</a>\n- <a href=\"https://ethereum.org/en/developers/docs/smart-contracts/\">Ethereum Smart Contracts</a>\n- <a href=\"https://docs.openzeppelin.com/contracts/\">OpenZeppelin Contracts</a></p>","isPage":false,"text":"\n- Utilities &amp; Addresses\n- Custom Precompiles\n- State Management\n- Solidity Documentation\n- Ethereum Smart Contracts\n- OpenZeppelin Contracts","title":"Related Topics","titles":["Contract Utilities"]},"173":{"href":"/api/decorators#tevmdecorators","html":"</header>\n<p>The <code>@tevm/decorators</code> package provides a set of decorators and APIs for extending Tevm clients with additional functionality. It includes implementations for both standard Ethereum JSON-RPC methods and Tevm-specific actions.</p>\n","isPage":true,"text":"\nThe @tevm/decorators package provides a set of decorators and APIs for extending Tevm clients with additional functionality. It includes implementations for both standard Ethereum JSON-RPC methods and Tevm-specific actions.\n","title":"@tevm/decorators","titles":[]},"174":{"href":"/api/decorators#installation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> @tevm/decorators</span></span></code></pre>\n","isPage":false,"text":"\nnpm install @tevm/decorators\n","title":"Installation","titles":["@tevm/decorators"]},"175":{"href":"/api/decorators#main-apis","html":"\n","isPage":false,"text":"\n","title":"Main APIs","titles":["@tevm/decorators"]},"176":{"href":"/api/decorators#ethactionsapi","html":"\n<p>The <code>EthActionsApi</code> provides standard Ethereum JSON-RPC methods for interacting with the VM. These actions correspond 1:1 with the public Ethereum JSON-RPC API.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> EthActionsApi } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/decorators&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> EthActionsApi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  eth</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Returns the current block number</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    blockNumber</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> EthBlockNumberHandler</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Executes a call without modifying the state</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    call</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> EthCallHandler</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Returns the current chain id</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    chainId</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> EthChainIdHandler</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Returns the current gas price</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    gasPrice</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> EthGasPriceHandler</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Returns the balance of a given address</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    getBalance</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> EthGetBalanceHandler</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Returns code at a given address</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    getCode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> EthGetCodeHandler</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Returns storage at a given address and slot</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    getStorageAt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> EthGetStorageAtHandler</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe EthActionsApi provides standard Ethereum JSON-RPC methods for interacting with the VM. These actions correspond 1:1 with the public Ethereum JSON-RPC API.\nimport { type EthActionsApi } from &#x27;@tevm/decorators&#x27;\n \ninterface EthActionsApi {\n  eth: {\n    // Returns the current block number\n    blockNumber: EthBlockNumberHandler\n    // Executes a call without modifying the state\n    call: EthCallHandler\n    // Returns the current chain id\n    chainId: EthChainIdHandler\n    // Returns the current gas price\n    gasPrice: EthGasPriceHandler\n    // Returns the balance of a given address\n    getBalance: EthGetBalanceHandler\n    // Returns code at a given address\n    getCode: EthGetCodeHandler\n    // Returns storage at a given address and slot\n    getStorageAt: EthGetStorageAtHandler\n  }\n}\n","title":"EthActionsApi","titles":["@tevm/decorators","Main APIs"]},"177":{"href":"/api/decorators#tevmactionsapi","html":"\n<p>The <code>TevmActionsApi</code> provides Tevm-specific actions for enhanced VM interaction and state management.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TevmActionsApi } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/decorators&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TevmActionsApi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Sets the state of a specific ethereum address</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  setAccount</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> SetAccountHandler</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Gets the state of a specific ethereum address</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  getAccount</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> GetAccountHandler</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Executes a call against the VM with extended options</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  call</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> CallHandler</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Executes a contract call with typesafe API</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ContractHandler</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Dumps the current state of the VM</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  dumpState</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> DumpStateHandler</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Loads a previously dumped state</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  loadState</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> LoadStateHandler</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Mines blocks</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  mine</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> MineHandler</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Deploys a contract</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  deploy</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> DeployHandler</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Deals ERC20 tokens to an account</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  deal</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> AnvilDealHandler</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe TevmActionsApi provides Tevm-specific actions for enhanced VM interaction and state management.\nimport { type TevmActionsApi } from &#x27;@tevm/decorators&#x27;\n \ninterface TevmActionsApi {\n  // Sets the state of a specific ethereum address\n  setAccount: SetAccountHandler\n  // Gets the state of a specific ethereum address\n  getAccount: GetAccountHandler\n  // Executes a call against the VM with extended options\n  call: CallHandler\n  // Executes a contract call with typesafe API\n  contract: ContractHandler\n  // Dumps the current state of the VM\n  dumpState: DumpStateHandler\n  // Loads a previously dumped state\n  loadState: LoadStateHandler\n  // Mines blocks\n  mine: MineHandler\n  // Deploys a contract\n  deploy: DeployHandler\n  // Deals ERC20 tokens to an account\n  deal: AnvilDealHandler\n}\n","title":"TevmActionsApi","titles":["@tevm/decorators","Main APIs"]},"178":{"href":"/api/decorators#tevmsendapi","html":"\n<p>The <code>TevmSendApi</code> provides low-level JSON-RPC request handling capabilities.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TevmSendApi } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/decorators&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TevmSendApi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  send</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TevmJsonRpcRequestHandler</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  sendBulk</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TevmJsonRpcBulkRequestHandler</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe TevmSendApi provides low-level JSON-RPC request handling capabilities.\nimport { type TevmSendApi } from &#x27;@tevm/decorators&#x27;\n \ninterface TevmSendApi {\n  send: TevmJsonRpcRequestHandler\n  sendBulk: TevmJsonRpcBulkRequestHandler\n}\n","title":"TevmSendApi","titles":["@tevm/decorators","Main APIs"]},"179":{"href":"/api/decorators#decorators","html":"\n","isPage":false,"text":"\n","title":"Decorators","titles":["@tevm/decorators"]},"180":{"href":"/api/decorators#ethactions","html":"\n<p>A decorator function that extends a client with standard Ethereum JSON-RPC methods.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { ethActions } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/decorators&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> clientWithEth</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">extend</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ethActions</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Now you can use eth methods</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> clientWithEth.eth.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">blockNumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n","isPage":false,"text":"\nA decorator function that extends a client with standard Ethereum JSON-RPC methods.\nimport { ethActions } from &#x27;@tevm/decorators&#x27;\n \nconst clientWithEth = client.extend(ethActions())\n// Now you can use eth methods\nawait clientWithEth.eth.blockNumber()\n","title":"ethActions","titles":["@tevm/decorators","Decorators"]},"181":{"href":"/api/decorators#tevmactions","html":"\n<p>A decorator function that extends a client with Tevm-specific actions.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { tevmActions } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/decorators&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> clientWithTevm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">extend</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">tevmActions</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Now you can use Tevm actions</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> clientWithTevm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">call</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x123...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x456...&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nA decorator function that extends a client with Tevm-specific actions.\nimport { tevmActions } from &#x27;@tevm/decorators&#x27;\n \nconst clientWithTevm = client.extend(tevmActions())\n// Now you can use Tevm actions\nawait clientWithTevm.call({\n  to: &#x27;0x123...&#x27;,\n  data: &#x27;0x456...&#x27;\n})\n","title":"tevmActions","titles":["@tevm/decorators","Decorators"]},"182":{"href":"/api/decorators#examples","html":"\n","isPage":false,"text":"\n","title":"Examples","titles":["@tevm/decorators"]},"183":{"href":"/api/decorators#using-ethactionsapi","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get current block number</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> blockNumber</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.eth.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">blockNumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(blockNumber) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 0n</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get balance of an address</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> balance</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.eth.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBalance</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x123...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  tag: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;pending&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(balance) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 0n</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Execute a call</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.eth.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">call</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x123...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x456...&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\n// Get current block number\nconst blockNumber = await client.eth.blockNumber()\nconsole.log(blockNumber) // 0n\n \n// Get balance of an address\nconst balance = await client.eth.getBalance({\n  address: &#x27;0x123...&#x27;,\n  tag: &#x27;pending&#x27;\n})\nconsole.log(balance) // 0n\n \n// Execute a call\nconst result = await client.eth.call({\n  to: &#x27;0x123...&#x27;,\n  data: &#x27;0x456...&#x27;\n})\n","title":"Using EthActionsApi","titles":["@tevm/decorators","Examples"]},"184":{"href":"/api/decorators#using-tevmactionsapi","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Set account state</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x123...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  deployedBytecode: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x6080604...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  balance: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseEther</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;1.0&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Execute contract call</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x123...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  abi: [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  function: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;run&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  args: [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;world&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  from: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x456...&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Dump and load state</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">state</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">dumpState</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">loadState</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ state })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Deal tokens</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  erc20: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// USDC</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  account: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  amount: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // 1 USDC (6 decimals)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\n// Set account state\nawait client.setAccount({\n  address: &#x27;0x123...&#x27;,\n  deployedBytecode: &#x27;0x6080604...&#x27;,\n  balance: parseEther(&#x27;1.0&#x27;)\n})\n \n// Execute contract call\nconst result = await client.contract({\n  to: &#x27;0x123...&#x27;,\n  abi: [...],\n  function: &#x27;run&#x27;,\n  args: [&#x27;world&#x27;],\n  from: &#x27;0x456...&#x27;\n})\n \n// Dump and load state\nconst { state } = await client.dumpState()\nawait client.loadState({ state })\n \n// Deal tokens\nawait client.deal({\n  erc20: &#x27;0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48&#x27;, // USDC\n  account: &#x27;0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266&#x27;,\n  amount: 1000000n // 1 USDC (6 decimals)\n})\n","title":"Using TevmActionsApi","titles":["@tevm/decorators","Examples"]},"185":{"href":"/api/decorators#types","html":"\n<p>The package includes several additional types for working with Ethereum and EIP-1193:</p>\n<ul>\n<li><code>AddEthereumChainParameter</code>: Parameters for adding a new chain</li>\n<li><code>EIP1193Parameters</code>: Parameters for EIP-1193 requests</li>\n<li><code>Hash</code>: Type for Ethereum hashes</li>\n<li><code>LogTopic</code>: Type for event log topics</li>\n<li><code>NetworkSync</code>: Network synchronization status</li>\n<li><code>WalletPermission</code>: Wallet permission parameters</li>\n<li><code>WatchAssetParams</code>: Parameters for watching assets</li>\n</ul>\n","isPage":false,"text":"\nThe package includes several additional types for working with Ethereum and EIP-1193:\n\nAddEthereumChainParameter: Parameters for adding a new chain\nEIP1193Parameters: Parameters for EIP-1193 requests\nHash: Type for Ethereum hashes\nLogTopic: Type for event log topics\nNetworkSync: Network synchronization status\nWalletPermission: Wallet permission parameters\nWatchAssetParams: Parameters for watching assets\n\n","title":"Types","titles":["@tevm/decorators"]},"186":{"href":"/api/decorators#see-also","html":"\n<ul>\n<li><a href=\"https://tevm.sh/learn/actions/\">Tevm Actions Documentation</a></li>\n<li><a href=\"https://ethereum.github.io/execution-apis/api-documentation/\">JSON-RPC API Documentation</a></li>\n</ul>","isPage":false,"text":"\n\nTevm Actions Documentation\nJSON-RPC API Documentation\n","title":"See Also","titles":["@tevm/decorators"]},"187":{"href":"/api/evm-events#evm-events","html":"</header>\n<p>Tevm Node provides access to low-level EVM events through the VM&#x27;s event emitter. This allows you to monitor and debug contract execution at a granular level.</p>\n","isPage":true,"text":"\nTevm Node provides access to low-level EVM events through the VM&#x27;s event emitter. This allows you to monitor and debug contract execution at a granular level.\n","title":"EVM Events","titles":[]},"188":{"href":"/api/evm-events#available-events","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> EVMEvent</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Emitted when a new contract is created</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  newContract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    code</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> void</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Emitted before a message (call) is processed</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  beforeMessage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Message</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> void</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Emitted after a message (call) is processed</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  afterMessage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> EVMResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> void</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Emitted on each EVM step</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  step</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> InterpreterStep</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> void</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\ntype EVMEvent = {\n  // Emitted when a new contract is created\n  newContract: (data: {\n    address: Address,\n    code: Uint8Array\n  }) =&gt; void\n \n  // Emitted before a message (call) is processed\n  beforeMessage: (data: Message) =&gt; void\n \n  // Emitted after a message (call) is processed\n  afterMessage: (data: EVMResult) =&gt; void\n \n  // Emitted on each EVM step\n  step: (data: InterpreterStep) =&gt; void\n}\n","title":"Available Events","titles":["EVM Events"]},"189":{"href":"/api/evm-events#basic-usage","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Listen for EVM steps</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.evm.events?.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">on</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;step&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">step</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;EVM Step:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    pc: step.pc,           </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Program counter</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    opcode: step.opcode,   </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Current opcode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    gasLeft: step.gasLeft, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Remaining gas</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    stack: step.stack,     </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Stack contents</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    depth: step.depth,     </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Call depth</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">?.()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Listen for contract creation</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.evm.events?.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">on</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;newContract&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;New contract deployed:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    address: data.address.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    codeSize: data.code.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">length</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">?.()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Listen for message execution</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.evm.events?.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">on</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;beforeMessage&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">message</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Executing message:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    to: message.to?.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    value: message.value.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    delegatecall: message.delegatecall,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">?.()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.evm.events?.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">on</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;afterMessage&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Message result:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    gasUsed: result.execResult.executionGasUsed.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    returnValue: result.execResult.returnValue.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;hex&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    error: result.execResult.exceptionError?.error,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">?.()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nimport { createTevmNode } from &#x27;tevm&#x27;\n \nconst node = createTevmNode()\nconst vm = await node.getVm()\n \n// Listen for EVM steps\nvm.evm.events?.on(&#x27;step&#x27;, (step, next) =&gt; {\n  console.log(&#x27;EVM Step:&#x27;, {\n    pc: step.pc,           // Program counter\n    opcode: step.opcode,   // Current opcode\n    gasLeft: step.gasLeft, // Remaining gas\n    stack: step.stack,     // Stack contents\n    depth: step.depth,     // Call depth\n  })\n  next?.()\n})\n \n// Listen for contract creation\nvm.evm.events?.on(&#x27;newContract&#x27;, (data, next) =&gt; {\n  console.log(&#x27;New contract deployed:&#x27;, {\n    address: data.address.toString(),\n    codeSize: data.code.length,\n  })\n  next?.()\n})\n \n// Listen for message execution\nvm.evm.events?.on(&#x27;beforeMessage&#x27;, (message, next) =&gt; {\n  console.log(&#x27;Executing message:&#x27;, {\n    to: message.to?.toString(),\n    value: message.value.toString(),\n    delegatecall: message.delegatecall,\n  })\n  next?.()\n})\n \nvm.evm.events?.on(&#x27;afterMessage&#x27;, (result, next) =&gt; {\n  console.log(&#x27;Message result:&#x27;, {\n    gasUsed: result.execResult.executionGasUsed.toString(),\n    returnValue: result.execResult.returnValue.toString(&#x27;hex&#x27;),\n    error: result.execResult.exceptionError?.error,\n  })\n  next?.()\n})\n","title":"Basic Usage","titles":["EVM Events"]},"190":{"href":"/api/evm-events#debugging-example","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create a debug tracer</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createDebugTracer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">vm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> trace</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    steps: [],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    contracts: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    errors: [],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Track each EVM step</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  vm.evm.events?.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">on</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;step&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">step</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    trace.steps.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">push</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      pc: step.pc,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      opcode: step.opcode.name,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      gasCost: step.opcode.fee,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      stack: step.stack.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">item</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> item.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">16</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">?.()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Track contract creation</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  vm.evm.events?.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">on</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;newContract&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    trace.contracts.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(data.address.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">?.()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Track errors</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  vm.evm.events?.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">on</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;afterMessage&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (result.execResult.exceptionError) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      trace.errors.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">push</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        error: result.execResult.exceptionError.error,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        returnData: result.execResult.returnValue.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;hex&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">?.()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> trace</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Use the tracer</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> trace</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createDebugTracer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Run some transactions...</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Execution trace:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  stepCount: trace.steps.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">length</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  contracts: Array.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">from</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(trace.contracts),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  errors: trace.errors,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\n// Create a debug tracer\nfunction createDebugTracer(vm) {\n  const trace = {\n    steps: [],\n    contracts: new Set(),\n    errors: [],\n  }\n \n  // Track each EVM step\n  vm.evm.events?.on(&#x27;step&#x27;, (step, next) =&gt; {\n    trace.steps.push({\n      pc: step.pc,\n      opcode: step.opcode.name,\n      gasCost: step.opcode.fee,\n      stack: step.stack.map(item =&gt; item.toString(16)),\n    })\n    next?.()\n  })\n \n  // Track contract creation\n  vm.evm.events?.on(&#x27;newContract&#x27;, (data, next) =&gt; {\n    trace.contracts.add(data.address.toString())\n    next?.()\n  })\n \n  // Track errors\n  vm.evm.events?.on(&#x27;afterMessage&#x27;, (result, next) =&gt; {\n    if (result.execResult.exceptionError) {\n      trace.errors.push({\n        error: result.execResult.exceptionError.error,\n        returnData: result.execResult.returnValue.toString(&#x27;hex&#x27;),\n      })\n    }\n    next?.()\n  })\n \n  return trace\n}\n \n// Use the tracer\nconst node = createTevmNode()\nconst vm = await node.getVm()\nconst trace = createDebugTracer(vm)\n \n// Run some transactions...\n \nconsole.log(&#x27;Execution trace:&#x27;, {\n  stepCount: trace.steps.length,\n  contracts: Array.from(trace.contracts),\n  errors: trace.errors,\n})\n","title":"Debugging Example","titles":["EVM Events"]},"191":{"href":"/api/evm-events#gas-profiling","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create a gas profiler</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createGasProfiler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">vm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> profile</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    opcodes: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    totalGas: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  vm.evm.events?.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">on</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;step&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">step</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> opName</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> step.opcode.name</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> gasCost</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> BigInt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(step.opcode.fee)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> stats</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> profile.opcodes.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(opName) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">||</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      count: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      totalGas: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    stats.count</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    stats.totalGas </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> gasCost</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    profile.totalGas </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> gasCost</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    profile.opcodes.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(opName, stats)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">?.()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> profile</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Use the profiler</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> profile</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createGasProfiler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Run transactions...</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get gas usage by opcode</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">opcode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">stats</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">of</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> profile.opcodes) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">opcode</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}:`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    count: stats.count,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    totalGas: stats.totalGas.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    percentageOfTotal: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(stats.totalGas </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 100</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> /</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> profile.totalGas),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\n// Create a gas profiler\nfunction createGasProfiler(vm) {\n  const profile = {\n    opcodes: new Map(),\n    totalGas: 0n,\n  }\n \n  vm.evm.events?.on(&#x27;step&#x27;, (step, next) =&gt; {\n    const opName = step.opcode.name\n    const gasCost = BigInt(step.opcode.fee)\n \n    const stats = profile.opcodes.get(opName) || {\n      count: 0,\n      totalGas: 0n\n    }\n \n    stats.count++\n    stats.totalGas += gasCost\n    profile.totalGas += gasCost\n    profile.opcodes.set(opName, stats)\n \n    next?.()\n  })\n \n  return profile\n}\n \n// Use the profiler\nconst node = createTevmNode()\nconst vm = await node.getVm()\nconst profile = createGasProfiler(vm)\n \n// Run transactions...\n \n// Get gas usage by opcode\nfor (const [opcode, stats] of profile.opcodes) {\n  console.log(`${opcode}:`, {\n    count: stats.count,\n    totalGas: stats.totalGas.toString(),\n    percentageOfTotal: Number(stats.totalGas * 100n / profile.totalGas),\n  })\n}\n","title":"Gas Profiling","titles":["EVM Events"]},"192":{"href":"/api/evm-events#error-handling","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.evm.events?.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">on</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;afterMessage&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (result.execResult.exceptionError) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> error</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result.execResult.exceptionError</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    switch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error.error) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      case</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;out of gas&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Transaction ran out of gas&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        break</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      case</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;revert&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Transaction reverted:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          result.execResult.returnValue.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;hex&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        break</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      case</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;invalid opcode&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Invalid opcode encountered&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">        break</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      default</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Unknown error:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, error)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">?.()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nvm.evm.events?.on(&#x27;afterMessage&#x27;, (result, next) =&gt; {\n  if (result.execResult.exceptionError) {\n    const error = result.execResult.exceptionError\n \n    switch (error.error) {\n      case &#x27;out of gas&#x27;:\n        console.error(&#x27;Transaction ran out of gas&#x27;)\n        break\n      case &#x27;revert&#x27;:\n        console.error(&#x27;Transaction reverted:&#x27;,\n          result.execResult.returnValue.toString(&#x27;hex&#x27;))\n        break\n      case &#x27;invalid opcode&#x27;:\n        console.error(&#x27;Invalid opcode encountered&#x27;)\n        break\n      default:\n        console.error(&#x27;Unknown error:&#x27;, error)\n    }\n  }\n  next?.()\n})\n","title":"Error Handling","titles":["EVM Events"]},"193":{"href":"/api/evm-events#best-practices","html":"\n<ol>\n<li>\n<strong>Always Call Next</strong>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.evm.events?.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">on</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;step&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">step</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Process step...</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">?.() </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Important: Call next to continue execution</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n</li>\n<li>\n<strong>Clean Up Listeners</strong>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> handler</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">step</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Handle step...</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">?.()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.evm.events?.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">on</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;step&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, handler)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Later...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.evm.events?.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">off</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;step&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, handler)</span></span></code></pre>\n</li>\n<li>\n<strong>Handle Errors Gracefully</strong>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.evm.events?.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">on</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;step&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">step</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Process step...</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Error processing step:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, error)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">?.()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n</li>\n</ol>\n","isPage":false,"text":"\n\n\nAlways Call Next\nvm.evm.events?.on(&#x27;step&#x27;, (step, next) =&gt; {\n  // Process step...\n  next?.() // Important: Call next to continue execution\n})\n\n\nClean Up Listeners\nconst handler = (step, next) =&gt; {\n  // Handle step...\n  next?.()\n}\n \nvm.evm.events?.on(&#x27;step&#x27;, handler)\n \n// Later...\nvm.evm.events?.off(&#x27;step&#x27;, handler)\n\n\nHandle Errors Gracefully\nvm.evm.events?.on(&#x27;step&#x27;, (step, next) =&gt; {\n  try {\n    // Process step...\n  } catch (error) {\n    console.error(&#x27;Error processing step:&#x27;, error)\n  }\n  next?.()\n})\n\n\n","title":"Best Practices","titles":["EVM Events"]},"194":{"href":"/api/evm-events#related-topics","html":"\n<ul>\n<li><a href=\"../advanced/performance-profiler\">Performance Profiler</a></li>\n<li><a href=\"../api/methods\">Gas Estimation</a></li>\n</ul>","isPage":false,"text":"\n\nPerformance Profiler\nGas Estimation\n","title":"Related Topics","titles":["EVM Events"]},"195":{"href":"/api/evm#tevmevm","html":"</header>\n<blockquote>\n<p><strong>Generated API Documentation</strong>: View the full API documentation in the <a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/evm/docs\">evmts/tevm-monorepo/packages/evm/docs</a> folder.</p>\n</blockquote>\n<p>The <code>@tevm/evm</code> package provides a custom implementation of the Ethereum Virtual Machine (EVM), extending the functionality of <code>ethereumjs/evm</code>. It&#x27;s responsible for executing Ethereum bytecode and managing the execution environment.</p>\n","isPage":true,"text":"\n\nGenerated API Documentation: View the full API documentation in the evmts/tevm-monorepo/packages/evm/docs folder.\n\nThe @tevm/evm package provides a custom implementation of the Ethereum Virtual Machine (EVM), extending the functionality of ethereumjs/evm. It&#x27;s responsible for executing Ethereum bytecode and managing the execution environment.\n","title":"@tevm/evm","titles":[]},"196":{"href":"/api/evm#installation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> @tevm/evm</span></span></code></pre>\n","isPage":false,"text":"\nnpm install @tevm/evm\n","title":"Installation","titles":["@tevm/evm"]},"197":{"href":"/api/evm#main-components","html":"\n","isPage":false,"text":"\n","title":"Main Components","titles":["@tevm/evm"]},"198":{"href":"/api/evm#evm-class","html":"\n<p>The main class for executing Ethereum bytecode. It extends the EthereumJS EVM with Tevm-specific functionality.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createEvm } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/evm&#x27;</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // See [createEvm](https://github.com/evmts/tevm-monorepo/blob/main/packages/evm/docs/functions/createEvm.md)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { mainnet } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/common&#x27;</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // See [Common](https://github.com/evmts/tevm-monorepo/blob/main/packages/common/docs/interfaces/Common.md)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createStateManager } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/state&#x27;</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // See [createStateManager](https://github.com/evmts/tevm-monorepo/blob/main/packages/state/docs/functions/createStateManager.md)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createChain } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/chain&#x27;</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // See [createChain](https://github.com/evmts/tevm-monorepo/blob/main/packages/chain/docs/functions/createChain.md)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> evm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createEvm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  common: mainnet,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  stateManager: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createStateManager</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({}),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  blockchain: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createChain</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ common: mainnet }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nThe main class for executing Ethereum bytecode. It extends the EthereumJS EVM with Tevm-specific functionality.\nimport { createEvm } from &#x27;@tevm/evm&#x27; // See [createEvm](https://github.com/evmts/tevm-monorepo/blob/main/packages/evm/docs/functions/createEvm.md)\nimport { mainnet } from &#x27;@tevm/common&#x27; // See [Common](https://github.com/evmts/tevm-monorepo/blob/main/packages/common/docs/interfaces/Common.md)\nimport { createStateManager } from &#x27;@tevm/state&#x27; // See [createStateManager](https://github.com/evmts/tevm-monorepo/blob/main/packages/state/docs/functions/createStateManager.md)\nimport { createChain } from &#x27;@tevm/chain&#x27; // See [createChain](https://github.com/evmts/tevm-monorepo/blob/main/packages/chain/docs/functions/createChain.md)\n \nconst evm = await createEvm({\n  common: mainnet,\n  stateManager: createStateManager({}),\n  blockchain: await createChain({ common: mainnet }),\n})\n","title":"Evm Class","titles":["@tevm/evm","Main Components"]},"199":{"href":"/api/evm#methods","html":"\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/evm/docs/interfaces/Evm.md#runcall\"><code>runCall(opts: EvmRunCallOpts): Promise&lt;EvmResult&gt;</code></a> - Executes an EVM message</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/evm/docs/interfaces/Evm.md#addcustomprecompile\"><code>addCustomPrecompile(precompile: CustomPrecompile): void</code></a> - Adds a custom precompile</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/evm/docs/interfaces/Evm.md#removecustomprecompile\"><code>removeCustomPrecompile(precompile: CustomPrecompile): void</code></a> - Removes a custom precompile</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/evm/docs/interfaces/Evm.md#getactiveopcodes\"><code>getActiveOpcodes(): OpcodeList</code></a> - Returns currently activated opcodes</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/evm/docs/interfaces/Evm.md#getprecompile\"><code>getPrecompile(address: Address): PrecompileFunc | undefined</code></a> - Returns precompile at address</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/evm/docs/interfaces/Evm.md#getperformancelogs\"><code>getPerformanceLogs()</code></a> - Returns performance logs for opcodes and precompiles</li>\n</ul>\n","isPage":false,"text":"\n\nrunCall(opts: EvmRunCallOpts): Promise&lt;EvmResult&gt; - Executes an EVM message\naddCustomPrecompile(precompile: CustomPrecompile): void - Adds a custom precompile\nremoveCustomPrecompile(precompile: CustomPrecompile): void - Removes a custom precompile\ngetActiveOpcodes(): OpcodeList - Returns currently activated opcodes\ngetPrecompile(address: Address): PrecompileFunc | undefined - Returns precompile at address\ngetPerformanceLogs() - Returns performance logs for opcodes and precompiles\n\n","title":"Methods","titles":["@tevm/evm","Main Components","Evm Class"]},"200":{"href":"/api/evm#creating-an-evm-instance","html":"\n<p>The <a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/evm/docs/functions/createEvm.md\"><code>createEvm</code></a> function is the recommended way to create a new EVM instance:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createEvm } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/evm&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> evm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createEvm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  common: mainnet,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  stateManager: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createStateManager</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({}),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  blockchain: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createChain</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ common: mainnet }),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  customPrecompiles: [], </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Optional custom precompiles</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  profiler: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Enable/disable profiling</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  loggingLevel: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;warn&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Logging configuration</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nThe createEvm function is the recommended way to create a new EVM instance:\nimport { createEvm } from &#x27;@tevm/evm&#x27;\n \nconst evm = await createEvm({\n  common: mainnet,\n  stateManager: createStateManager({}),\n  blockchain: await createChain({ common: mainnet }),\n  customPrecompiles: [], // Optional custom precompiles\n  profiler: false, // Enable/disable profiling\n  loggingLevel: &#x27;warn&#x27;, // Logging configuration\n})\n","title":"Creating an EVM Instance","titles":["@tevm/evm","Main Components"]},"201":{"href":"/api/evm#custom-precompiles","html":"\n<p>The EVM supports <a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/evm/docs/interfaces/CustomPrecompile.md\">custom precompiles</a> that allow executing arbitrary JavaScript code:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { definePrecompile, defineCall, createContract, parseAbi } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/evm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createAddress } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/utils&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> MyContract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2424</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  abi: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &#x27;function addTwo(uint256) returns (uint256)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ])</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> customPrecompile</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> definePrecompile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  contract: MyContract,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  call: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">defineCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(MyContract.abi, {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    addTwo</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ({ </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">args</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        returnValue: args[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 5</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        executionGasUsed: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Add to EVM - note we need to call .precompile()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">evm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">addCustomPrecompile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(customPrecompile.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">precompile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span></code></pre>\n","isPage":false,"text":"\nThe EVM supports custom precompiles that allow executing arbitrary JavaScript code:\nimport { definePrecompile, defineCall, createContract, parseAbi } from &#x27;@tevm/evm&#x27;\nimport { createAddress } from &#x27;@tevm/utils&#x27;\n \nconst MyContract = createContract({\n  address: createAddress(2424).toString(),\n  abi: parseAbi([\n    &#x27;function addTwo(uint256) returns (uint256)&#x27;,\n  ])\n})\n \nconst customPrecompile = definePrecompile({\n  contract: MyContract,\n  call: defineCall(MyContract.abi, {\n    addTwo: async ({ args }) =&gt; {\n      return {\n        returnValue: args[0] + 5n,\n        executionGasUsed: 0n\n      }\n    }\n  })\n})\n \n// Add to EVM - note we need to call .precompile()\nevm.addCustomPrecompile(customPrecompile.precompile())\n","title":"Custom Precompiles","titles":["@tevm/evm","Main Components"]},"202":{"href":"/api/evm#types","html":"\n","isPage":false,"text":"\n","title":"Types","titles":["@tevm/evm"]},"203":{"href":"/api/evm#error-handling","html":"\n<p>The EVM uses the <a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/evm/docs/classes/EvmError.md\"><code>EvmError</code></a> class for error handling, with various error types defined in <a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/evm/docs/enums/EvmErrorMessage.md\"><code>EvmErrorMessage</code></a>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">enum</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> EvmErrorMessage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  OUT_OF_GAS</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;out of gas&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  CODESTORE_OUT_OF_GAS</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;code store out of gas&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  INVALID_JUMP</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;invalid JUMP&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  INVALID_OPCODE</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;invalid opcode&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  STACK_OVERFLOW</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;stack overflow&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  STACK_UNDERFLOW</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;stack underflow&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  REVERT</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;revert&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  STATIC_STATE_CHANGE</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;static state change&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">  INTERNAL_ERROR</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;internal error&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // ... and more</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe EVM uses the EvmError class for error handling, with various error types defined in EvmErrorMessage:\nenum EvmErrorMessage {\n  OUT_OF_GAS = &#x27;out of gas&#x27;,\n  CODESTORE_OUT_OF_GAS = &#x27;code store out of gas&#x27;,\n  INVALID_JUMP = &#x27;invalid JUMP&#x27;,\n  INVALID_OPCODE = &#x27;invalid opcode&#x27;,\n  STACK_OVERFLOW = &#x27;stack overflow&#x27;,\n  STACK_UNDERFLOW = &#x27;stack underflow&#x27;,\n  REVERT = &#x27;revert&#x27;,\n  STATIC_STATE_CHANGE = &#x27;static state change&#x27;,\n  INTERNAL_ERROR = &#x27;internal error&#x27;,\n  // ... and more\n}\n","title":"Error Handling","titles":["@tevm/evm"]},"204":{"href":"/api/evm#events-and-debugging","html":"\n<p>The EVM includes support for debugging and event tracking:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Enable debug logging</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> evm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createEvm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // ... other options</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  loggingLevel: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;trace&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get performance logs</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> logs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> evm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getPerformanceLogs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(logs.opcodes) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Opcode execution stats</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(logs.precompiles) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Precompile execution stats</span></span></code></pre>\n","isPage":false,"text":"\nThe EVM includes support for debugging and event tracking:\n// Enable debug logging\nconst evm = await createEvm({\n  // ... other options\n  loggingLevel: &#x27;trace&#x27;\n})\n \n// Get performance logs\nconst logs = evm.getPerformanceLogs()\nconsole.log(logs.opcodes) // Opcode execution stats\nconsole.log(logs.precompiles) // Precompile execution stats\n","title":"Events and Debugging","titles":["@tevm/evm"]},"205":{"href":"/api/evm#see-also","html":"\n<ul>\n<li><a href=\"https://github.com/ethereumjs/ethereumjs-monorepo/tree/master/packages/evm\">EthereumJS EVM Documentation</a></li>\n<li><a href=\"https://tevm.sh/reference/tevm/state/\">Tevm State Documentation</a></li>\n<li><a href=\"https://tevm.sh/reference/tevm/precompiles/\">Tevm Precompiles Documentation</a></li>\n</ul>","isPage":false,"text":"\n\nEthereumJS EVM Documentation\nTevm State Documentation\nTevm Precompiles Documentation\n","title":"See Also","titles":["@tevm/evm"]},"206":{"href":"/api/json-rpc#json-rpc-support","html":"</header>\n<p>Tevm Node provides comprehensive <a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/\">JSON-RPC</a> support through an <a href=\"https://eips.ethereum.org/EIPS/eip-1193\">EIP-1193</a> compatible interface. This allows seamless integration with popular Ethereum libraries and tools.</p>\n","isPage":true,"text":"\nTevm Node provides comprehensive JSON-RPC support through an EIP-1193 compatible interface. This allows seamless integration with popular Ethereum libraries and tools.\n","title":"JSON-RPC Support","titles":[]},"207":{"href":"/api/json-rpc#eip-1193-provider","html":"\n<p>The node can be extended to expose an <a href=\"https://eips.ethereum.org/EIPS/eip-1193\">EIP-1193</a> compatible request interface:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { requestEip1193 } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/decorators&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">extend</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">requestEip1193</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Use standard JSON-RPC methods</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> blockNum</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">request</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  method: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;eth_blockNumber&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  params: [],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nThe node can be extended to expose an EIP-1193 compatible request interface:\nimport { createTevmNode } from &#x27;tevm&#x27;\nimport { requestEip1193 } from &#x27;tevm/decorators&#x27;\n \nconst node = createTevmNode().extend(requestEip1193())\n \n// Use standard JSON-RPC methods\nconst blockNum = await node.request({\n  method: &#x27;eth_blockNumber&#x27;,\n  params: [],\n})\n","title":"EIP-1193 Provider","titles":["JSON-RPC Support"]},"208":{"href":"/api/json-rpc#supported-methods","html":"\n","isPage":false,"text":"\n","title":"Supported Methods","titles":["JSON-RPC Support"]},"209":{"href":"/api/json-rpc#core-ethereum-methods","html":"\n<ul>\n<li>\n<strong>Block &amp; Chain</strong>\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/blockNumberHandler.md\"><code>eth_blockNumber</code></a> - Get current block number</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/ethGetBlockByHashProcedure.md\"><code>eth_getBlockByHash</code></a> - Get block by hash</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/ethGetBlockByNumberProcedure.md\"><code>eth_getBlockByNumber</code></a> - Get block by number</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/chainIdHandler.md\"><code>eth_chainId</code></a> - Get current chain ID</li>\n</ul>\n</li>\n<li>\n<strong>State &amp; Account</strong>\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/getBalanceHandler.md\"><code>eth_getBalance</code></a> - Get account balance</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/getCodeHandler.md\"><code>eth_getCode</code></a> - Get contract code</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/getStorageAtHandler.md\"><code>eth_getStorageAt</code></a> - Get storage value</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/ethGetTransactionCountProcedure.md\"><code>eth_getTransactionCount</code></a> - Get account nonce</li>\n</ul>\n</li>\n<li>\n<strong>Transaction</strong>\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/ethCallHandler.md\"><code>eth_call</code></a> - Execute contract call</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/ethEstimateGasProcedure.md\"><code>eth_estimateGas</code></a> - Estimate gas usage</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/ethSendTransactionHandler.md\"><code>eth_sendTransaction</code></a> - Send transaction</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/ethSendRawTransaction.md\"><code>eth_sendRawTransaction</code></a> - Send signed transaction</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/ethGetTransactionByHashProcedure.md\"><code>eth_getTransactionByHash</code></a> - Get transaction details</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/ethGetTransactionReceipt.md\"><code>eth_getTransactionReceipt</code></a> - Get transaction receipt</li>\n</ul>\n</li>\n<li>\n<strong>Logs &amp; Events</strong>\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/ethGetLogsHandler.md\"><code>eth_getLogs</code></a> - Get event logs</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/ethNewFilterProcedure.md\"><code>eth_newFilter</code></a> - Create new filter</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/ethNewBlockFilterProcedure.md\"><code>eth_newBlockFilter</code></a> - Create block filter</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/ethGetFilterChangesProcedure.md\"><code>eth_getFilterChanges</code></a> - Get filter updates</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/ethGetFilterLogsProcedure.md\"><code>eth_getFilterLogs</code></a> - Get all filter logs</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/ethUninstallFilterProcedure.md\"><code>eth_uninstallFilter</code></a> - Remove filter</li>\n</ul>\n</li>\n</ul>\n","isPage":false,"text":"\n\n\nBlock &amp; Chain\n\neth_blockNumber - Get current block number\neth_getBlockByHash - Get block by hash\neth_getBlockByNumber - Get block by number\neth_chainId - Get current chain ID\n\n\n\nState &amp; Account\n\neth_getBalance - Get account balance\neth_getCode - Get contract code\neth_getStorageAt - Get storage value\neth_getTransactionCount - Get account nonce\n\n\n\nTransaction\n\neth_call - Execute contract call\neth_estimateGas - Estimate gas usage\neth_sendTransaction - Send transaction\neth_sendRawTransaction - Send signed transaction\neth_getTransactionByHash - Get transaction details\neth_getTransactionReceipt - Get transaction receipt\n\n\n\nLogs &amp; Events\n\neth_getLogs - Get event logs\neth_newFilter - Create new filter\neth_newBlockFilter - Create block filter\neth_getFilterChanges - Get filter updates\neth_getFilterLogs - Get all filter logs\neth_uninstallFilter - Remove filter\n\n\n\n","title":"Core Ethereum Methods","titles":["JSON-RPC Support","Supported Methods"]},"210":{"href":"/api/json-rpc#extended-methods","html":"\n<p>Tevm also supports additional methods commonly found in development environments:</p>\n<ul>\n<li>\n<strong>Debug Methods</strong>\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/debugTraceTransactionProcedure.md\"><code>debug_traceTransaction</code></a> - Trace transaction execution</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/debugDumpStateProcedure.md\"><code>debug_dumpState</code></a> - Dump current state</li>\n</ul>\n</li>\n<li>\n<p><strong>Anvil Methods</strong> (For <a href=\"https://book.getfoundry.sh/reference/anvil/\">Foundry</a> compatibility)</p>\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/anvilSetCodeProcedure.md\"><code>anvil_setCode</code></a> - Set contract code</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/anvilSetBalance.md\"><code>anvil_setBalance</code></a> - Set account balance</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/anvilSetNonceProcedure.md\"><code>anvil_setNonce</code></a> - Set account nonce</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/anvilSetStorageAtProcedure.md\"><code>anvil_setStorageAt</code></a> - Set storage value</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/anvilImpersonateAccount.md\"><code>anvil_impersonateAccount</code></a> - Impersonate account</li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/anvilStopImpersonatingAccountProcedure.md\"><code>anvil_stopImpersonatingAccount</code></a> - Stop impersonating</li>\n</ul>\n</li>\n</ul>\n","isPage":false,"text":"\nTevm also supports additional methods commonly found in development environments:\n\n\nDebug Methods\n\ndebug_traceTransaction - Trace transaction execution\ndebug_dumpState - Dump current state\n\n\n\nAnvil Methods (For Foundry compatibility)\n\nanvil_setCode - Set contract code\nanvil_setBalance - Set account balance\nanvil_setNonce - Set account nonce\nanvil_setStorageAt - Set storage value\nanvil_impersonateAccount - Impersonate account\nanvil_stopImpersonatingAccount - Stop impersonating\n\n\n\n","title":"Extended Methods","titles":["JSON-RPC Support","Supported Methods"]},"211":{"href":"/api/json-rpc#client-integration","html":"\n","isPage":false,"text":"\n","title":"Client Integration","titles":["JSON-RPC Support"]},"212":{"href":"/api/json-rpc#using-with-viem","html":"\n<p>For more information, see the <a href=\"https://viem.sh/docs/clients/custom.html\">Viem Documentation</a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createPublicClient, custom } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;viem&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { requestEip1193 } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/decorators&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">extend</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">requestEip1193</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createPublicClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  chain: mainnet,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  transport: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">custom</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node.request),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nFor more information, see the Viem Documentation.\nimport { createTevmNode } from &#x27;tevm&#x27;\nimport { createPublicClient, custom } from &#x27;viem&#x27;\nimport { requestEip1193 } from &#x27;tevm/decorators&#x27;\n \nconst node = createTevmNode().extend(requestEip1193())\n \nconst client = createPublicClient({\n  chain: mainnet,\n  transport: custom(node.request),\n})\n","title":"Using with Viem","titles":["JSON-RPC Support","Client Integration"]},"213":{"href":"/api/json-rpc#using-with-ethers","html":"\n<p>For more information, see the <a href=\"https://docs.ethers.org/v6/api/providers/#Provider\">Ethers Documentation</a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { BrowserProvider } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;ethers&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { requestEip1193 } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/decorators&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">extend</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">requestEip1193</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> provider</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> BrowserProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)</span></span></code></pre>\n","isPage":false,"text":"\nFor more information, see the Ethers Documentation.\nimport { createTevmNode } from &#x27;tevm&#x27;\nimport { BrowserProvider } from &#x27;ethers&#x27;\nimport { requestEip1193 } from &#x27;tevm/decorators&#x27;\n \nconst node = createTevmNode().extend(requestEip1193())\nconst provider = new BrowserProvider(node)\n","title":"Using with Ethers","titles":["JSON-RPC Support","Client Integration"]},"214":{"href":"/api/json-rpc#error-handling","html":"\n<p>JSON-RPC errors follow the <a href=\"https://www.jsonrpc.org/specification#error_object\">standard format</a> and are fully typed. See the <a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/type-aliases/JsonRpcError.md\">error types documentation</a> for more details:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> JsonRpcError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  code</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  message</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> unknown</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<p>Common error codes (see <a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/variables/ErrorCodes.md\">Error Types</a>):</p>\n<ul>\n<li><code>-32700</code>: Parse error (<a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/type-aliases/ParseError.md\"><code>ParseError</code></a>)</li>\n<li><code>-32600</code>: Invalid request (<a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/type-aliases/InvalidRequest.md\"><code>InvalidRequest</code></a>)</li>\n<li><code>-32601</code>: Method not found (<a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/type-aliases/MethodNotFound.md\"><code>MethodNotFound</code></a>)</li>\n<li><code>-32602</code>: Invalid params (<a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/type-aliases/InvalidParams.md\"><code>InvalidParams</code></a>)</li>\n<li><code>-32603</code>: Internal error (<a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/type-aliases/InternalError.md\"><code>InternalError</code></a>)</li>\n<li><code>-32000</code> to <code>-32099</code>: Server error (<a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/type-aliases/ServerError.md\"><code>ServerError</code></a>)</li>\n</ul>\n<p>For detailed error handling examples and best practices, see the <a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/variables/ErrorHandling.md\">Error Handling Guide</a>.</p>\n","isPage":false,"text":"\nJSON-RPC errors follow the standard format and are fully typed. See the error types documentation for more details:\ninterface JsonRpcError {\n  code: number\n  message: string\n  data?: unknown\n}\nCommon error codes (see Error Types):\n\n-32700: Parse error (ParseError)\n-32600: Invalid request (InvalidRequest)\n-32601: Method not found (MethodNotFound)\n-32602: Invalid params (InvalidParams)\n-32603: Internal error (InternalError)\n-32000 to -32099: Server error (ServerError)\n\nFor detailed error handling examples and best practices, see the Error Handling Guide.\n","title":"Error Handling","titles":["JSON-RPC Support"]},"215":{"href":"/api/json-rpc#best-practices","html":"\n<ol>\n<li>\n<p><strong>Error Handling</strong>: Always wrap RPC calls in try-catch blocks to handle potential errors gracefully. See <a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/variables/ErrorCodes.md\">Error Types</a> for all possible errors.</p>\n</li>\n<li>\n<p><strong>Gas Estimation</strong>: For transactions, use <a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/ethEstimateGasProcedure.md\"><code>eth_estimateGas</code></a> before sending to ensure sufficient gas:</p>\n</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> gasEstimate</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">request</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  method: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;eth_estimateGas&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  params: [tx],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n<ol start=\"3\">\n<li><strong>Receipt Confirmation</strong>: Wait for transaction receipts to confirm state changes using <a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/ethGetTransactionReceipt.md\"><code>eth_getTransactionReceipt</code></a>:</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txHash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">request</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  method: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;eth_sendTransaction&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  params: [tx],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> receipt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">request</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  method: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;eth_getTransactionReceipt&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  params: [txHash],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n<ol start=\"4\">\n<li><strong>Event Filtering</strong>: Use filters efficiently by:\n<ul>\n<li>Setting appropriate block ranges</li>\n<li>Using specific <a href=\"https://docs.soliditylang.org/en/latest/abi-spec.html#events\">topics</a></li>\n<li>Cleaning up unused filters with <a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/ethUninstallFilterProcedure.md\"><code>eth_uninstallFilter</code></a></li>\n</ul>\n</li>\n</ol>\n<p>For more examples and detailed API documentation, see:</p>\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs\">Complete Actions Documentation</a></li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/type-aliases\">Type Definitions</a></li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions\">Function Reference</a></li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/variables\">Variables and Constants</a></li>\n</ul>\n","isPage":false,"text":"\n\n\nError Handling: Always wrap RPC calls in try-catch blocks to handle potential errors gracefully. See Error Types for all possible errors.\n\n\nGas Estimation: For transactions, use eth_estimateGas before sending to ensure sufficient gas:\n\n\nconst gasEstimate = await node.request({\n  method: &#x27;eth_estimateGas&#x27;,\n  params: [tx],\n})\n\nReceipt Confirmation: Wait for transaction receipts to confirm state changes using eth_getTransactionReceipt:\n\nconst txHash = await node.request({\n  method: &#x27;eth_sendTransaction&#x27;,\n  params: [tx],\n})\n \nconst receipt = await node.request({\n  method: &#x27;eth_getTransactionReceipt&#x27;,\n  params: [txHash],\n})\n\nEvent Filtering: Use filters efficiently by:\n\nSetting appropriate block ranges\nUsing specific topics\nCleaning up unused filters with eth_uninstallFilter\n\n\n\nFor more examples and detailed API documentation, see:\n\nComplete Actions Documentation\nType Definitions\nFunction Reference\nVariables and Constants\n\n","title":"Best Practices","titles":["JSON-RPC Support"]},"216":{"href":"/api/json-rpc#related-topics","html":"\n<ul>\n<li><a href=\"../examples/viem\">Using with Viem</a></li>\n<li><a href=\"../examples/ethers\">Using with Ethers</a></li>\n<li><a href=\"../core/managing-state\">Managing State</a></li>\n<li><a href=\"../advanced/receipts-and-logs\">Receipts &amp; Logs</a></li>\n<li><a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/\">Ethereum JSON-RPC Specification</a></li>\n<li><a href=\"https://eips.ethereum.org/EIPS/eip-1193\">EIP-1193: Ethereum Provider JavaScript API</a></li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs\">Tevm API Documentation</a></li>\n</ul>\n","isPage":false,"text":"\n\nUsing with Viem\nUsing with Ethers\nManaging State\nReceipts &amp; Logs\nEthereum JSON-RPC Specification\nEIP-1193: Ethereum Provider JavaScript API\nTevm API Documentation\n\n","title":"Related Topics","titles":["JSON-RPC Support"]},"217":{"href":"/api/json-rpc#using-tevm-actions","html":"\n<p>Tevm provides a set of high-level actions that can be imported from <code>tevm/actions</code>. See the <a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/actions/docs\">complete actions documentation</a> for all available actions.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  tevmCall, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// See: https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/callHandler.md</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  tevmMine, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// See: https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/mineHandler.md</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  tevmGetAccount, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// See: https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/getAccountHandler.md</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  tevmSetAccount </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// See: https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/setAccountHandler.md</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/actions&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Call a contract</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> tevmCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  createTransaction: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Mine pending transactions</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> tevmMine</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get account state</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> account</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> tevmGetAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  blockTag: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;latest&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Set account state</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> tevmSetAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  balance: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  nonce: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  deployedBytecode: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n<p>For detailed type information, see:</p>\n<ul>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/type-aliases/CallParams.md\"><code>CallParams</code></a></li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/type-aliases/MineParams.md\"><code>MineParams</code></a></li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/type-aliases/GetAccountParams.md\"><code>GetAccountParams</code></a></li>\n<li><a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/type-aliases/SetAccountParams.md\"><code>SetAccountParams</code></a></li>\n</ul>\n<p>Note: By default, tevm actions require manual mining via <a href=\"https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/mineHandler.md\"><code>tevmMine()</code></a>. If you want transactions to be automatically applied, you can either:</p>\n<ol>\n<li>Use the lower level API <code>vm.runCall</code></li>\n<li>Configure the client with <code>miningConfig: { type: &#x27;auto&#x27; }</code></li>\n</ol>\n","isPage":false,"text":"\nTevm provides a set of high-level actions that can be imported from tevm/actions. See the complete actions documentation for all available actions.\nimport {\n  tevmCall, // See: https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/callHandler.md\n  tevmMine, // See: https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/mineHandler.md\n  tevmGetAccount, // See: https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/getAccountHandler.md\n  tevmSetAccount // See: https://github.com/evmts/tevm-monorepo/blob/main/packages/actions/docs/functions/setAccountHandler.md\n} from &#x27;tevm/actions&#x27;\nimport { createTevmNode } from &#x27;tevm&#x27;\n \nconst node = createTevmNode()\n \n// Call a contract\nconst result = await tevmCall(node, {\n  to: &#x27;0x...&#x27;,\n  data: &#x27;0x...&#x27;,\n  value: 0n,\n  createTransaction: true\n})\n \n// Mine pending transactions\nawait tevmMine(node)\n \n// Get account state\nconst account = await tevmGetAccount(node, {\n  address: &#x27;0x...&#x27;,\n  blockTag: &#x27;latest&#x27;\n})\n \n// Set account state\nawait tevmSetAccount(node, {\n  address: &#x27;0x...&#x27;,\n  balance: 100n,\n  nonce: 0n,\n  deployedBytecode: &#x27;0x...&#x27;\n})\nFor detailed type information, see:\n\nCallParams\nMineParams\nGetAccountParams\nSetAccountParams\n\nNote: By default, tevm actions require manual mining via tevmMine(). If you want transactions to be automatically applied, you can either:\n\nUse the lower level API vm.runCall\nConfigure the client with miningConfig: { type: &#x27;auto&#x27; }\n\n","title":"Using Tevm Actions","titles":["JSON-RPC Support"]},"218":{"href":"/api/json-rpc#optimistic-updates-with-receipt-manager","html":"\n<p>For more information on transaction receipts and logs, see the <a href=\"https://ethereum.org/en/developers/docs/transactions/transaction-receipts/\">Ethereum Receipts Documentation</a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { tevmCall, tevmMine } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/actions&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> receiptsManager</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getReceiptsManager</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Submit transaction</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">txHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> tevmCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  method: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;eth_sendTransaction&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  params: [tx],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  createTransaction: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get optimistic receipt</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> pendingReceipt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receiptsManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getReceiptByTxHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txHash)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Update UI optimistically</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">updateUI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(pendingReceipt)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Wait for real receipt</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> realReceipt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">request</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  method: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;eth_getTransactionReceipt&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  params: [txHash]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Eject optimistic tx if real receipt differs</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">receiptsAreDifferent</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(pendingReceipt, realReceipt)) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receiptsManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">removeReceipt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txHash)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  updateUI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(realReceipt)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Advanced: Rebase on new blocks</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">on</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;block&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">blockNumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Get new block</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> block</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">request</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    method: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;eth_getBlockByNumber&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    params: [blockNumber, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Get our pending transactions</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> pendingTxs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receiptsManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getPendingTransactions</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Rebase our transactions on top of new block</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> of</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> pendingTxs) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> tevmCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node, {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      ...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">tx,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      blockTag: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;pending&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Update receipt</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receiptsManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">putReceipt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tx.hash, result)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Mine rebased transactions</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> tevmMine</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>","isPage":false,"text":"\nFor more information on transaction receipts and logs, see the Ethereum Receipts Documentation.\nimport { createTevmNode } from &#x27;tevm&#x27;\nimport { tevmCall, tevmMine } from &#x27;tevm/actions&#x27;\n \nconst node = createTevmNode()\nconst receiptsManager = await node.getReceiptsManager()\n \n// Submit transaction\nconst { txHash } = await tevmCall(node, {\n  method: &#x27;eth_sendTransaction&#x27;,\n  params: [tx],\n  createTransaction: true\n})\n \n// Get optimistic receipt\nconst pendingReceipt = await receiptsManager.getReceiptByTxHash(txHash)\n \n// Update UI optimistically\nupdateUI(pendingReceipt)\n \n// Wait for real receipt\nconst realReceipt = await node.request({\n  method: &#x27;eth_getTransactionReceipt&#x27;,\n  params: [txHash]\n})\n \n// Eject optimistic tx if real receipt differs\nif (receiptsAreDifferent(pendingReceipt, realReceipt)) {\n  await receiptsManager.removeReceipt(txHash)\n  updateUI(realReceipt)\n}\n \n// Advanced: Rebase on new blocks\nnode.on(&#x27;block&#x27;, async (blockNumber) =&gt; {\n  // Get new block\n  const block = await node.request({\n    method: &#x27;eth_getBlockByNumber&#x27;,\n    params: [blockNumber, true]\n  })\n \n  // Get our pending transactions\n  const pendingTxs = await receiptsManager.getPendingTransactions()\n \n  // Rebase our transactions on top of new block\n  for (const tx of pendingTxs) {\n    const result = await tevmCall(node, {\n      ...tx,\n      blockTag: &#x27;pending&#x27;\n    })\n \n    // Update receipt\n    await receiptsManager.putReceipt(tx.hash, result)\n  }\n \n  // Mine rebased transactions\n  await tevmMine(node)\n})","title":"Optimistic Updates with Receipt Manager","titles":["JSON-RPC Support"]},"219":{"href":"/api/memory-client#memoryclient","html":"</header>\n<p><strong>MemoryClient</strong> combines a fully in-memory Ethereum node powered by <a href=\"/introduction/what-is-tevm-node\">Tevm Node</a> with <a href=\"https://viem.sh/\">viem</a>. It includes:</p>\n<ol>\n<li><strong>Public actions</strong> – All standard viem <a href=\"https://viem.sh/docs/actions/public/introduction\">public actions</a>.</li>\n<li><strong>Wallet actions</strong> – Sign transactions, send ETH, deploy contracts, etc.</li>\n<li><strong>Test actions</strong> – Ganache/Hardhat-like commands (<code>mine</code>, <code>setBalance</code>, <code>impersonateAccount</code>, etc.).</li>\n<li><strong>Tevm Node&#x27;s own</strong> advanced actions – e.g. <code>tevmCall</code>, <code>tevmContract</code>, <code>tevmDeploy</code>.</li>\n</ol>\n<aside data-callout=\"true\"><p><strong>Power vs. Modularity</strong>\nWhile <strong>MemoryClient</strong> is the most convenient way to use Tevm, it&#x27;s less tree-shakeable than the lower-level approach (<code>createTevmNode</code> + separate &quot;actions&quot;). For many dev/test use cases, MemoryClient&#x27;s all-in-one experience is ideal.</p></aside>\n","isPage":true,"text":"\nMemoryClient combines a fully in-memory Ethereum node powered by Tevm Node with viem. It includes:\n\nPublic actions – All standard viem public actions.\nWallet actions – Sign transactions, send ETH, deploy contracts, etc.\nTest actions – Ganache/Hardhat-like commands (mine, setBalance, impersonateAccount, etc.).\nTevm Node&#x27;s own advanced actions – e.g. tevmCall, tevmContract, tevmDeploy.\n\nPower vs. Modularity\nWhile MemoryClient is the most convenient way to use Tevm, it&#x27;s less tree-shakeable than the lower-level approach (createTevmNode + separate &quot;actions&quot;). For many dev/test use cases, MemoryClient&#x27;s all-in-one experience is ideal.\n","title":"MemoryClient","titles":[]},"220":{"href":"/api/memory-client#installation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> tevm</span></span></code></pre>\n","isPage":false,"text":"\nnpm install tevm\n","title":"Installation","titles":["MemoryClient"]},"221":{"href":"/api/memory-client#basic-usage","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createMemoryClient } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create a simple memory client</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createMemoryClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get current block number</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> blockNumber</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBlockNumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n","isPage":false,"text":"\nimport { createMemoryClient } from &#x27;tevm&#x27;\n \n// Create a simple memory client\nconst client = createMemoryClient()\n \n// Get current block number\nconst blockNumber = await client.getBlockNumber()\n","title":"Basic Usage","titles":["MemoryClient"]},"222":{"href":"/api/memory-client#forking","html":"\n<p>Fork from any EVM-compatible network:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createMemoryClient, http } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { optimism } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/common&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> forkedClient</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createMemoryClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  fork: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transport: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">http</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;https://mainnet.optimism.io&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)({}),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    blockTag: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;latest&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  common: optimism,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nFork from any EVM-compatible network:\nimport { createMemoryClient, http } from &#x27;tevm&#x27;\nimport { optimism } from &#x27;tevm/common&#x27;\n \nconst forkedClient = createMemoryClient({\n  fork: {\n    transport: http(&#x27;https://mainnet.optimism.io&#x27;)({}),\n    blockTag: &#x27;latest&#x27;,\n  },\n  common: optimism,\n})\n","title":"Forking","titles":["MemoryClient"]},"223":{"href":"/api/memory-client#contract-interactions","html":"\n","isPage":false,"text":"\n","title":"Contract Interactions","titles":["MemoryClient"]},"224":{"href":"/api/memory-client#deploying-contracts","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { SimpleContract } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/contract&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { privateKeyToAccount } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;viem/accounts&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signerAccount</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> privateKeyToAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> memoryClient</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createMemoryClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  account: signerAccount,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Deploy SimpleContract with initial value = 2</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txHash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> memoryClient.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deployContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(SimpleContract.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deploy</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> memoryClient.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">mine</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ blocks: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get the deployment receipt</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> receipt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> memoryClient.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getTransactionReceipt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ hash: txHash })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contractAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receipt.contractAddress</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create contract instance</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> SimpleContract.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">withAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(contractAddress)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Read from the contract</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> currentValue</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> memoryClient.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">readContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(contract.read.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Write to the contract</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> setHash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> memoryClient.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">writeContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(contract.write.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">420</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> memoryClient.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">mine</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ blocks: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> })</span></span></code></pre>\n","isPage":false,"text":"\nimport { SimpleContract } from &#x27;tevm/contract&#x27;\nimport { privateKeyToAccount } from &#x27;viem/accounts&#x27;\n \nconst signerAccount = privateKeyToAccount(&#x27;0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&#x27;)\nconst memoryClient = createMemoryClient({\n  account: signerAccount,\n})\n \n// Deploy SimpleContract with initial value = 2\nconst txHash = await memoryClient.deployContract(SimpleContract.deploy(2n))\nawait memoryClient.mine({ blocks: 1 })\n \n// Get the deployment receipt\nconst receipt = await memoryClient.getTransactionReceipt({ hash: txHash })\nconst contractAddress = receipt.contractAddress\n \n// Create contract instance\nconst contract = SimpleContract.withAddress(contractAddress)\n \n// Read from the contract\nconst currentValue = await memoryClient.readContract(contract.read.get())\n \n// Write to the contract\nconst setHash = await memoryClient.writeContract(contract.write.set(420n))\nawait memoryClient.mine({ blocks: 1 })\n","title":"Deploying Contracts","titles":["MemoryClient","Contract Interactions"]},"225":{"href":"/api/memory-client#interacting-with-existing-contracts","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { ERC20 } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/contract&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// DAI on Optimism</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> Dai</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ERC20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">withAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Read balance of an address</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> balance</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> memoryClient.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">readContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  Dai.read.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">balanceOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0xf0d4c12a5768d806021f80a262b4d39d26c58b8d&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nimport { ERC20 } from &#x27;tevm/contract&#x27;\n \n// DAI on Optimism\nconst Dai = ERC20.withAddress(&#x27;0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1&#x27;)\n \n// Read balance of an address\nconst balance = await memoryClient.readContract(\n  Dai.read.balanceOf(&#x27;0xf0d4c12a5768d806021f80a262b4d39d26c58b8d&#x27;)\n)\n","title":"Interacting with Existing Contracts","titles":["MemoryClient","Contract Interactions"]},"226":{"href":"/api/memory-client#test-actions","html":"\n","isPage":false,"text":"\n","title":"Test Actions","titles":["MemoryClient"]},"227":{"href":"/api/memory-client#time-manipulation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Increase block timestamp</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">increaseTime</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ seconds: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3600</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 1 hour</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Set next block timestamp</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setNextBlockTimestamp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ timestamp: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1234567890</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> })</span></span></code></pre>\n","isPage":false,"text":"\n// Increase block timestamp\nawait client.increaseTime({ seconds: 3600 }) // 1 hour\n \n// Set next block timestamp\nawait client.setNextBlockTimestamp({ timestamp: 1234567890n })\n","title":"Time Manipulation","titles":["MemoryClient","Test Actions"]},"228":{"href":"/api/memory-client#state-snapshots","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Take snapshot</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> snap</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">snapshot</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Make changes...</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Revert to snapshot</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">revert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ id: snap })</span></span></code></pre>\n","isPage":false,"text":"\n// Take snapshot\nconst snap = await client.snapshot()\n \n// Make changes...\n \n// Revert to snapshot\nawait client.revert({ id: snap })\n","title":"State Snapshots","titles":["MemoryClient","Test Actions"]},"229":{"href":"/api/memory-client#account-management","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Set account balance</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setBalance</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseEther</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;100&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Impersonate account</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">impersonateAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Stop impersonating</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stopImpersonatingAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> })</span></span></code></pre>\n","isPage":false,"text":"\n// Set account balance\nawait client.setBalance({\n  address: &#x27;0x...&#x27;,\n  value: parseEther(&#x27;100&#x27;)\n})\n \n// Impersonate account\nawait client.impersonateAccount({ address: &#x27;0x...&#x27; })\n \n// Stop impersonating\nawait client.stopImpersonatingAccount({ address: &#x27;0x...&#x27; })\n","title":"Account Management","titles":["MemoryClient","Test Actions"]},"230":{"href":"/api/memory-client#mining-configuration","html":"\n<p>Configure how transactions are processed:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Auto-mine every transaction</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> autoMiningClient</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createMemoryClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  miningConfig: { type: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;auto&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Mine on interval</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> intervalMiningClient</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createMemoryClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  miningConfig: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    type: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;interval&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    interval: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // 1 second</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Manual mining</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> manualMiningClient</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createMemoryClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  miningConfig: { type: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;manual&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Mine blocks manually</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> manualMiningClient.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">mine</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ blocks: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> })</span></span></code></pre>\n","isPage":false,"text":"\nConfigure how transactions are processed:\n// Auto-mine every transaction\nconst autoMiningClient = createMemoryClient({\n  miningConfig: { type: &#x27;auto&#x27; }\n})\n \n// Mine on interval\nconst intervalMiningClient = createMemoryClient({\n  miningConfig: {\n    type: &#x27;interval&#x27;,\n    interval: 1000 // 1 second\n  }\n})\n \n// Manual mining\nconst manualMiningClient = createMemoryClient({\n  miningConfig: { type: &#x27;manual&#x27; }\n})\n \n// Mine blocks manually\nawait manualMiningClient.mine({ blocks: 1 })\n","title":"Mining Configuration","titles":["MemoryClient"]},"231":{"href":"/api/memory-client#error-handling","html":"\n<p>The client includes comprehensive error handling:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">writeContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(contract.write.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(to, amount))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (e) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (e.message.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">includes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;insufficient funds&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Handle insufficient funds error</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  throw</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> e</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe client includes comprehensive error handling:\ntry {\n  await client.writeContract(contract.write.transfer(to, amount))\n} catch (e) {\n  if (e.message.includes(&#x27;insufficient funds&#x27;)) {\n    // Handle insufficient funds error\n  }\n  throw e\n}\n","title":"Error Handling","titles":["MemoryClient"]},"232":{"href":"/api/memory-client#see-also","html":"\n<ul>\n<li><a href=\"../introduction/what-is-tevm-node\">What is Tevm Node?</a></li>\n<li><a href=\"../core/create-tevm-node\">Creating a Node</a></li>\n<li><a href=\"https://viem.sh\">Viem Documentation</a></li>\n</ul>","isPage":false,"text":"\n\nWhat is Tevm Node?\nCreating a Node\nViem Documentation\n","title":"See Also","titles":["MemoryClient"]},"233":{"href":"/api/receipt-manager#tevmreceipt-manager","html":"</header>\n<p>The <code>@tevm/receipt-manager</code> package provides functionality for managing Ethereum transaction receipts, including storage, retrieval, and querying of transaction receipts and logs.</p>\n","isPage":true,"text":"\nThe @tevm/receipt-manager package provides functionality for managing Ethereum transaction receipts, including storage, retrieval, and querying of transaction receipts and logs.\n","title":"@tevm/receipt-manager","titles":[]},"234":{"href":"/api/receipt-manager#installation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> @tevm/receipt-manager</span></span></code></pre>\n","isPage":false,"text":"\nnpm install @tevm/receipt-manager\n","title":"Installation","titles":["@tevm/receipt-manager"]},"235":{"href":"/api/receipt-manager#main-components","html":"\n","isPage":false,"text":"\n","title":"Main Components","titles":["@tevm/receipt-manager"]},"236":{"href":"/api/receipt-manager#receiptsmanager","html":"\n<p>The main class for managing transaction receipts and logs.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { ReceiptsManager } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/receipt-manager&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> receiptsManager</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> ReceiptsManager</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(mapDb, chain)</span></span></code></pre>\n","isPage":false,"text":"\nThe main class for managing transaction receipts and logs.\nimport { ReceiptsManager } from &#x27;@tevm/receipt-manager&#x27;\n \nconst receiptsManager = new ReceiptsManager(mapDb, chain)\n","title":"ReceiptsManager","titles":["@tevm/receipt-manager","Main Components"]},"237":{"href":"/api/receipt-manager#methods","html":"\n<ul>\n<li><code>saveReceipts(block: Block, receipts: TxReceipt[]): Promise&lt;void&gt;</code> - Saves receipts to the database</li>\n<li><code>deleteReceipts(block: Block): Promise&lt;void&gt;</code> - Deletes receipts for a block</li>\n<li><code>getReceipts(blockHash: Uint8Array, calcBloom?: boolean, includeTxType?: boolean): Promise&lt;TxReceipt[] | TxReceiptWithType[]&gt;</code> - Retrieves receipts for a block</li>\n<li><code>getReceiptByTxHash(txHash: Uint8Array): Promise&lt;GetReceiptByTxHashReturn | null&gt;</code> - Gets receipt by transaction hash</li>\n<li><code>getLogs(from: Block, to: Block, addresses?: Uint8Array[], topics?: (Uint8Array | Uint8Array[] | null)[]): Promise&lt;GetLogsReturn&gt;</code> - Retrieves logs based on filter criteria</li>\n</ul>\n","isPage":false,"text":"\n\nsaveReceipts(block: Block, receipts: TxReceipt[]): Promise&lt;void&gt; - Saves receipts to the database\ndeleteReceipts(block: Block): Promise&lt;void&gt; - Deletes receipts for a block\ngetReceipts(blockHash: Uint8Array, calcBloom?: boolean, includeTxType?: boolean): Promise&lt;TxReceipt[] | TxReceiptWithType[]&gt; - Retrieves receipts for a block\ngetReceiptByTxHash(txHash: Uint8Array): Promise&lt;GetReceiptByTxHashReturn | null&gt; - Gets receipt by transaction hash\ngetLogs(from: Block, to: Block, addresses?: Uint8Array[], topics?: (Uint8Array | Uint8Array[] | null)[]): Promise&lt;GetLogsReturn&gt; - Retrieves logs based on filter criteria\n\n","title":"Methods","titles":["@tevm/receipt-manager","Main Components","ReceiptsManager"]},"238":{"href":"/api/receipt-manager#receipt-types","html":"\n","isPage":false,"text":"\n","title":"Receipt Types","titles":["@tevm/receipt-manager","Main Components"]},"239":{"href":"/api/receipt-manager#basetxreceipt","html":"\n<p>Common fields for all transaction receipts:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> BaseTxReceipt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Cumulative gas used in the block including this tx</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  cumulativeBlockGasUsed</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Bloom bitvector</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  bitvector</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Logs emitted</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  logs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> EthjsLog</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nCommon fields for all transaction receipts:\ninterface BaseTxReceipt {\n  // Cumulative gas used in the block including this tx\n  cumulativeBlockGasUsed: bigint\n  // Bloom bitvector\n  bitvector: Uint8Array\n  // Logs emitted\n  logs: EthjsLog[]\n}\n","title":"BaseTxReceipt","titles":["@tevm/receipt-manager","Main Components","Receipt Types"]},"240":{"href":"/api/receipt-manager#prebyzantiumtxreceipt","html":"\n<p>Receipt type for pre-Byzantium transactions:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> PreByzantiumTxReceipt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> extends</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> BaseTxReceipt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Intermediary state root</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  stateRoot</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nReceipt type for pre-Byzantium transactions:\ninterface PreByzantiumTxReceipt extends BaseTxReceipt {\n  // Intermediary state root\n  stateRoot: Uint8Array\n}\n","title":"PreByzantiumTxReceipt","titles":["@tevm/receipt-manager","Main Components","Receipt Types"]},"241":{"href":"/api/receipt-manager#postbyzantiumtxreceipt","html":"\n<p>Receipt type for post-Byzantium transactions:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> PostByzantiumTxReceipt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> extends</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> BaseTxReceipt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Status of transaction, 1 if successful, 0 if failed</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  status</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nReceipt type for post-Byzantium transactions:\ninterface PostByzantiumTxReceipt extends BaseTxReceipt {\n  // Status of transaction, 1 if successful, 0 if failed\n  status: 0 | 1\n}\n","title":"PostByzantiumTxReceipt","titles":["@tevm/receipt-manager","Main Components","Receipt Types"]},"242":{"href":"/api/receipt-manager#eip4844blobtxreceipt","html":"\n<p>Receipt type for EIP-4844 blob transactions:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> EIP4844BlobTxReceipt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> extends</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> PostByzantiumTxReceipt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Blob gas consumed by a transaction</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  blobGasUsed</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Blob gas price for block transaction was included in</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  blobGasPrice</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nReceipt type for EIP-4844 blob transactions:\ninterface EIP4844BlobTxReceipt extends PostByzantiumTxReceipt {\n  // Blob gas consumed by a transaction\n  blobGasUsed: bigint\n  // Blob gas price for block transaction was included in\n  blobGasPrice: bigint\n}\n","title":"EIP4844BlobTxReceipt","titles":["@tevm/receipt-manager","Main Components","Receipt Types"]},"243":{"href":"/api/receipt-manager#usage-examples","html":"\n","isPage":false,"text":"\n","title":"Usage Examples","titles":["@tevm/receipt-manager"]},"244":{"href":"/api/receipt-manager#saving-and-retrieving-receipts","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Save receipts for a block</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receiptsManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">saveReceipts</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(block, receipts)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get receipts for a block</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> receipts</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receiptsManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getReceipts</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(blockHash)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get receipts with bloom filter calculation</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> receiptsWithBloom</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receiptsManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getReceipts</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(blockHash, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get receipts with transaction type</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> receiptsWithType</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receiptsManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getReceipts</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(blockHash, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\n// Save receipts for a block\nawait receiptsManager.saveReceipts(block, receipts)\n \n// Get receipts for a block\nconst receipts = await receiptsManager.getReceipts(blockHash)\n \n// Get receipts with bloom filter calculation\nconst receiptsWithBloom = await receiptsManager.getReceipts(blockHash, true)\n \n// Get receipts with transaction type\nconst receiptsWithType = await receiptsManager.getReceipts(blockHash, false, true)\n","title":"Saving and Retrieving Receipts","titles":["@tevm/receipt-manager","Usage Examples"]},"245":{"href":"/api/receipt-manager#working-with-transaction-receipts","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get receipt by transaction hash</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> receipt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receiptsManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getReceiptByTxHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txHash)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (receipt) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">txReceipt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">blockHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">txIndex</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">logIndex</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receipt</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Transaction status:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, txReceipt.status)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Block hash:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, blockHash)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Transaction index:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, txIndex)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Log index:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, logIndex)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\n// Get receipt by transaction hash\nconst receipt = await receiptsManager.getReceiptByTxHash(txHash)\nif (receipt) {\n  const [txReceipt, blockHash, txIndex, logIndex] = receipt\n  console.log(&#x27;Transaction status:&#x27;, txReceipt.status)\n  console.log(&#x27;Block hash:&#x27;, blockHash)\n  console.log(&#x27;Transaction index:&#x27;, txIndex)\n  console.log(&#x27;Log index:&#x27;, logIndex)\n}\n","title":"Working with Transaction Receipts","titles":["@tevm/receipt-manager","Usage Examples"]},"246":{"href":"/api/receipt-manager#querying-logs","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get logs between blocks with optional address and topic filters</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> logs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receiptsManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getLogs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  fromBlock,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  toBlock,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  [address], </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Optional address filter</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  [[topic1, topic2]] </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Optional topic filters</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Process logs</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">logs.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">forEach</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(({ </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">tx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">txIndex</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">logIndex</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Log address:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, log[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Log topics:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, log[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Log data:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, log[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Block number:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, block.header.number)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Transaction:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, tx)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Indices:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, txIndex, logIndex)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\n// Get logs between blocks with optional address and topic filters\nconst logs = await receiptsManager.getLogs(\n  fromBlock,\n  toBlock,\n  [address], // Optional address filter\n  [[topic1, topic2]] // Optional topic filters\n)\n \n// Process logs\nlogs.forEach(({ log, block, tx, txIndex, logIndex }) =&gt; {\n  console.log(&#x27;Log address:&#x27;, log[0])\n  console.log(&#x27;Log topics:&#x27;, log[1])\n  console.log(&#x27;Log data:&#x27;, log[2])\n  console.log(&#x27;Block number:&#x27;, block.header.number)\n  console.log(&#x27;Transaction:&#x27;, tx)\n  console.log(&#x27;Indices:&#x27;, txIndex, logIndex)\n})\n","title":"Querying Logs","titles":["@tevm/receipt-manager","Usage Examples"]},"247":{"href":"/api/receipt-manager#constants","html":"\n<p>The ReceiptsManager includes several constants for limiting log queries:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Maximum number of logs to return</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">GET_LOGS_LIMIT</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 10000</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Maximum size of getLogs response in megabytes</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">GET_LOGS_LIMIT_MEGABYTES</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 150</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Maximum block range for getLogs</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">GET_LOGS_BLOCK_RANGE_LIMIT</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 2500</span></span></code></pre>\n","isPage":false,"text":"\nThe ReceiptsManager includes several constants for limiting log queries:\n// Maximum number of logs to return\nGET_LOGS_LIMIT = 10000\n \n// Maximum size of getLogs response in megabytes\nGET_LOGS_LIMIT_MEGABYTES = 150\n \n// Maximum block range for getLogs\nGET_LOGS_BLOCK_RANGE_LIMIT = 2500\n","title":"Constants","titles":["@tevm/receipt-manager"]},"248":{"href":"/api/receipt-manager#see-also","html":"\n<ul>\n<li><a href=\"https://ethereum.org/en/developers/docs/transactions/#transaction-receipts\">Ethereum Transaction Receipts</a></li>\n<li><a href=\"https://eips.ethereum.org/EIPS/eip-658\">EIP-658: Embedding transaction status code in receipts</a></li>\n<li><a href=\"https://eips.ethereum.org/EIPS/eip-4844\">EIP-4844: Shard Blob Transactions</a></li>\n</ul>","isPage":false,"text":"\n\nEthereum Transaction Receipts\nEIP-658: Embedding transaction status code in receipts\nEIP-4844: Shard Blob Transactions\n","title":"See Also","titles":["@tevm/receipt-manager"]},"249":{"href":"/api/state#tevmstate","html":"</header>\n<blockquote>\n<p><strong>Generated API Documentation</strong>: View the full API documentation in the <a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/state/docs\">evmts/tevm-monorepo/packages/state/docs</a> folder.</p>\n</blockquote>\n<p>The <code>@tevm/state</code> package provides functionality for managing Ethereum state, including account storage, contract code, and state transitions. It implements the EVM state manager interface and adds Tevm-specific features.</p>\n","isPage":true,"text":"\n\nGenerated API Documentation: View the full API documentation in the evmts/tevm-monorepo/packages/state/docs folder.\n\nThe @tevm/state package provides functionality for managing Ethereum state, including account storage, contract code, and state transitions. It implements the EVM state manager interface and adds Tevm-specific features.\n","title":"@tevm/state","titles":[]},"250":{"href":"/api/state#installation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> @tevm/state</span></span></code></pre>\n<p>Or use <code>tevm/state</code> if you have the main <code>tevm</code> package installed</p>\n","isPage":false,"text":"\nnpm install @tevm/state\nOr use tevm/state if you have the main tevm package installed\n","title":"Installation","titles":["@tevm/state"]},"251":{"href":"/api/state#main-components","html":"\n","isPage":false,"text":"\n","title":"Main Components","titles":["@tevm/state"]},"252":{"href":"/api/state#statemanager","html":"\n<p>The main interface for managing Ethereum state:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> StateManager</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  ready</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  getAccountAddresses</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  deepCopy</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">StateManager</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  dumpCanonicalGenesis</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TevmState</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  clearCaches</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> void</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  getAccount</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Account</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  putAccount</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">account</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Account</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">void</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  deleteAccount</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">void</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  modifyAccountFields</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">fields</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">nonce</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">balance</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">void</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  getContractCode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  putContractCode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">code</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">void</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  getContractStorage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">key</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  putContractStorage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">key</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">value</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">void</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  clearContractStorage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">void</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  checkpoint</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">void</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  commit</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">void</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  revert</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">void</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  getStateRoot</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  setStateRoot</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">root</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">void</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  hasStateRoot</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">root</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">boolean</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  dumpStorage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">StorageDump</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  dumpStorageRange</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">startKey</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">limit</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">StorageRange</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  getProof</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">storageKeys</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[]) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Proof</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe main interface for managing Ethereum state:\ninterface StateManager {\n  ready: () =&gt; Promise&lt;true&gt;\n  getAccountAddresses: () =&gt; Set&lt;Address&gt;\n  deepCopy: () =&gt; Promise&lt;StateManager&gt;\n  dumpCanonicalGenesis: () =&gt; Promise&lt;TevmState&gt;\n  clearCaches: () =&gt; void\n  getAccount: (address: Address) =&gt; Promise&lt;Account&gt;\n  putAccount: (address: Address, account: Account) =&gt; Promise&lt;void&gt;\n  deleteAccount: (address: Address) =&gt; Promise&lt;void&gt;\n  modifyAccountFields: (address: Address, fields: { nonce?: bigint; balance?: bigint }) =&gt; Promise&lt;void&gt;\n  getContractCode: (address: Address) =&gt; Promise&lt;Uint8Array&gt;\n  putContractCode: (address: Address, code: Uint8Array) =&gt; Promise&lt;void&gt;\n  getContractStorage: (address: Address, key: Uint8Array) =&gt; Promise&lt;Uint8Array&gt;\n  putContractStorage: (address: Address, key: Uint8Array, value: Uint8Array) =&gt; Promise&lt;void&gt;\n  clearContractStorage: (address: Address) =&gt; Promise&lt;void&gt;\n  checkpoint: () =&gt; Promise&lt;void&gt;\n  commit: () =&gt; Promise&lt;void&gt;\n  revert: () =&gt; Promise&lt;void&gt;\n  getStateRoot: () =&gt; Promise&lt;Uint8Array&gt;\n  setStateRoot: (root: Uint8Array) =&gt; Promise&lt;void&gt;\n  hasStateRoot: (root: Uint8Array) =&gt; Promise&lt;boolean&gt;\n  dumpStorage: (address: Address) =&gt; Promise&lt;StorageDump&gt;\n  dumpStorageRange: (address: Address, startKey: bigint, limit: number) =&gt; Promise&lt;StorageRange&gt;\n  getProof: (address: Address, storageKeys: Uint8Array[]) =&gt; Promise&lt;Proof&gt;\n}\n","title":"StateManager","titles":["@tevm/state","Main Components"]},"253":{"href":"/api/state#creating-a-state-manager","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createStateManager } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/state&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> stateManager</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createStateManager</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  loggingLevel: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;info&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nimport { createStateManager } from &#x27;tevm/state&#x27;\n \nconst stateManager = createStateManager({\n  loggingLevel: &#x27;info&#x27;\n})\n","title":"Creating a State Manager","titles":["@tevm/state","Main Components"]},"254":{"href":"/api/state#core-functionality","html":"\n","isPage":false,"text":"\n","title":"Core Functionality","titles":["@tevm/state"]},"255":{"href":"/api/state#account-management","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createStateManager } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/state&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createAddress } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/address&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> stateManager</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createStateManager</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({})</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234567890123456789012345678901234567890&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get account state</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> account</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Update account</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">putAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address, account)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Delete account</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deleteAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Modify specific account fields</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">modifyAccountFields</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  nonce: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  balance: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nimport { createStateManager } from &#x27;tevm/state&#x27;\nimport { createAddress } from &#x27;tevm/address&#x27;\n \nconst stateManager = createStateManager({})\nconst address = createAddress(&#x27;0x1234567890123456789012345678901234567890&#x27;)\n \n// Get account state\nconst account = await stateManager.getAccount(address)\n \n// Update account\nawait stateManager.putAccount(address, account)\n \n// Delete account\nawait stateManager.deleteAccount(address)\n \n// Modify specific account fields\nawait stateManager.modifyAccountFields(address, {\n  nonce: 1n,\n  balance: 100n\n})\n","title":"Account Management","titles":["@tevm/state","Core Functionality"]},"256":{"href":"/api/state#contract-management","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createStateManager } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/state&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createAddress } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/address&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { hexToBytes } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/utils&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> stateManager</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createStateManager</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({})</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234567890123456789012345678901234567890&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> key</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> hexToBytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x0000000000000000000000000000000000000000000000000000000000000001&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> value</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> hexToBytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x0000000000000000000000000000000000000000000000000000000000000002&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> code</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get and set contract code</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">putContractCode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address, code)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> retrievedCode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getContractCode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get and set contract storage</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">putContractStorage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address, key, value)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> retrievedValue</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getContractStorage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address, key)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Clear contract storage</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">clearContractStorage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address)</span></span></code></pre>\n","isPage":false,"text":"\nimport { createStateManager } from &#x27;tevm/state&#x27;\nimport { createAddress } from &#x27;tevm/address&#x27;\nimport { hexToBytes } from &#x27;tevm/utils&#x27;\n \nconst stateManager = createStateManager({})\nconst address = createAddress(&#x27;0x1234567890123456789012345678901234567890&#x27;)\nconst key = hexToBytes(&#x27;0x0000000000000000000000000000000000000000000000000000000000000001&#x27;)\nconst value = hexToBytes(&#x27;0x0000000000000000000000000000000000000000000000000000000000000002&#x27;)\nconst code = new Uint8Array([1, 2, 3])\n \n// Get and set contract code\nawait stateManager.putContractCode(address, code)\nconst retrievedCode = await stateManager.getContractCode(address)\n \n// Get and set contract storage\nawait stateManager.putContractStorage(address, key, value)\nconst retrievedValue = await stateManager.getContractStorage(address, key)\n \n// Clear contract storage\nawait stateManager.clearContractStorage(address)\n","title":"Contract Management","titles":["@tevm/state","Core Functionality"]},"257":{"href":"/api/state#state-management","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create checkpoint</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">checkpoint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Commit changes</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">commit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Revert to last checkpoint</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">revert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get state root</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> root</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getStateRoot</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Set state root</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setStateRoot</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(root)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Check if state root exists</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> exists</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">hasStateRoot</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(root)</span></span></code></pre>\n","isPage":false,"text":"\n// Create checkpoint\nawait stateManager.checkpoint()\n \n// Commit changes\nawait stateManager.commit()\n \n// Revert to last checkpoint\nawait stateManager.revert()\n \n// Get state root\nconst root = await stateManager.getStateRoot()\n \n// Set state root\nawait stateManager.setStateRoot(root)\n \n// Check if state root exists\nconst exists = await stateManager.hasStateRoot(root)\n","title":"State Management","titles":["@tevm/state","Core Functionality"]},"258":{"href":"/api/state#state-dumping-and-proofs","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Dump canonical genesis state</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> state</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">dumpCanonicalGenesis</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Dump storage for address</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> storage</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">dumpStorage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Dump storage range</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> range</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">dumpStorageRange</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">4</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get merkle proof</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> proof</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getProof</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address, storageKeys)</span></span></code></pre>\n","isPage":false,"text":"\n// Dump canonical genesis state\nconst state = await stateManager.dumpCanonicalGenesis()\n \n// Dump storage for address\nconst storage = await stateManager.dumpStorage(address)\n \n// Dump storage range\nconst range = await stateManager.dumpStorageRange(address, 4n, 10)\n \n// Get merkle proof\nconst proof = await stateManager.getProof(address, storageKeys)\n","title":"State Dumping and Proofs","titles":["@tevm/state","Core Functionality"]},"259":{"href":"/api/state#cache-management","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Clear all caches</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">clearCaches</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Deep copy (independent state)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> deepCopy</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deepCopy</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n","isPage":false,"text":"\n// Clear all caches\nstateManager.clearCaches()\n \n// Deep copy (independent state)\nconst deepCopy = await stateManager.deepCopy()\n","title":"Cache Management","titles":["@tevm/state","Core Functionality"]},"260":{"href":"/api/state#best-practices","html":"\n<ol>\n<li>\n<strong>Always await ready()</strong>\n</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> stateManager</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createStateManager</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({})</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ready</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n<ol start=\"2\">\n<li>\n<strong>Use checkpoints for atomic operations</strong>\n</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">checkpoint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Perform state changes</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">commit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">revert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n<ol start=\"3\">\n<li>\n<strong>Clear caches when memory usage is high</strong>\n</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Periodically clear caches</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">clearCaches</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n<ol start=\"4\">\n<li>\n<strong>Use proper error handling</strong>\n</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">instanceof</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> AccountNotFoundError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Handle missing account</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Handle other errors</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\n\n\nAlways await ready()\n\n\nconst stateManager = createStateManager({})\nawait stateManager.ready()\n\n\nUse checkpoints for atomic operations\n\n\nawait stateManager.checkpoint()\ntry {\n  // Perform state changes\n  await stateManager.commit()\n} catch (error) {\n  await stateManager.revert()\n}\n\n\nClear caches when memory usage is high\n\n\n// Periodically clear caches\nstateManager.clearCaches()\n\n\nUse proper error handling\n\n\ntry {\n  await stateManager.getAccount(address)\n} catch (error) {\n  if (error instanceof AccountNotFoundError) {\n    // Handle missing account\n  }\n  // Handle other errors\n}\n","title":"Best Practices","titles":["@tevm/state"]},"261":{"href":"/api/state#related-topics","html":"\n<ul>\n<li><a href=\"https://ethereum.org/en/developers/docs/evm/state\">EVM State Documentation</a></li>\n<li><a href=\"https://ethereum.org/en/developers/docs/data-structures-and-encoding/patricia-merkle-trie\">Merkle Patricia Tree</a></li>\n<li><a href=\"https://ethereum.org/en/developers/docs/accounts\">Account Management</a></li>\n</ul>","isPage":false,"text":"\n\nEVM State Documentation\nMerkle Patricia Tree\nAccount Management\n","title":"Related Topics","titles":["@tevm/state"]},"262":{"href":"/api/tx#tevmtx","html":"</header>\n<blockquote>\n<p><strong>Generated API Documentation</strong>: View the full API documentation in the <a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/tx/docs\">evmts/tevm-monorepo/packages/tx/docs</a> folder.</p>\n</blockquote>\n<p>The <code>@tevm/tx</code> package provides a custom implementation of Ethereum transactions, extending the functionality of <code>@ethereumjs/tx</code>. It includes support for various transaction types and introduces impersonated transactions unique to Tevm.</p>\n","isPage":true,"text":"\n\nGenerated API Documentation: View the full API documentation in the evmts/tevm-monorepo/packages/tx/docs folder.\n\nThe @tevm/tx package provides a custom implementation of Ethereum transactions, extending the functionality of @ethereumjs/tx. It includes support for various transaction types and introduces impersonated transactions unique to Tevm.\n","title":"@tevm/tx","titles":[]},"263":{"href":"/api/tx#installation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> @tevm/tx</span></span></code></pre>\n","isPage":false,"text":"\nnpm install @tevm/tx\n","title":"Installation","titles":["@tevm/tx"]},"264":{"href":"/api/tx#main-components","html":"\n","isPage":false,"text":"\n","title":"Main Components","titles":["@tevm/tx"]},"265":{"href":"/api/tx#transaction-types","html":"\n<p>The package supports multiple transaction types:</p>\n<ul>\n<li><strong>LegacyTransaction</strong>: Pre-EIP-2718 transactions</li>\n<li><strong>AccessListEIP2930Transaction</strong>: Type 1 transactions with access lists (EIP-2930)</li>\n<li><strong>FeeMarketEIP1559Transaction</strong>: Type 2 transactions with fee market (EIP-1559)</li>\n<li><strong>BlobEIP4844Transaction</strong>: Type 3 transactions with blob data (EIP-4844)</li>\n<li><strong>ImpersonatedTx</strong>: Tevm-specific transaction type for impersonating accounts</li>\n</ul>\n","isPage":false,"text":"\nThe package supports multiple transaction types:\n\nLegacyTransaction: Pre-EIP-2718 transactions\nAccessListEIP2930Transaction: Type 1 transactions with access lists (EIP-2930)\nFeeMarketEIP1559Transaction: Type 2 transactions with fee market (EIP-1559)\nBlobEIP4844Transaction: Type 3 transactions with blob data (EIP-4844)\nImpersonatedTx: Tevm-specific transaction type for impersonating accounts\n\n","title":"Transaction Types","titles":["@tevm/tx","Main Components"]},"266":{"href":"/api/tx#transactionfactory","html":"\n<p>A utility class for creating transactions from various data formats:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { TransactionFactory } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/tx&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create from serialized data</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TransactionFactory.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">fromSerializedTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(serializedData)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create from RPC data</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TransactionFactory.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">fromRPC</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(rpcTxData)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create from block body data</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TransactionFactory.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">fromBlockBodyData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(blockData)</span></span></code></pre>\n","isPage":false,"text":"\nA utility class for creating transactions from various data formats:\nimport { TransactionFactory } from &#x27;@tevm/tx&#x27;\n \n// Create from serialized data\nconst tx = TransactionFactory.fromSerializedTx(serializedData)\n \n// Create from RPC data\nconst tx = await TransactionFactory.fromRPC(rpcTxData)\n \n// Create from block body data\nconst tx = TransactionFactory.fromBlockBodyData(blockData)\n","title":"TransactionFactory","titles":["@tevm/tx","Main Components"]},"267":{"href":"/api/tx#impersonated-transactions","html":"\n<p>A unique feature of Tevm that allows simulating transactions as if they were sent from any address:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createImpersonatedTx } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/tx&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createImpersonatedTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  impersonatedAddress: address,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: recipient,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: value,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: data,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // ... other EIP-1559 transaction fields</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nA unique feature of Tevm that allows simulating transactions as if they were sent from any address:\nimport { createImpersonatedTx } from &#x27;@tevm/tx&#x27;\n \nconst tx = createImpersonatedTx({\n  impersonatedAddress: address,\n  to: recipient,\n  value: value,\n  data: data,\n  // ... other EIP-1559 transaction fields\n})\n","title":"Impersonated Transactions","titles":["@tevm/tx","Main Components"]},"268":{"href":"/api/tx#transaction-types-1","html":"\n","isPage":false,"text":"\n","title":"Transaction Types","titles":["@tevm/tx"]},"269":{"href":"/api/tx#legacy-transactions","html":"\n<p>Pre-EIP-2718 transactions with basic fields:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> LegacyTxData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  nonce</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  gasPrice</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  gasLimit</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  to</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  value</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  v</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  r</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  s</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nPre-EIP-2718 transactions with basic fields:\ninterface LegacyTxData {\n  nonce: bigint\n  gasPrice: bigint\n  gasLimit: bigint\n  to?: Address\n  value: bigint\n  data: Uint8Array\n  v?: bigint\n  r?: bigint\n  s?: bigint\n}\n","title":"Legacy Transactions","titles":["@tevm/tx","Transaction Types"]},"270":{"href":"/api/tx#eip-2930-transactions","html":"\n<p>Type 1 transactions with access lists:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> AccessListEIP2930TxData</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> extends</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> LegacyTxData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  chainId</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  accessList</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> AccessList</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nType 1 transactions with access lists:\ninterface AccessListEIP2930TxData extends LegacyTxData {\n  chainId: bigint\n  accessList: AccessList\n}\n","title":"EIP-2930 Transactions","titles":["@tevm/tx","Transaction Types"]},"271":{"href":"/api/tx#eip-1559-transactions","html":"\n<p>Type 2 transactions with fee market:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FeeMarketEIP1559TxData</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> extends</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> AccessListEIP2930TxData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  maxFeePerGas</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  maxPriorityFeePerGas</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nType 2 transactions with fee market:\ninterface FeeMarketEIP1559TxData extends AccessListEIP2930TxData {\n  maxFeePerGas: bigint\n  maxPriorityFeePerGas: bigint\n}\n","title":"EIP-1559 Transactions","titles":["@tevm/tx","Transaction Types"]},"272":{"href":"/api/tx#eip-4844-transactions","html":"\n<p>Type 3 transactions with blob data:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> BlobEIP4844TxData</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> extends</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> FeeMarketEIP1559TxData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  maxFeePerBlobGas</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  blobVersionedHashes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[]</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  blobs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[]</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  kzgCommitments</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[]</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  kzgProofs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nType 3 transactions with blob data:\ninterface BlobEIP4844TxData extends FeeMarketEIP1559TxData {\n  maxFeePerBlobGas: bigint\n  blobVersionedHashes: Uint8Array[]\n  blobs?: Uint8Array[]\n  kzgCommitments?: Uint8Array[]\n  kzgProofs?: Uint8Array[]\n}\n","title":"EIP-4844 Transactions","titles":["@tevm/tx","Transaction Types"]},"273":{"href":"/api/tx#common-operations","html":"\n","isPage":false,"text":"\n","title":"Common Operations","titles":["@tevm/tx"]},"274":{"href":"/api/tx#creating-transactions","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { TransactionFactory, LegacyTransaction } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/tx&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Using factory</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> TransactionFactory.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">fromTxData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  nonce: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  gasPrice: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">20000000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  gasLimit: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">21000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000000000000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Direct instantiation</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> legacyTx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> LegacyTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  nonce: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  gasPrice: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">20000000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  gasLimit: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">21000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000000000000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nimport { TransactionFactory, LegacyTransaction } from &#x27;@tevm/tx&#x27;\n \n// Using factory\nconst tx = TransactionFactory.fromTxData({\n  nonce: 0n,\n  gasPrice: 20000000000n,\n  gasLimit: 21000n,\n  to: &#x27;0x...&#x27;,\n  value: 1000000000000000000n,\n  data: new Uint8Array()\n})\n \n// Direct instantiation\nconst legacyTx = new LegacyTransaction({\n  nonce: 0n,\n  gasPrice: 20000000000n,\n  gasLimit: 21000n,\n  to: &#x27;0x...&#x27;,\n  value: 1000000000000000000n,\n  data: new Uint8Array()\n})\n","title":"Creating Transactions","titles":["@tevm/tx","Common Operations"]},"275":{"href":"/api/tx#signing-transactions","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signedTx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> tx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sign</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(privateKey)</span></span></code></pre>\n","isPage":false,"text":"\nconst signedTx = tx.sign(privateKey)\n","title":"Signing Transactions","titles":["@tevm/tx","Common Operations"]},"276":{"href":"/api/tx#transaction-methods","html":"\n<p>All transaction types provide common methods:</p>\n<ul>\n<li><code>hash()</code>: Get transaction hash</li>\n<li><code>getBaseFee()</code>: Get minimum required gas</li>\n<li><code>getDataFee()</code>: Get gas cost for data</li>\n<li><code>getUpfrontCost()</code>: Get total required balance</li>\n<li><code>isSigned()</code>: Check if transaction is signed</li>\n<li><code>serialize()</code>: Get RLP encoded transaction</li>\n<li><code>toJSON()</code>: Get JSON representation</li>\n</ul>\n","isPage":false,"text":"\nAll transaction types provide common methods:\n\nhash(): Get transaction hash\ngetBaseFee(): Get minimum required gas\ngetDataFee(): Get gas cost for data\ngetUpfrontCost(): Get total required balance\nisSigned(): Check if transaction is signed\nserialize(): Get RLP encoded transaction\ntoJSON(): Get JSON representation\n\n","title":"Transaction Methods","titles":["@tevm/tx","Common Operations"]},"277":{"href":"/api/tx#error-handling","html":"\n<p>The package includes custom error types:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { InvalidGasLimitError } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/tx&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createImpersonatedTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txData)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (e) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (e </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">instanceof</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> InvalidGasLimitError</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Handle invalid gas limit</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe package includes custom error types:\nimport { InvalidGasLimitError } from &#x27;@tevm/tx&#x27;\n \ntry {\n  const tx = createImpersonatedTx(txData)\n} catch (e) {\n  if (e instanceof InvalidGasLimitError) {\n    // Handle invalid gas limit\n  }\n}\n","title":"Error Handling","titles":["@tevm/tx"]},"278":{"href":"/api/tx#see-also","html":"\n<ul>\n<li><a href=\"https://eips.ethereum.org/EIPS/eip-2718\">EIP-2718: Typed Transaction Envelope</a></li>\n<li><a href=\"https://eips.ethereum.org/EIPS/eip-2930\">EIP-2930: Optional access lists</a></li>\n<li><a href=\"https://eips.ethereum.org/EIPS/eip-1559\">EIP-1559: Fee market change</a></li>\n<li><a href=\"https://eips.ethereum.org/EIPS/eip-4844\">EIP-4844: Shard Blob Transactions</a></li>\n</ul>","isPage":false,"text":"\n\nEIP-2718: Typed Transaction Envelope\nEIP-2930: Optional access lists\nEIP-1559: Fee market change\nEIP-4844: Shard Blob Transactions\n","title":"See Also","titles":["@tevm/tx"]},"279":{"href":"/api/txpool#tevmtxpool","html":"</header>\n<blockquote>\n<p><strong>Generated API Documentation</strong>: View the full API documentation in the <a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/txpool/docs\">evmts/tevm-monorepo/packages/txpool/docs</a> folder.</p>\n</blockquote>\n<p>The <code>@tevm/txpool</code> package provides a transaction pool (mempool) implementation for managing pending Ethereum transactions. It handles transaction validation, ordering, and lifecycle management.</p>\n","isPage":true,"text":"\n\nGenerated API Documentation: View the full API documentation in the evmts/tevm-monorepo/packages/txpool/docs folder.\n\nThe @tevm/txpool package provides a transaction pool (mempool) implementation for managing pending Ethereum transactions. It handles transaction validation, ordering, and lifecycle management.\n","title":"@tevm/txpool","titles":[]},"280":{"href":"/api/txpool#installation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> @tevm/txpool</span></span></code></pre>\n","isPage":false,"text":"\nnpm install @tevm/txpool\n","title":"Installation","titles":["@tevm/txpool"]},"281":{"href":"/api/txpool#main-components","html":"\n","isPage":false,"text":"\n","title":"Main Components","titles":["@tevm/txpool"]},"282":{"href":"/api/txpool#txpool-class","html":"\n<p>The main class for managing the transaction pool. It provides functionality for adding, removing, and retrieving transactions.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { TxPool } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/txpool&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txPool</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> TxPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  vm: ethereumVm</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nThe main class for managing the transaction pool. It provides functionality for adding, removing, and retrieving transactions.\nimport { TxPool } from &#x27;@tevm/txpool&#x27;\n \nconst txPool = new TxPool({\n  vm: ethereumVm\n})\n","title":"TxPool Class","titles":["@tevm/txpool","Main Components"]},"283":{"href":"/api/txpool#constructor-options","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TxPoolOptions</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Vm</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // Ethereum Virtual Machine instance</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\ninterface TxPoolOptions {\n  vm: Vm // Ethereum Virtual Machine instance\n}\n","title":"Constructor Options","titles":["@tevm/txpool","Main Components","TxPool Class"]},"284":{"href":"/api/txpool#core-methods","html":"\n","isPage":false,"text":"\n","title":"Core Methods","titles":["@tevm/txpool","Main Components"]},"285":{"href":"/api/txpool#adding-transactions","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Add a transaction with validation</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transaction, requireSignature, skipBalance)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Add without validation</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">addUnverified</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transaction)</span></span></code></pre>\n","isPage":false,"text":"\n// Add a transaction with validation\nawait txPool.add(transaction, requireSignature, skipBalance)\n \n// Add without validation\nawait txPool.addUnverified(transaction)\n","title":"Adding Transactions","titles":["@tevm/txpool","Main Components","Core Methods"]},"286":{"href":"/api/txpool#retrieving-transactions","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get transactions by hash</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getByHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txHashes)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get transactions by sender address</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBySenderAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get transactions sorted by price and nonce</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> sortedTxs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">txsByPriceAndNonce</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  baseFee: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  allowedBlobs: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">6</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\n// Get transactions by hash\nconst txs = txPool.getByHash(txHashes)\n \n// Get transactions by sender address\nconst txs = await txPool.getBySenderAddress(address)\n \n// Get transactions sorted by price and nonce\nconst sortedTxs = await txPool.txsByPriceAndNonce({\n  baseFee: 1000000000n,\n  allowedBlobs: 6\n})\n","title":"Retrieving Transactions","titles":["@tevm/txpool","Main Components","Core Methods"]},"287":{"href":"/api/txpool#removing-transactions","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Remove a single transaction</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">removeByHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txHash)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Remove transactions included in new blocks</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">removeNewBlockTxs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(newBlocks)</span></span></code></pre>\n","isPage":false,"text":"\n// Remove a single transaction\ntxPool.removeByHash(txHash)\n \n// Remove transactions included in new blocks\ntxPool.removeNewBlockTxs(newBlocks)\n","title":"Removing Transactions","titles":["@tevm/txpool","Main Components","Core Methods"]},"288":{"href":"/api/txpool#pool-management","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Start the pool</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">start</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Stop the pool</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stop</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Close the pool</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">close</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Regular cleanup of old transactions</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">cleanup</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n","isPage":false,"text":"\n// Start the pool\ntxPool.start()\n \n// Stop the pool\ntxPool.stop()\n \n// Close the pool\ntxPool.close()\n \n// Regular cleanup of old transactions\ntxPool.cleanup()\n","title":"Pool Management","titles":["@tevm/txpool","Main Components","Core Methods"]},"289":{"href":"/api/txpool#configuration-constants","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Minimum gas price bump percentage for replacement transactions</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">MIN_GAS_PRICE_BUMP_PERCENT</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 10</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Minimum gas price (.1 GWei)</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">MIN_GAS_PRICE</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 100000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Maximum transaction data size (128KB)</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">TX_MAX_DATA_SIZE</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 128</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> *</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1024</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Maximum pool size</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">MAX_POOL_SIZE</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 5000</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Maximum transactions per account</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">MAX_TXS_PER_ACCOUNT</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 100</span></span></code></pre>\n","isPage":false,"text":"\n// Minimum gas price bump percentage for replacement transactions\nMIN_GAS_PRICE_BUMP_PERCENT = 10\n \n// Minimum gas price (.1 GWei)\nMIN_GAS_PRICE = 100000000n\n \n// Maximum transaction data size (128KB)\nTX_MAX_DATA_SIZE = 128 * 1024\n \n// Maximum pool size\nMAX_POOL_SIZE = 5000\n \n// Maximum transactions per account\nMAX_TXS_PER_ACCOUNT = 100\n","title":"Configuration Constants","titles":["@tevm/txpool","Main Components"]},"290":{"href":"/api/txpool#transaction-types","html":"\n<p>The pool supports various transaction types:</p>\n<ul>\n<li>Legacy Transactions</li>\n<li>EIP-2930 Access List Transactions</li>\n<li>EIP-1559 Fee Market Transactions</li>\n<li>EIP-4844 Blob Transactions</li>\n<li>Impersonated Transactions (Tevm-specific)</li>\n</ul>\n","isPage":false,"text":"\nThe pool supports various transaction types:\n\nLegacy Transactions\nEIP-2930 Access List Transactions\nEIP-1559 Fee Market Transactions\nEIP-4844 Blob Transactions\nImpersonated Transactions (Tevm-specific)\n\n","title":"Transaction Types","titles":["@tevm/txpool"]},"291":{"href":"/api/txpool#pool-state-management","html":"\n","isPage":false,"text":"\n","title":"Pool State Management","titles":["@tevm/txpool"]},"292":{"href":"/api/txpool#pool-data-structure","html":"\n<p>The pool maintains several data structures:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TxPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Main pool mapping addresses to their transactions</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  pool</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">TxPoolObject</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[]&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Number of transactions in the pool</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  txsInPool</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Map of handled transaction hashes</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  handled</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">HandledObject</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe pool maintains several data structures:\ninterface TxPool {\n  // Main pool mapping addresses to their transactions\n  pool: Map&lt;string, TxPoolObject[]&gt;\n \n  // Number of transactions in the pool\n  txsInPool: number\n \n  // Map of handled transaction hashes\n  handled: Map&lt;string, HandledObject&gt;\n}\n","title":"Pool Data Structure","titles":["@tevm/txpool","Pool State Management"]},"293":{"href":"/api/txpool#time-limits","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Time to keep transactions in pool (minutes)</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">POOLED_STORAGE_TIME_LIMIT</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 20</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Time to remember handled transactions (minutes)</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">HANDLED_CLEANUP_TIME_LIMIT</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 60</span></span></code></pre>\n","isPage":false,"text":"\n// Time to keep transactions in pool (minutes)\nPOOLED_STORAGE_TIME_LIMIT = 20\n \n// Time to remember handled transactions (minutes)\nHANDLED_CLEANUP_TIME_LIMIT = 60\n","title":"Time Limits","titles":["@tevm/txpool","Pool State Management"]},"294":{"href":"/api/txpool#transaction-validation","html":"\n<p>The pool performs several validations when adding transactions:</p>\n<ol>\n<li>Signature verification (optional)</li>\n<li>Size limits</li>\n<li>Gas price requirements</li>\n<li>Account transaction limits</li>\n<li>Nonce ordering</li>\n<li>Gas price bumps for replacement transactions</li>\n</ol>\n","isPage":false,"text":"\nThe pool performs several validations when adding transactions:\n\nSignature verification (optional)\nSize limits\nGas price requirements\nAccount transaction limits\nNonce ordering\nGas price bumps for replacement transactions\n\n","title":"Transaction Validation","titles":["@tevm/txpool"]},"295":{"href":"/api/txpool#error-handling","html":"\n<p>Common error scenarios:</p>\n<ul>\n<li>Pool full</li>\n<li>Transaction too large</li>\n<li>Gas price too low</li>\n<li>Maximum transactions per account reached</li>\n<li>Invalid nonce</li>\n<li>Insufficient gas price bump for replacement</li>\n</ul>\n","isPage":false,"text":"\nCommon error scenarios:\n\nPool full\nTransaction too large\nGas price too low\nMaximum transactions per account reached\nInvalid nonce\nInsufficient gas price bump for replacement\n\n","title":"Error Handling","titles":["@tevm/txpool"]},"296":{"href":"/api/txpool#usage-example","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { TxPool } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/txpool&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createEvm } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/evm&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create a new pool</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txPool</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> TxPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  vm: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createEvm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6A737D;--shiki-dark:#768390\">/* options */</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Start the pool</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">start</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Add transactions</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transaction)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get pending transactions for mining</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> pendingTxs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">txsByPriceAndNonce</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  baseFee: currentBaseFee</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Clean up old transactions</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">cleanup</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Stop the pool when done</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">txPool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">stop</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n","isPage":false,"text":"\nimport { TxPool } from &#x27;@tevm/txpool&#x27;\nimport { createEvm } from &#x27;@tevm/evm&#x27;\n \n// Create a new pool\nconst txPool = new TxPool({\n  vm: await createEvm(/* options */)\n})\n \n// Start the pool\ntxPool.start()\n \n// Add transactions\nawait txPool.add(transaction)\n \n// Get pending transactions for mining\nconst pendingTxs = await txPool.txsByPriceAndNonce({\n  baseFee: currentBaseFee\n})\n \n// Clean up old transactions\ntxPool.cleanup()\n \n// Stop the pool when done\ntxPool.stop()\n","title":"Usage Example","titles":["@tevm/txpool"]},"297":{"href":"/api/txpool#see-also","html":"\n<ul>\n<li><a href=\"https://eips.ethereum.org/EIPS/eip-2718\">EIP-2718: Typed Transaction Envelope</a></li>\n<li><a href=\"https://eips.ethereum.org/EIPS/eip-1559\">EIP-1559: Fee Market Change</a></li>\n<li><a href=\"https://eips.ethereum.org/EIPS/eip-4844\">EIP-4844: Shard Blob Transactions</a></li>\n<li><a href=\"https://tevm.sh/reference/tevm/evm/\">Tevm EVM Documentation</a></li>\n</ul>","isPage":false,"text":"\n\nEIP-2718: Typed Transaction Envelope\nEIP-1559: Fee Market Change\nEIP-4844: Shard Blob Transactions\nTevm EVM Documentation\n","title":"See Also","titles":["@tevm/txpool"]},"298":{"href":"/api/utils#utilities--addresses","html":"</header>\n<p>Tevm exports a set of lightweight utility functions and classes. Many of these build upon lower-level packages like <a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/utils\"><code>tevm/utils</code></a> and <a href=\"https://viem.sh\"><code>viem</code></a> while standardizing usage for Tevm Node. Below are the most commonly used.</p>\n","isPage":true,"text":"\nTevm exports a set of lightweight utility functions and classes. Many of these build upon lower-level packages like tevm/utils and viem while standardizing usage for Tevm Node. Below are the most commonly used.\n","title":"Utilities &amp; Addresses","titles":[]},"299":{"href":"/api/utils#createaddress","html":"\n<p>Creates an <a href=\"https://ethereum.org/en/developers/docs/accounts/#account-creation\">Ethereum address</a> from various input formats:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createAddress } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/address&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Creates a TEVM-style Address object from various input forms</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> addr </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`0x${&quot;00&quot;</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">repeat</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">20</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">)</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// from a hex string</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">addr </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">420</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// from a bigint</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">addr </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">20</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// from a 20-byte array</span></span></code></pre>\n","isPage":false,"text":"\nCreates an Ethereum address from various input formats:\nimport { createAddress } from &#x27;tevm/address&#x27;\n \n// Creates a TEVM-style Address object from various input forms\nlet addr = createAddress(`0x${&quot;00&quot;.repeat(20)}`)\n// from a hex string\naddr = createAddress(420n)\n// from a bigint\naddr = createAddress(new Uint8Array(20))\n// from a 20-byte array\n","title":"createAddress","titles":["Utilities &amp; Addresses"]},"300":{"href":"/api/utils#signature","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">declare</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> EthjsAddress</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span></span></code></pre>\n","isPage":false,"text":"\ndeclare function createAddress(\n  address: number | bigint | string | Uint8Array | EthjsAddress\n): Address\n","title":"Signature","titles":["Utilities &amp; Addresses","createAddress"]},"301":{"href":"/api/utils#behavior--notes","html":"\n<p>- Accepts various input types: <a href=\"https://ethereum.org/en/developers/docs/data-structures-and-encoding/hex/\"><code>0x</code>-prefixed hex strings</a>, unprefixed hex, numbers, bigints, <code>Uint8Array</code>s, or <code>EthjsAddress</code>.\n- Throws <code>InvalidAddressError</code> if it can&#x27;t parse a valid 20-byte address from the input.</p>\n","isPage":false,"text":"\n- Accepts various input types: 0x-prefixed hex strings, unprefixed hex, numbers, bigints, Uint8Arrays, or EthjsAddress.\n- Throws InvalidAddressError if it can&#x27;t parse a valid 20-byte address from the input.\n","title":"Behavior &amp; Notes","titles":["Utilities &amp; Addresses","createAddress"]},"302":{"href":"/api/utils#address-class","html":"\n<p>A thin wrapper around <a href=\"https://github.com/ethereumjs/ethereumjs-monorepo/tree/master/packages/util\"><code>EthjsAddress</code></a> offering a simple, consistent shape for Tevm Node. Created by <code>createAddress</code> or by forging your own:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Address } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/address&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> a</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Address</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Uint8Array.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">from</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([ </span><span style=\"color:#6A737D;--shiki-dark:#768390\">/* 20 bytes */</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> ]))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(a.bytes)  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// a raw 20-byte address</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(a.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 0x....</span></span></code></pre>\n","isPage":false,"text":"\nA thin wrapper around EthjsAddress offering a simple, consistent shape for Tevm Node. Created by createAddress or by forging your own:\nimport { Address } from &#x27;tevm/address&#x27;\n \nconst a = new Address(Uint8Array.from([ /* 20 bytes */ ]))\nconsole.log(a.bytes)  // a raw 20-byte address\nconsole.log(a.toString()) // 0x....\n","title":"Address Class","titles":["Utilities &amp; Addresses"]},"303":{"href":"/api/utils#createcontractaddress","html":"\n<p>Creates a contract address following <a href=\"https://eips.ethereum.org/EIPS/eip-1014\">EIP-1014</a>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createContractAddress } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/address&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// from an existing address + nonce, produce the CREATE address</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> from</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;0x1111...1111&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nonce</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contractAddr</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createContractAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(from, nonce)</span></span></code></pre>\n","isPage":false,"text":"\nCreates a contract address following EIP-1014:\nimport { createContractAddress } from &#x27;tevm/address&#x27;\n \n// from an existing address + nonce, produce the CREATE address\nconst from = createAddress(&quot;0x1111...1111&quot;)\nconst nonce = 1n\nconst contractAddr = createContractAddress(from, nonce)\n","title":"createContractAddress","titles":["Utilities &amp; Addresses"]},"304":{"href":"/api/utils#usage","html":"\n<p>1. Follows standard Ethereum&#x27;s <a href=\"https://ethereum.org/en/developers/docs/smart-contracts/deploying/#how-to-deploy-a-smart-contract\"><code>keccak256(rlp([senderAddress, nonce]))[-20..]</code></a>.\n2. Ideal for simulating <code>CREATE</code> addresses in test or dev flows.</p>\n","isPage":false,"text":"\n1. Follows standard Ethereum&#x27;s keccak256(rlp([senderAddress, nonce]))[-20..].\n2. Ideal for simulating CREATE addresses in test or dev flows.\n","title":"Usage","titles":["Utilities &amp; Addresses","createContractAddress"]},"305":{"href":"/api/utils#error-handling","html":"\n<p>- Throws <code>InvalidAddressError</code> if the <code>from</code> address is invalid.</p>\n","isPage":false,"text":"\n- Throws InvalidAddressError if the from address is invalid.\n","title":"Error Handling","titles":["Utilities &amp; Addresses","createContractAddress"]},"306":{"href":"/api/utils#common-errors","html":"\n<p>- <strong>InvalidAddressError</strong>\nThrown when a string/bytes input fails to parse as a valid 20-byte address.</p>\n<p>- <strong>UnreachableCodeError</strong>\nThrown internally if a code path was unexpectedly reached. Generally wrapped into a more descriptive error.</p>\n","isPage":false,"text":"\n- InvalidAddressError\nThrown when a string/bytes input fails to parse as a valid 20-byte address.\n- UnreachableCodeError\nThrown internally if a code path was unexpectedly reached. Generally wrapped into a more descriptive error.\n","title":"Common Errors","titles":["Utilities &amp; Addresses"]},"307":{"href":"/api/utils#other-handy-utilities","html":"\n<p>Some additional lower-level utility re-exports from <a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/utils\"><code>tevm/utils</code></a> or <a href=\"https://viem.sh\"><code>viem</code></a>:</p>\n<p>- <code>hexToBytes(hex: string): Uint8Array</code>\nConvert a hex string to raw bytes (with optional size checks).\n- <code>keccak256(data: Uint8Array | HexString, &#x27;bytes&#x27; | &#x27;hex&#x27;)</code>\nA standard <a href=\"https://ethereum.org/en/developers/docs/smart-contracts/security/#keccak256-and-sha-3\">keccak256</a> hasher.\n- <code>encodeFunctionData(...)</code>, <code>toRlp(...)</code>, etc.\nVarious encoding helpers used by Tevm Node internally.</p>\n<p>&gt; <strong>Tip:</strong> If you are building higher-level code in the browser or Node, you may prefer <a href=\"https://viem.sh\"><code>viem</code></a>&#x27;s standardized utilities for bytes conversions, hashing, and ABIs. Tevm re-exports many of these for convenience.</p>\n<header>","isPage":false,"text":"\nSome additional lower-level utility re-exports from tevm/utils or viem:\n- hexToBytes(hex: string): Uint8Array\nConvert a hex string to raw bytes (with optional size checks).\n- keccak256(data: Uint8Array | HexString, &#x27;bytes&#x27; | &#x27;hex&#x27;)\nA standard keccak256 hasher.\n- encodeFunctionData(...), toRlp(...), etc.\nVarious encoding helpers used by Tevm Node internally.\n&gt; Tip: If you are building higher-level code in the browser or Node, you may prefer viem&#x27;s standardized utilities for bytes conversions, hashing, and ABIs. Tevm re-exports many of these for convenience.\n","title":"Other Handy Utilities","titles":["Utilities &amp; Addresses"]},"308":{"href":"/api/utils#tevmutils","html":"</header>\n<p>&gt; <strong>Generated API Documentation</strong>: View the full API documentation in the <a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/utils/docs\">evmts/tevm-monorepo/packages/utils/docs</a> folder.</p>\n<p>The <code>@tevm/utils</code> package provides a comprehensive collection of utility functions and types for working with Ethereum data structures, encoding/decoding, and common operations. It combines functionality from various Ethereum libraries and adds Tevm-specific utilities.</p>\n","isPage":false,"text":"\n&gt; Generated API Documentation: View the full API documentation in the evmts/tevm-monorepo/packages/utils/docs folder.\nThe @tevm/utils package provides a comprehensive collection of utility functions and types for working with Ethereum data structures, encoding/decoding, and common operations. It combines functionality from various Ethereum libraries and adds Tevm-specific utilities.\n","title":"@tevm/utils","titles":[]},"309":{"href":"/api/utils#installation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> @tevm/utils</span></span></code></pre>\n","isPage":false,"text":"\nnpm install @tevm/utils\n","title":"Installation","titles":["@tevm/utils"]},"310":{"href":"/api/utils#main-components","html":"\n","isPage":false,"text":"\n","title":"Main Components","titles":["@tevm/utils"]},"311":{"href":"/api/utils#data-types-and-encoding","html":"\n","isPage":false,"text":"\n","title":"Data Types and Encoding","titles":["@tevm/utils","Main Components"]},"312":{"href":"/api/utils#hex-and-bytes-conversion","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  bytesToHex,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  hexToBytes,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  bytesToBigInt,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  bytesToNumber,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  hexToBigInt,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  hexToNumber,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  numberToHex,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  stringToHex,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  hexToString</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/utils&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Convert bytes to hex</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> hex</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> bytesToHex</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">164</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// &#x27;0x01a4&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Convert hex to bytes</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bytes</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> hexToBytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x01a4&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Uint8Array([1, 164])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Convert to/from numbers</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> num</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> hexToNumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x01a4&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 420</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> hex2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> numberToHex</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">420</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// &#x27;0x01a4&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// String conversion</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> str</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> hexToString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x48656c6c6f&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// &#x27;Hello&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> hex3</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> stringToHex</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Hello&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// &#x27;0x48656c6c6f&#x27;</span></span></code></pre>\n","isPage":false,"text":"\nimport {\n  bytesToHex,\n  hexToBytes,\n  bytesToBigInt,\n  bytesToNumber,\n  hexToBigInt,\n  hexToNumber,\n  numberToHex,\n  stringToHex,\n  hexToString\n} from &#x27;@tevm/utils&#x27;\n \n// Convert bytes to hex\nconst hex = bytesToHex(new Uint8Array([1, 164])) // &#x27;0x01a4&#x27;\n \n// Convert hex to bytes\nconst bytes = hexToBytes(&#x27;0x01a4&#x27;) // Uint8Array([1, 164])\n \n// Convert to/from numbers\nconst num = hexToNumber(&#x27;0x01a4&#x27;) // 420\nconst hex2 = numberToHex(420) // &#x27;0x01a4&#x27;\n \n// String conversion\nconst str = hexToString(&#x27;0x48656c6c6f&#x27;) // &#x27;Hello&#x27;\nconst hex3 = stringToHex(&#x27;Hello&#x27;) // &#x27;0x48656c6c6f&#x27;\n","title":"Hex and Bytes Conversion","titles":["@tevm/utils","Main Components","Data Types and Encoding"]},"313":{"href":"/api/utils#type-checking","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { isHex, isBytes, isAddress } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/utils&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isHex</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x123&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// true</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isBytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// true</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">isAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x123...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// true</span></span></code></pre>\n","isPage":false,"text":"\nimport { isHex, isBytes, isAddress } from &#x27;@tevm/utils&#x27;\n \nisHex(&#x27;0x123&#x27;) // true\nisBytes(new Uint8Array()) // true\nisAddress(&#x27;0x123...&#x27;) // true\n","title":"Type Checking","titles":["@tevm/utils","Main Components","Data Types and Encoding"]},"314":{"href":"/api/utils#ethereum-specific","html":"\n","isPage":false,"text":"\n","title":"Ethereum Specific","titles":["@tevm/utils","Main Components"]},"315":{"href":"/api/utils#unit-conversion","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  formatEther,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  parseEther,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  formatGwei,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  parseGwei</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/utils&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Convert wei to ether</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">formatEther</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000000000000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// &#x27;1.0&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Convert ether to wei</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseEther</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;1.0&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 1000000000000000000n</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Work with gwei</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">formatGwei</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// &#x27;1.0&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseGwei</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;1.0&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 1000000000n</span></span></code></pre>\n","isPage":false,"text":"\nimport {\n  formatEther,\n  parseEther,\n  formatGwei,\n  parseGwei\n} from &#x27;@tevm/utils&#x27;\n \n// Convert wei to ether\nformatEther(1000000000000000000n) // &#x27;1.0&#x27;\n \n// Convert ether to wei\nparseEther(&#x27;1.0&#x27;) // 1000000000000000000n\n \n// Work with gwei\nformatGwei(1000000000n) // &#x27;1.0&#x27;\nparseGwei(&#x27;1.0&#x27;) // 1000000000n\n","title":"Unit Conversion","titles":["@tevm/utils","Main Components","Ethereum Specific"]},"316":{"href":"/api/utils#cryptographic-functions","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  keccak256,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ecrecover,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ecsign,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  randomBytes</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/utils&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Generate keccak256 hash</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> hash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> keccak256</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Sign data</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signature</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> ecsign</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(messageHash, privateKey)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Recover address from signature</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> ecrecover</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(messageHash, v, r, s)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Generate random bytes</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> random</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> randomBytes</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">32</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nimport {\n  keccak256,\n  ecrecover,\n  ecsign,\n  randomBytes\n} from &#x27;@tevm/utils&#x27;\n \n// Generate keccak256 hash\nconst hash = keccak256(&#x27;0x1234&#x27;)\n \n// Sign data\nconst signature = ecsign(messageHash, privateKey)\n \n// Recover address from signature\nconst address = ecrecover(messageHash, v, r, s)\n \n// Generate random bytes\nconst random = randomBytes(32)\n","title":"Cryptographic Functions","titles":["@tevm/utils","Main Components","Ethereum Specific"]},"317":{"href":"/api/utils#abi-encodingdecoding","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  encodeAbiParameters,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  decodeAbiParameters,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  encodeFunctionData,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  decodeFunctionData,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  encodeEventTopics,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  decodeEventLog</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/utils&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Encode function data</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  abi: [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  functionName: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  args: [address, amount]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Decode function data</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> decodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  abi: [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Work with events</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> topics</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> encodeEventTopics</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  abi: [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  eventName: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  args: [from, to, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">null</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nimport {\n  encodeAbiParameters,\n  decodeAbiParameters,\n  encodeFunctionData,\n  decodeFunctionData,\n  encodeEventTopics,\n  decodeEventLog\n} from &#x27;@tevm/utils&#x27;\n \n// Encode function data\nconst data = encodeFunctionData({\n  abi: [...],\n  functionName: &#x27;transfer&#x27;,\n  args: [address, amount]\n})\n \n// Decode function data\nconst result = decodeFunctionData({\n  abi: [...],\n  data: &#x27;0x...&#x27;\n})\n \n// Work with events\nconst topics = encodeEventTopics({\n  abi: [...],\n  eventName: &#x27;Transfer&#x27;,\n  args: [from, to, null]\n})\n","title":"ABI Encoding/Decoding","titles":["@tevm/utils","Main Components"]},"318":{"href":"/api/utils#rlp-encodingdecoding","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { toRlp, fromRlp } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/utils&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Encode to RLP</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> rlp</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> toRlp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x123&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x456&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Decode from RLP</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> decoded</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> fromRlp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(rlp)</span></span></code></pre>\n","isPage":false,"text":"\nimport { toRlp, fromRlp } from &#x27;@tevm/utils&#x27;\n \n// Encode to RLP\nconst rlp = toRlp([&#x27;0x123&#x27;, &#x27;0x456&#x27;])\n \n// Decode from RLP\nconst decoded = fromRlp(rlp)\n","title":"RLP Encoding/Decoding","titles":["@tevm/utils","Main Components"]},"319":{"href":"/api/utils#memory-database","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createMemoryDb } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/utils&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create an in-memory database</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> db</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createMemoryDb</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Initialize with existing data</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> initialData</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> db2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createMemoryDb</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(initialData)</span></span></code></pre>\n","isPage":false,"text":"\nimport { createMemoryDb } from &#x27;@tevm/utils&#x27;\n \n// Create an in-memory database\nconst db = createMemoryDb()\n \n// Initialize with existing data\nconst initialData = new Map()\nconst db2 = createMemoryDb(initialData)\n","title":"Memory Database","titles":["@tevm/utils","Main Components"]},"320":{"href":"/api/utils#event-emitter","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { AsyncEventEmitter } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/utils&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> emitter</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> AsyncEventEmitter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Add listener</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">emitter.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">on</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;event&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Handle event</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Emit event</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> emitter.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">emit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;event&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, data)</span></span></code></pre>\n","isPage":false,"text":"\nimport { AsyncEventEmitter } from &#x27;@tevm/utils&#x27;\n \nconst emitter = new AsyncEventEmitter()\n \n// Add listener\nemitter.on(&#x27;event&#x27;, async (data) =&gt; {\n  // Handle event\n})\n \n// Emit event\nawait emitter.emit(&#x27;event&#x27;, data)\n","title":"Event Emitter","titles":["@tevm/utils","Main Components"]},"321":{"href":"/api/utils#types","html":"\n","isPage":false,"text":"\n","title":"Types","titles":["@tevm/utils"]},"322":{"href":"/api/utils#basic-types","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  Address,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  Hex,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  BlockTag,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  BlockNumber,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  BytesLike,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  BigIntLike</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/utils&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Example type usage</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;0x...&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> hex</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Hex</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;0x...&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> blockTag</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> BlockTag</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;latest&#x27;</span></span></code></pre>\n","isPage":false,"text":"\nimport type {\n  Address,\n  Hex,\n  BlockTag,\n  BlockNumber,\n  BytesLike,\n  BigIntLike\n} from &#x27;@tevm/utils&#x27;\n \n// Example type usage\nconst address: Address = &#x27;0x...&#x27;\nconst hex: Hex = &#x27;0x...&#x27;\nconst blockTag: BlockTag = &#x27;latest&#x27;\n","title":"Basic Types","titles":["@tevm/utils","Types"]},"323":{"href":"/api/utils#abi-types","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  Abi,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  AbiFunction,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  AbiEvent,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  AbiConstructor,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ParseAbi,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  FormatAbi</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/utils&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Parse ABI</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ParsedAbi</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ParseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">typeof</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> abiString&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Format ABI</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FormattedAbi</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> FormatAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">typeof</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> parsedAbi&gt;</span></span></code></pre>\n","isPage":false,"text":"\nimport type {\n  Abi,\n  AbiFunction,\n  AbiEvent,\n  AbiConstructor,\n  ParseAbi,\n  FormatAbi\n} from &#x27;@tevm/utils&#x27;\n \n// Parse ABI\ntype ParsedAbi = ParseAbi&lt;typeof abiString&gt;\n \n// Format ABI\ntype FormattedAbi = FormatAbi&lt;typeof parsedAbi&gt;\n","title":"ABI Types","titles":["@tevm/utils","Types"]},"324":{"href":"/api/utils#contract-types","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ContractFunctionName,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ContractConstructorArgs,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ExtractAbiFunction,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ExtractAbiEvent</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/utils&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Extract function from ABI</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TransferFunction</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ExtractAbiFunction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">typeof</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> abi, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Extract event from ABI</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TransferEvent</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ExtractAbiEvent</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">typeof</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> abi, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span></code></pre>\n","isPage":false,"text":"\nimport type {\n  ContractFunctionName,\n  ContractConstructorArgs,\n  ExtractAbiFunction,\n  ExtractAbiEvent\n} from &#x27;@tevm/utils&#x27;\n \n// Extract function from ABI\ntype TransferFunction = ExtractAbiFunction&lt;typeof abi, &#x27;transfer&#x27;&gt;\n \n// Extract event from ABI\ntype TransferEvent = ExtractAbiEvent&lt;typeof abi, &#x27;Transfer&#x27;&gt;\n","title":"Contract Types","titles":["@tevm/utils","Types"]},"325":{"href":"/api/utils#constants","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  GWEI_TO_WEI,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  KECCAK256_RLP,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  KECCAK256_RLP_ARRAY</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/utils&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Common conversion factors and constants</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">GWEI_TO_WEI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 1000000000n</span></span></code></pre>\n","isPage":false,"text":"\nimport {\n  GWEI_TO_WEI,\n  KECCAK256_RLP,\n  KECCAK256_RLP_ARRAY\n} from &#x27;@tevm/utils&#x27;\n \n// Common conversion factors and constants\nconsole.log(GWEI_TO_WEI) // 1000000000n\n","title":"Constants","titles":["@tevm/utils"]},"326":{"href":"/api/utils#error-handling-1","html":"\n<p>The package uses the <code>@tevm/errors</code> package for standardized error handling:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { invariant } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/utils&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Assert conditions</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">invariant</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(condition, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Error message&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nThe package uses the @tevm/errors package for standardized error handling:\nimport { invariant } from &#x27;@tevm/utils&#x27;\n \n// Assert conditions\ninvariant(condition, &#x27;Error message&#x27;)\n","title":"Error Handling","titles":["@tevm/utils"]},"327":{"href":"/api/utils#see-also","html":"\n<p>- <a href=\"https://viem.sh/docs/utilities/fromBytes\">Viem Documentation</a>\n- <a href=\"https://github.com/ethereumjs/ethereumjs-monorepo/tree/master/packages/util\">EthereumJS Util Documentation</a>\n- <a href=\"https://docs.soliditylang.org/en/latest/abi-spec.html\">ABI Specification</a></p>","isPage":false,"text":"\n- Viem Documentation\n- EthereumJS Util Documentation\n- ABI Specification","title":"See Also","titles":["@tevm/utils"]},"328":{"href":"/api/vm-and-submodules#vm--submodules","html":"</header>\n<p><a href=\"https://github.com/evmts/tevm-monorepo\">Tevm Node</a> is built on a modular architecture that separates concerns into distinct submodules. This guide covers the internal components and their APIs.</p>\n","isPage":true,"text":"\nTevm Node is built on a modular architecture that separates concerns into distinct submodules. This guide covers the internal components and their APIs.\n","title":"VM &amp; Submodules","titles":[]},"329":{"href":"/api/vm-and-submodules#overview","html":"\n<p>The main submodules are:</p>\n<p>1. <strong>EVM (Ethereum Virtual Machine)</strong> - Core <a href=\"https://ethereum.org/en/developers/docs/evm/\">execution engine</a>\n2. <strong>Blockchain</strong> - <a href=\"https://ethereum.org/en/developers/docs/blocks/\">Block and chain state</a> management\n3. <strong>StateManager</strong> - <a href=\"https://ethereum.org/en/developers/docs/accounts/\">Account and storage state</a> management\n4. <strong>TxPool</strong> - <a href=\"https://ethereum.org/en/developers/docs/transactions/\">Transaction mempool</a>\n5. <strong>ReceiptsManager</strong> - <a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactionreceipt\">Transaction receipts and logs</a></p>\n","isPage":false,"text":"\nThe main submodules are:\n1. EVM (Ethereum Virtual Machine) - Core execution engine\n2. Blockchain - Block and chain state management\n3. StateManager - Account and storage state management\n4. TxPool - Transaction mempool\n5. ReceiptsManager - Transaction receipts and logs\n","title":"Overview","titles":["VM &amp; Submodules"]},"330":{"href":"/api/vm-and-submodules#evm-module","html":"\n<p>The EVM module handles bytecode execution and state transitions. It is based on <a href=\"https://github.com/ethereumjs/ethereumjs-monorepo/tree/master/packages/evm\"><code>@ethereumjs/evm</code></a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> evm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.evm</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Direct EVM execution</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> evm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  caller: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Full transaction execution (recommended)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txResult</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  tx: transaction,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  block: block,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nThe EVM module handles bytecode execution and state transitions. It is based on @ethereumjs/evm.\nconst vm = await node.getVm()\nconst evm = await vm.evm\n \n// Direct EVM execution\nconst result = await evm.runCall({\n  to: &#x27;0x...&#x27;,\n  data: &#x27;0x...&#x27;,\n  value: 0n,\n  caller: &#x27;0x...&#x27;,\n})\n \n// Full transaction execution (recommended)\nconst txResult = await vm.runTx({\n  tx: transaction,\n  block: block,\n})\n","title":"EVM Module","titles":["VM &amp; Submodules"]},"331":{"href":"/api/vm-and-submodules#key-features","html":"\n<p>- <strong>State Management</strong>: Handles <a href=\"https://ethereum.org/en/developers/docs/accounts/\">account state</a>, storage, and code execution\n- <strong>Gas Metering</strong>: Tracks <a href=\"https://ethereum.org/en/developers/docs/gas/\">gas consumption</a> during execution\n- <strong>Precompiles</strong>: <a href=\"https://www.evm.codes/precompiled\">Built-in contract implementations</a>\n- <strong>EIP Support</strong>: Implements various <a href=\"https://eips.ethereum.org/\">Ethereum Improvement Proposals</a></p>\n","isPage":false,"text":"\n- State Management: Handles account state, storage, and code execution\n- Gas Metering: Tracks gas consumption during execution\n- Precompiles: Built-in contract implementations\n- EIP Support: Implements various Ethereum Improvement Proposals\n","title":"Key Features","titles":["VM &amp; Submodules","EVM Module"]},"332":{"href":"/api/vm-and-submodules#common-operations","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Check execution result</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (result.execResult.exceptionError) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Execution failed:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, result.execResult.exceptionError)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Return value:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, result.execResult.returnValue)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Gas used:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, result.execResult.executionGasUsed)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Access logs from execution</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> log</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> of</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result.execResult.logs) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Event:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    address: log.address,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    topics: log.topics,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    data: log.data</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\n// Check execution result\nif (result.execResult.exceptionError) {\n  console.error(&#x27;Execution failed:&#x27;, result.execResult.exceptionError)\n} else {\n  console.log(&#x27;Return value:&#x27;, result.execResult.returnValue)\n  console.log(&#x27;Gas used:&#x27;, result.execResult.executionGasUsed)\n}\n \n// Access logs from execution\nfor (const log of result.execResult.logs) {\n  console.log(&#x27;Event:&#x27;, {\n    address: log.address,\n    topics: log.topics,\n    data: log.data\n  })\n}\n","title":"Common Operations","titles":["VM &amp; Submodules","EVM Module"]},"333":{"href":"/api/vm-and-submodules#blockchain-module","html":"\n<p>The blockchain module manages blocks and chain state. It is based on <a href=\"https://github.com/ethereumjs/ethereumjs-monorepo/tree/master/packages/blockchain\"><code>@ethereumjs/blockchain</code></a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> chain</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()).blockchain</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get block by number or hash</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> block</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;latest&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> blockByHash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(blockHash)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Add new block</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">putBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(block)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Delete block</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">delBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(blockHash)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get block details</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  number: block.header.number,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  hash: block.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">hash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  parentHash: block.header.parentHash,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  stateRoot: block.header.stateRoot</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nThe blockchain module manages blocks and chain state. It is based on @ethereumjs/blockchain.\nconst chain = (await node.getVm()).blockchain\n \n// Get block by number or hash\nconst block = await chain.getBlock(&#x27;latest&#x27;)\nconst blockByHash = await chain.getBlock(blockHash)\n \n// Add new block\nawait chain.putBlock(block)\n \n// Delete block\nawait chain.delBlock(blockHash)\n \n// Get block details\nconsole.log({\n  number: block.header.number,\n  hash: block.hash(),\n  parentHash: block.header.parentHash,\n  stateRoot: block.header.stateRoot\n})\n","title":"Blockchain Module","titles":["VM &amp; Submodules"]},"334":{"href":"/api/vm-and-submodules#fork-support","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// When forking, blocks are fetched from the parent chain</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> forkedBlock</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(blockNumber)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Local blocks override forked blocks</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">putBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(localBlock)</span></span></code></pre>\n","isPage":false,"text":"\n// When forking, blocks are fetched from the parent chain\nconst forkedBlock = await chain.getBlock(blockNumber)\n \n// Local blocks override forked blocks\nawait chain.putBlock(localBlock)\n","title":"Fork Support","titles":["VM &amp; Submodules","Blockchain Module"]},"335":{"href":"/api/vm-and-submodules#statemanager","html":"\n<p>The StateManager handles account state and storage. It is based on <a href=\"https://github.com/ethereumjs/ethereumjs-monorepo/tree/master/packages/statemanager\"><code>@ethereumjs/statemanager</code></a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> state</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()).stateManager</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Account operations</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> account</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> state.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> state.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">putAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address, account)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Contract operations</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> state.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">putContractCode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address, bytecode)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> code</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> state.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getContractCode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Storage operations</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> state.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">putContractStorage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address, key, value)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> value</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> state.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getContractStorage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address, key)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// State snapshots</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> snapshot</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> state.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">dumpCanonicalGenesis</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> state.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">commit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> state.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">revert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n","isPage":false,"text":"\nThe StateManager handles account state and storage. It is based on @ethereumjs/statemanager.\nconst state = (await node.getVm()).stateManager\n \n// Account operations\nconst account = await state.getAccount(address)\nawait state.putAccount(address, account)\n \n// Contract operations\nawait state.putContractCode(address, bytecode)\nconst code = await state.getContractCode(address)\n \n// Storage operations\nawait state.putContractStorage(address, key, value)\nconst value = await state.getContractStorage(address, key)\n \n// State snapshots\nconst snapshot = await state.dumpCanonicalGenesis()\nawait state.commit()\nawait state.revert()\n","title":"StateManager","titles":["VM &amp; Submodules"]},"336":{"href":"/api/vm-and-submodules#working-with-accounts","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create or update account</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> account</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  nonce: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  balance: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  storageRoot: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">EMPTY_ROOT</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  codeHash: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">EMPTY_HASH</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> state.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">putAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address, account)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Delete account</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> state.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deleteAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address)</span></span></code></pre>\n","isPage":false,"text":"\n// Create or update account\nconst account = {\n  nonce: 1n,\n  balance: 100n,\n  storageRoot: EMPTY_ROOT,\n  codeHash: EMPTY_HASH\n}\nawait state.putAccount(address, account)\n \n// Delete account\nawait state.deleteAccount(address)\n","title":"Working with Accounts","titles":["VM &amp; Submodules","StateManager"]},"337":{"href":"/api/vm-and-submodules#transaction-pool","html":"\n<p>The TxPool manages pending transactions. It is based on <a href=\"https://github.com/ethereumjs/ethereumjs-monorepo/tree/master/packages/tx-pool\"><code>@ethereumjs/tx-pool</code></a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> pool</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getTxPool</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Add transaction</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transaction)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get pending transactions</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> pending</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getPendingTransactions</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Remove transaction</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">removeByHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txHash)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get transactions ordered by price</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> ordered</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">txsByPriceAndNonce</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  baseFee: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nThe TxPool manages pending transactions. It is based on @ethereumjs/tx-pool.\nconst pool = await node.getTxPool()\n \n// Add transaction\nawait pool.add(transaction)\n \n// Get pending transactions\nconst pending = await pool.getPendingTransactions()\n \n// Remove transaction\nawait pool.removeByHash(txHash)\n \n// Get transactions ordered by price\nconst ordered = await pool.txsByPriceAndNonce({\n  baseFee: 10n\n})\n","title":"Transaction Pool","titles":["VM &amp; Submodules"]},"338":{"href":"/api/vm-and-submodules#transaction-validation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Validate transaction before adding</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">validateTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transaction)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> pool.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">add</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transaction)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Invalid transaction:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, error)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\n// Validate transaction before adding\ntry {\n  await pool.validateTx(transaction)\n  await pool.add(transaction)\n} catch (error) {\n  console.error(&#x27;Invalid transaction:&#x27;, error)\n}\n","title":"Transaction Validation","titles":["VM &amp; Submodules","Transaction Pool"]},"339":{"href":"/api/vm-and-submodules#receiptsmanager","html":"\n<p>The ReceiptsManager handles <a href=\"https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactionreceipt\">transaction receipts</a> and event logs.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> receipts</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getReceiptsManager</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get receipts for block</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> blockReceipts</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receipts.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getReceipts</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(blockHash)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get receipt by transaction hash</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txReceipt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receipts.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getReceiptByTxHash</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txHash)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Query logs</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> logs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receipts.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getLogs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  fromBlock: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  toBlock: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;latest&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: contractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  topics: [eventSignature]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nThe ReceiptsManager handles transaction receipts and event logs.\nconst receipts = await node.getReceiptsManager()\n \n// Get receipts for block\nconst blockReceipts = await receipts.getReceipts(blockHash)\n \n// Get receipt by transaction hash\nconst txReceipt = await receipts.getReceiptByTxHash(txHash)\n \n// Query logs\nconst logs = await receipts.getLogs({\n  fromBlock: 0n,\n  toBlock: &#x27;latest&#x27;,\n  address: contractAddress,\n  topics: [eventSignature]\n})\n","title":"ReceiptsManager","titles":["VM &amp; Submodules"]},"340":{"href":"/api/vm-and-submodules#working-with-logs","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Process event logs</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> log</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> of</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> logs) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    address: log.address,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    topics: log.topics,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    data: log.data,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    blockNumber: log.blockNumber,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transactionHash: log.transactionHash,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    logIndex: log.logIndex</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\n// Process event logs\nfor (const log of logs) {\n  console.log({\n    address: log.address,\n    topics: log.topics,\n    data: log.data,\n    blockNumber: log.blockNumber,\n    transactionHash: log.transactionHash,\n    logIndex: log.logIndex\n  })\n}\n","title":"Working with Logs","titles":["VM &amp; Submodules","ReceiptsManager"]},"341":{"href":"/api/vm-and-submodules#best-practices","html":"\n<p>1. <strong>Use High-Level APIs</strong>: Prefer <code>vm.runTx()</code> over direct EVM execution for full transaction support.</p>\n<p>2. <strong>State Management</strong>:\n- Use checkpoints for atomic operations\n- Clean up state after tests\n- Handle reverts properly</p>\n<p>3. <strong>Gas Optimization</strong>:\n- <a href=\"https://ethereum.org/en/developers/docs/gas/#why-are-gas-fees-necessary\">Estimate gas</a> before execution\n- Monitor gas usage in hot paths\n- Use appropriate gas limits</p>\n<p>4. <strong>Error Handling</strong>:\n- Check execution results\n- Handle exceptions gracefully\n- Validate inputs</p>\n","isPage":false,"text":"\n1. Use High-Level APIs: Prefer vm.runTx() over direct EVM execution for full transaction support.\n2. State Management:\n- Use checkpoints for atomic operations\n- Clean up state after tests\n- Handle reverts properly\n3. Gas Optimization:\n- Estimate gas before execution\n- Monitor gas usage in hot paths\n- Use appropriate gas limits\n4. Error Handling:\n- Check execution results\n- Handle exceptions gracefully\n- Validate inputs\n","title":"Best Practices","titles":["VM &amp; Submodules"]},"342":{"href":"/api/vm-and-submodules#related-topics","html":"\n<p>- <a href=\"./json-rpc\">JSON-RPC Support</a>\n- <a href=\"../core/managing-state\">Managing State</a>\n- <a href=\"../advanced/txpool\">Transaction Pool</a>\n- <a href=\"../advanced/receipts-and-logs\">Receipts &amp; Logs</a>\n- <a href=\"https://www.evm.codes/\">EVM Opcodes Reference</a>\n- <a href=\"https://ethereum.github.io/yellowpaper/paper.pdf\">Ethereum Yellow Paper</a>\n- <a href=\"https://github.com/ethereumjs/ethereumjs-monorepo\">ethereumjs/ethereumjs-monorepo</a></p>\n<p><strong>Up Next</strong><br/>\n- <a href=\"./json-rpc\">JSON-RPC Guide</a>\n- <a href=\"../advanced/txpool\">Advanced Usage</a></p>","isPage":false,"text":"\n- JSON-RPC Support\n- Managing State\n- Transaction Pool\n- Receipts &amp; Logs\n- EVM Opcodes Reference\n- Ethereum Yellow Paper\n- ethereumjs/ethereumjs-monorepo\nUp Next\n- JSON-RPC Guide\n- Advanced Usage","title":"Related Topics","titles":["VM &amp; Submodules"]},"343":{"href":"/api/vm#tevmvm","html":"</header>\n<blockquote>\n<p><strong>Generated API Documentation</strong>: View the full API documentation in the <a href=\"https://github.com/evmts/tevm-monorepo/tree/main/packages/vm/docs\">evmts/tevm-monorepo/packages/vm/docs</a> folder.</p>\n</blockquote>\n<p>The <code>@tevm/vm</code> package provides a custom implementation of the Ethereum Virtual Machine (VM), extending the functionality of <code>@ethereumjs/vm</code>. It&#x27;s responsible for executing Ethereum transactions and managing the blockchain state.</p>\n","isPage":true,"text":"\n\nGenerated API Documentation: View the full API documentation in the evmts/tevm-monorepo/packages/vm/docs folder.\n\nThe @tevm/vm package provides a custom implementation of the Ethereum Virtual Machine (VM), extending the functionality of @ethereumjs/vm. It&#x27;s responsible for executing Ethereum transactions and managing the blockchain state.\n","title":"@tevm/vm","titles":[]},"344":{"href":"/api/vm#installation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> @tevm/vm</span></span></code></pre>\n","isPage":false,"text":"\nnpm install @tevm/vm\n","title":"Installation","titles":["@tevm/vm"]},"345":{"href":"/api/vm#main-components","html":"\n","isPage":false,"text":"\n","title":"Main Components","titles":["@tevm/vm"]},"346":{"href":"/api/vm#creating-a-vm-instance","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createVm } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/vm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createCommon } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/common&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createStateManager } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/state&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createChain } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/blockchain&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createEvm } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/evm&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> common</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createCommon</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ chain: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;mainnet&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, hardfork: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;cancun&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> stateManager</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createStateManager</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({})</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> blockchain</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createChain</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ common })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> evm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createEvm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  stateManager,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  blockchain,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  common,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  evm,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  common,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  blockchain,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  stateManager,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nimport { createVm } from &#x27;@tevm/vm&#x27;\nimport { createCommon } from &#x27;@tevm/common&#x27;\nimport { createStateManager } from &#x27;@tevm/state&#x27;\nimport { createChain } from &#x27;@tevm/blockchain&#x27;\nimport { createEvm } from &#x27;@tevm/evm&#x27;\n \nconst common = createCommon({ chain: &#x27;mainnet&#x27;, hardfork: &#x27;cancun&#x27; })\nconst stateManager = createStateManager({})\nconst blockchain = await createChain({ common })\nconst evm = await createEvm({\n  stateManager,\n  blockchain,\n  common,\n})\n \nconst vm = createVm({\n  evm,\n  common,\n  blockchain,\n  stateManager,\n})\n","title":"Creating a VM Instance","titles":["@tevm/vm","Main Components"]},"347":{"href":"/api/vm#vm-options","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> VmOpts</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Chain configuration</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  common</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Common</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // State management</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  stateManager</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> StateManager</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Blockchain instance</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  blockchain</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Chain</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // EVM instance</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  evm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Evm</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Enable precompiled contracts</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  activatePrecompiles</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> boolean</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Initial genesis state</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  genesisState</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> GenesisState</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Set hardfork by block number or timestamp</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  setHardfork</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> boolean</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> BigIntLike</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Profiling options</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  profilerOpts</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> VMProfilerOpts</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\ninterface VmOpts {\n  // Chain configuration\n  common: Common\n  // State management\n  stateManager: StateManager\n  // Blockchain instance\n  blockchain: Chain\n  // EVM instance\n  evm: Evm\n  // Enable precompiled contracts\n  activatePrecompiles?: boolean\n  // Initial genesis state\n  genesisState?: GenesisState\n  // Set hardfork by block number or timestamp\n  setHardfork?: boolean | BigIntLike\n  // Profiling options\n  profilerOpts?: VMProfilerOpts\n}\n","title":"VM Options","titles":["@tevm/vm","Main Components"]},"348":{"href":"/api/vm#core-functionality","html":"\n","isPage":false,"text":"\n","title":"Core Functionality","titles":["@tevm/vm"]},"349":{"href":"/api/vm#block-operations","html":"\n","isPage":false,"text":"\n","title":"Block Operations","titles":["@tevm/vm","Core Functionality"]},"350":{"href":"/api/vm#building-blocks","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create a new block</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> blockBuilder</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">buildBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  parentBlock: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> blockchain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getCanonicalHeadBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Add transactions to the block</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> blockBuilder.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">addTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(transaction)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Build and seal the block</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> block</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> blockBuilder.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">build</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n","isPage":false,"text":"\n// Create a new block\nconst blockBuilder = await vm.buildBlock({\n  parentBlock: await blockchain.getCanonicalHeadBlock(),\n})\n \n// Add transactions to the block\nawait blockBuilder.addTransaction(transaction)\n \n// Build and seal the block\nconst block = await blockBuilder.build()\n","title":"Building Blocks","titles":["@tevm/vm","Core Functionality","Block Operations"]},"351":{"href":"/api/vm#running-blocks","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Run an existing block</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  block,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  generate: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Generate state root</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  skipBlockValidation: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\n// Run an existing block\nconst result = await vm.runBlock({\n  block,\n  generate: true, // Generate state root\n  skipBlockValidation: false,\n})\n","title":"Running Blocks","titles":["@tevm/vm","Core Functionality","Block Operations"]},"352":{"href":"/api/vm#transaction-operations","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Run a single transaction</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  tx: transaction,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  block: block,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  skipBalance: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  skipNonce: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\n// Run a single transaction\nconst result = await vm.runTx({\n  tx: transaction,\n  block: block,\n  skipBalance: false,\n  skipNonce: false,\n})\n","title":"Transaction Operations","titles":["@tevm/vm","Core Functionality"]},"353":{"href":"/api/vm#state-management","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Access state manager</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> account</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Modify state</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">putAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address, account)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Commit changes</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">commit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n","isPage":false,"text":"\n// Access state manager\nconst account = await vm.stateManager.getAccount(address)\n \n// Modify state\nawait vm.stateManager.putAccount(address, account)\n \n// Commit changes\nawait vm.stateManager.commit()\n","title":"State Management","titles":["@tevm/vm","Core Functionality"]},"354":{"href":"/api/vm#events","html":"\n<p>The VM emits events during block and transaction processing:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Block events</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.events.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">on</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;beforeBlock&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">resolve</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Handle before block execution</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  resolve</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.events.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">on</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;afterBlock&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">resolve</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Handle after block execution</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  resolve</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Transaction events</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.events.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">on</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;beforeTx&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">tx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">resolve</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Handle before transaction execution</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  resolve</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">vm.events.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">on</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;afterTx&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">data</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">resolve</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Handle after transaction execution</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  resolve</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nThe VM emits events during block and transaction processing:\n// Block events\nvm.events.on(&#x27;beforeBlock&#x27;, (block, resolve) =&gt; {\n  // Handle before block execution\n  resolve()\n})\n \nvm.events.on(&#x27;afterBlock&#x27;, (data, resolve) =&gt; {\n  // Handle after block execution\n  resolve()\n})\n \n// Transaction events\nvm.events.on(&#x27;beforeTx&#x27;, (tx, resolve) =&gt; {\n  // Handle before transaction execution\n  resolve()\n})\n \nvm.events.on(&#x27;afterTx&#x27;, (data, resolve) =&gt; {\n  // Handle after transaction execution\n  resolve()\n})\n","title":"Events","titles":["@tevm/vm"]},"355":{"href":"/api/vm#block-building","html":"\n<p>The <code>BlockBuilder</code> class provides a fluent interface for creating blocks:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">class</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> BlockBuilder</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Current gas used in the block</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  gasUsed</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Current blob gas used (EIP-4844)</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  blobGasUsed</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Get transaction receipts</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  get</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> transactionReceipts</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TxReceipt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[]</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Get miner rewards</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  get</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> minerValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Add a transaction to the block</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  async</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> addTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TypedTransaction</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ImpersonatedTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    opts</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">skipHardForkValidation</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> boolean</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  )</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">RunTxResult</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Build the final block</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  async</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> build</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">sealOpts</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> SealBlockOpts</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Block</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nThe BlockBuilder class provides a fluent interface for creating blocks:\nclass BlockBuilder {\n  // Current gas used in the block\n  gasUsed: bigint\n \n  // Current blob gas used (EIP-4844)\n  blobGasUsed: bigint\n \n  // Get transaction receipts\n  get transactionReceipts(): TxReceipt[]\n \n  // Get miner rewards\n  get minerValue(): bigint\n \n  // Add a transaction to the block\n  async addTransaction(\n    tx: TypedTransaction | ImpersonatedTx,\n    opts?: { skipHardForkValidation?: boolean }\n  ): Promise&lt;RunTxResult&gt;\n \n  // Build the final block\n  async build(sealOpts?: SealBlockOpts): Promise&lt;Block&gt;\n}\n","title":"Block Building","titles":["@tevm/vm"]},"356":{"href":"/api/vm#types","html":"\n","isPage":false,"text":"\n","title":"Types","titles":["@tevm/vm"]},"357":{"href":"/api/vm#runblockopts","html":"\n<p>Options for running a block:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> RunBlockOpts</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  block</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Block</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  root</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  generate</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> boolean</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  skipBlockValidation</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> boolean</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  skipHeaderValidation</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> boolean</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  skipNonce</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> boolean</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  skipBalance</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> boolean</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  setHardfork</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> boolean</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> BigIntLike</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  reportPreimages</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> boolean</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nOptions for running a block:\ninterface RunBlockOpts {\n  block: Block\n  root?: Uint8Array\n  generate?: boolean\n  skipBlockValidation?: boolean\n  skipHeaderValidation?: boolean\n  skipNonce?: boolean\n  skipBalance?: boolean\n  setHardfork?: boolean | BigIntLike\n  reportPreimages?: boolean\n}\n","title":"RunBlockOpts","titles":["@tevm/vm","Types"]},"358":{"href":"/api/vm#runtxopts","html":"\n<p>Options for running a transaction:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">interface</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> RunTxOpts</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TypedTransaction</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ImpersonatedTx</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  block</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Block</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  skipBalance</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> boolean</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  skipNonce</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> boolean</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  skipHardForkValidation</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> boolean</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  reportPreimages</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> boolean</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nOptions for running a transaction:\ninterface RunTxOpts {\n  tx: TypedTransaction | ImpersonatedTx\n  block?: Block\n  skipBalance?: boolean\n  skipNonce?: boolean\n  skipHardForkValidation?: boolean\n  reportPreimages?: boolean\n}\n","title":"RunTxOpts","titles":["@tevm/vm","Types"]},"359":{"href":"/api/vm#error-handling","html":"\n<p>The VM throws various error types for different scenarios:</p>\n<ul>\n<li><code>InvalidBlockError</code>: When block validation fails</li>\n<li><code>InvalidTransactionError</code>: When transaction validation fails</li>\n<li><code>InsufficientFundsError</code>: When account balance is insufficient</li>\n<li><code>NonceTooLowError</code>/<code>NonceTooHighError</code>: For nonce-related issues</li>\n<li><code>InvalidGasLimitError</code>: When gas limit is invalid</li>\n<li><code>EipNotEnabledError</code>: When using features from non-enabled EIPs</li>\n</ul>\n","isPage":false,"text":"\nThe VM throws various error types for different scenarios:\n\nInvalidBlockError: When block validation fails\nInvalidTransactionError: When transaction validation fails\nInsufficientFundsError: When account balance is insufficient\nNonceTooLowError/NonceTooHighError: For nonce-related issues\nInvalidGasLimitError: When gas limit is invalid\nEipNotEnabledError: When using features from non-enabled EIPs\n\n","title":"Error Handling","titles":["@tevm/vm"]},"360":{"href":"/api/vm#usage-example","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createVm } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/vm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createCommon } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/common&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Block } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/block&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create VM instance</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  common: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createCommon</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ chain: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;mainnet&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }),</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // ... other options</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Build and process a block</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> blockBuilder</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">buildBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  parentBlock: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.blockchain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getCanonicalHeadBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Add transactions</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> of</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> transactions) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> blockBuilder.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">addTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tx)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Build and seal the block</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> block</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> blockBuilder.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">build</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Run the block</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  block,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  generate: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  skipBlockValidation: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">false</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Process results</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Gas used:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, result.gasUsed)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Receipts:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, result.receipts)</span></span></code></pre>\n","isPage":false,"text":"\nimport { createVm } from &#x27;@tevm/vm&#x27;\nimport { createCommon } from &#x27;@tevm/common&#x27;\nimport { Block } from &#x27;@tevm/block&#x27;\n \n// Create VM instance\nconst vm = createVm({\n  common: createCommon({ chain: &#x27;mainnet&#x27; }),\n  // ... other options\n})\n \n// Build and process a block\nconst blockBuilder = await vm.buildBlock({\n  parentBlock: await vm.blockchain.getCanonicalHeadBlock(),\n})\n \n// Add transactions\nfor (const tx of transactions) {\n  await blockBuilder.addTransaction(tx)\n}\n \n// Build and seal the block\nconst block = await blockBuilder.build()\n \n// Run the block\nconst result = await vm.runBlock({\n  block,\n  generate: true,\n  skipBlockValidation: false,\n})\n \n// Process results\nconsole.log(&#x27;Gas used:&#x27;, result.gasUsed)\nconsole.log(&#x27;Receipts:&#x27;, result.receipts)\n","title":"Usage Example","titles":["@tevm/vm"]},"361":{"href":"/api/vm#see-also","html":"\n<ul>\n<li><a href=\"https://github.com/ethereumjs/ethereumjs-monorepo/tree/master/packages/vm\">EthereumJS VM Documentation</a></li>\n<li><a href=\"https://tevm.sh/reference/tevm/evm/\">Tevm EVM Documentation</a></li>\n<li><a href=\"https://tevm.sh/reference/tevm/state/\">Tevm State Documentation</a></li>\n</ul>","isPage":false,"text":"\n\nEthereumJS VM Documentation\nTevm EVM Documentation\nTevm State Documentation\n","title":"See Also","titles":["@tevm/vm"]},"362":{"href":"/examples/debugger-ui#building-a-debugger-ui","html":"</header>\n<p>This example demonstrates how to create a minimal EVM debugger interface using <a href=\"https://svelte.dev\">Svelte</a> and Tevm Node. The debugger will show:</p>\n<ul>\n<li>Live opcode execution</li>\n<li>Stack contents</li>\n<li>Memory state</li>\n<li>Error messages</li>\n<li>Gas usage</li>\n</ul>\n","isPage":true,"text":"\nThis example demonstrates how to create a minimal EVM debugger interface using Svelte and Tevm Node. The debugger will show:\n\nLive opcode execution\nStack contents\nMemory state\nError messages\nGas usage\n\n","title":"Building a Debugger UI","titles":[]},"363":{"href":"/examples/debugger-ui#project-setup","html":"\n<p>First, create a new Svelte project and install dependencies:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> create</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> vite@latest</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> tevm-debugger</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> --template</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> svelte-ts</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">cd</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> tevm-debugger</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> tevm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> tevm/contract</span></span></code></pre>\n","isPage":false,"text":"\nFirst, create a new Svelte project and install dependencies:\nnpm create vite@latest tevm-debugger -- --template svelte-ts\ncd tevm-debugger\nnpm install tevm tevm/contract\n","title":"Project Setup","titles":["Building a Debugger UI"]},"364":{"href":"/examples/debugger-ui#components","html":"\n","isPage":false,"text":"\n","title":"Components","titles":["Building a Debugger UI"]},"365":{"href":"/examples/debugger-ui#1-evmdebuggersvelte","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">script</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> lang</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ts&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { onMount, onDestroy } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;svelte&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/node&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  import</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { InterpreterStep } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/evm&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Store execution state</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> steps</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> InterpreterStep</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> currentStep</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> InterpreterStep</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> null</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> null</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> errors</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> gasUsed </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> isRunning </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> false</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Create Tevm Node</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Awaited</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">ReturnType</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">typeof</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.getVm&gt;&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  onMount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    setupEventListeners</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setupEventListeners</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Track execution steps</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.evm.events?.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">on</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;step&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">step</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      currentStep </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> step</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      steps </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">steps, step]</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">      next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">?.()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Track errors</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm.evm.events?.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">on</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;afterMessage&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (result.execResult.exceptionError) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        errors </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">errors, result.execResult.exceptionError.error]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      gasUsed </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result.execResult.executionGasUsed</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">      next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">?.()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Clean up</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  onDestroy</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    vm?.evm.events?.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">removeAllListeners</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Execute sample transaction</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  async</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> runSampleTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    isRunning </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> true</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    steps </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    errors </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        tx: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          data: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Your transaction data</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      errors </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">errors, error.message]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    isRunning </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> false</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">script</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;debugger&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;controls&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">button</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> on</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">click</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">runSampleTx</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> disabled</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">isRunning</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#F47067\">      {</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">isRunning </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;Running...&#x27;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> :</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;Run Transaction&#x27;</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">button</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;gas&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;Gas Used: </span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">gasUsed.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;execution&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">h3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;Current Step&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">h3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {#</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> currentStep}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;step&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;PC: </span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">currentStep.pc</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;Opcode: </span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">currentStep.opcode.name</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;Gas Left: </span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">currentStep.gasLeft.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;Depth: </span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">currentStep.depth</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {/</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;stack&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">h3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;Stack&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">h3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {#</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> currentStep?.stack}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;stack-items&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        {#</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">each</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> currentStep.stack </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">as</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> item}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;stack-item&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">item.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">16</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        {/</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">each</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {/</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;errors&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">h3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;Errors&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">h3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {#</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">each</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> errors </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">as</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> error}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;error&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">error</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    {/</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">each</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;history&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">h3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;Execution History (</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">steps.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">length</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> steps)&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">h3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;steps&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      {#</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">each</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> steps </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">as</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> step}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;history-step&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#F47067\">          {</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">step.opcode.name</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (Gas: </span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">step.gasLeft.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      {/</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">each</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">style</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">  .debugger</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    padding</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    display</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">grid</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    gap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    grid-template-columns</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">repeat</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">fr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">);</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">  .controls</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    grid-column</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> / </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">-1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    display</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">flex</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    justify-content</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">space-between</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    align-items</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">center</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">  button</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    padding</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0.5</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">#4a5568</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    color</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">white</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    border</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">none</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    border-radius</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0.25</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    cursor</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">pointer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">  button</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">:disabled</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    opacity</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0.5</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    cursor</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">not-allowed</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">  .execution</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">.stack</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">.errors</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">.history</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">#2d3748</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    padding</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    border-radius</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0.5</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    color</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">#e2e8f0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">  .stack-items</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    display</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">flex</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    flex-direction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">column</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    gap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0.5</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">  .stack-item</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    font-family</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">monospace</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    padding</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0.25</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">#4a5568</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    border-radius</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0.25</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">  .error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    color</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">#fc8181</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    padding</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0.5</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    margin</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0.25</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    background</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">#742a2a</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    border-radius</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0.25</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">  .steps</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    height</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">200</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">px</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    overflow-y</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">auto</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">  .history-step</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    padding</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0.25</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    border-bottom</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">px</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> solid</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> #4a5568</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    font-family</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">monospace</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">style</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span></code></pre>\n","isPage":false,"text":"\n&lt;script lang=&quot;ts&quot;&gt;\n  import { onMount, onDestroy } from &#x27;svelte&#x27;\n  import { createTevmNode } from &#x27;tevm/node&#x27;\n  import type { InterpreterStep } from &#x27;tevm/evm&#x27;\n \n  // Store execution state\n  let steps: InterpreterStep[] = []\n  let currentStep: InterpreterStep | null = null\n  let errors: string[] = []\n  let gasUsed = 0n\n  let isRunning = false\n \n  // Create Tevm Node\n  const node = createTevmNode()\n  let vm: Awaited&lt;ReturnType&lt;typeof node.getVm&gt;&gt;\n \n  onMount(async () =&gt; {\n    vm = await node.getVm()\n    setupEventListeners()\n  })\n \n  function setupEventListeners() {\n    // Track execution steps\n    vm.evm.events?.on(&#x27;step&#x27;, (step, next) =&gt; {\n      currentStep = step\n      steps = [...steps, step]\n      next?.()\n    })\n \n    // Track errors\n    vm.evm.events?.on(&#x27;afterMessage&#x27;, (result, next) =&gt; {\n      if (result.execResult.exceptionError) {\n        errors = [...errors, result.execResult.exceptionError.error]\n      }\n      gasUsed = result.execResult.executionGasUsed\n      next?.()\n    })\n  }\n \n  // Clean up\n  onDestroy(() =&gt; {\n    vm?.evm.events?.removeAllListeners()\n  })\n \n  // Execute sample transaction\n  async function runSampleTx() {\n    isRunning = true\n    steps = []\n    errors = []\n \n    try {\n      await vm.runTx({\n        tx: {\n          to: &#x27;0x1234...&#x27;,\n          data: &#x27;0x...&#x27;,  // Your transaction data\n        }\n      })\n    } catch (error) {\n      errors = [...errors, error.message]\n    }\n \n    isRunning = false\n  }\n&lt;/script&gt;\n \n&lt;div class=&quot;debugger&quot;&gt;\n  &lt;div class=&quot;controls&quot;&gt;\n    &lt;button on:click={runSampleTx} disabled={isRunning}&gt;\n      {isRunning ? &#x27;Running...&#x27; : &#x27;Run Transaction&#x27;}\n    &lt;/button&gt;\n    &lt;div class=&quot;gas&quot;&gt;Gas Used: {gasUsed.toString()}&lt;/div&gt;\n  &lt;/div&gt;\n \n  &lt;div class=&quot;execution&quot;&gt;\n    &lt;h3&gt;Current Step&lt;/h3&gt;\n    {#if currentStep}\n      &lt;div class=&quot;step&quot;&gt;\n        &lt;div&gt;PC: {currentStep.pc}&lt;/div&gt;\n        &lt;div&gt;Opcode: {currentStep.opcode.name}&lt;/div&gt;\n        &lt;div&gt;Gas Left: {currentStep.gasLeft.toString()}&lt;/div&gt;\n        &lt;div&gt;Depth: {currentStep.depth}&lt;/div&gt;\n      &lt;/div&gt;\n    {/if}\n  &lt;/div&gt;\n \n  &lt;div class=&quot;stack&quot;&gt;\n    &lt;h3&gt;Stack&lt;/h3&gt;\n    {#if currentStep?.stack}\n      &lt;div class=&quot;stack-items&quot;&gt;\n        {#each currentStep.stack as item}\n          &lt;div class=&quot;stack-item&quot;&gt;{item.toString(16)}&lt;/div&gt;\n        {/each}\n      &lt;/div&gt;\n    {/if}\n  &lt;/div&gt;\n \n  &lt;div class=&quot;errors&quot;&gt;\n    &lt;h3&gt;Errors&lt;/h3&gt;\n    {#each errors as error}\n      &lt;div class=&quot;error&quot;&gt;{error}&lt;/div&gt;\n    {/each}\n  &lt;/div&gt;\n \n  &lt;div class=&quot;history&quot;&gt;\n    &lt;h3&gt;Execution History ({steps.length} steps)&lt;/h3&gt;\n    &lt;div class=&quot;steps&quot;&gt;\n      {#each steps as step}\n        &lt;div class=&quot;history-step&quot;&gt;\n          {step.opcode.name} (Gas: {step.gasLeft.toString()})\n        &lt;/div&gt;\n      {/each}\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n \n&lt;style&gt;\n  .debugger {\n    padding: 1rem;\n    display: grid;\n    gap: 1rem;\n    grid-template-columns: repeat(2, 1fr);\n  }\n \n  .controls {\n    grid-column: 1 / -1;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n \n  button {\n    padding: 0.5rem 1rem;\n    background: #4a5568;\n    color: white;\n    border: none;\n    border-radius: 0.25rem;\n    cursor: pointer;\n  }\n \n  button:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n \n  .execution, .stack, .errors, .history {\n    background: #2d3748;\n    padding: 1rem;\n    border-radius: 0.5rem;\n    color: #e2e8f0;\n  }\n \n  .stack-items {\n    display: flex;\n    flex-direction: column;\n    gap: 0.5rem;\n  }\n \n  .stack-item {\n    font-family: monospace;\n    padding: 0.25rem;\n    background: #4a5568;\n    border-radius: 0.25rem;\n  }\n \n  .error {\n    color: #fc8181;\n    padding: 0.5rem;\n    margin: 0.25rem 0;\n    background: #742a2a;\n    border-radius: 0.25rem;\n  }\n \n  .steps {\n    height: 200px;\n    overflow-y: auto;\n  }\n \n  .history-step {\n    padding: 0.25rem;\n    border-bottom: 1px solid #4a5568;\n    font-family: monospace;\n  }\n&lt;/style&gt;\n","title":"1. EVMDebugger.svelte","titles":["Building a Debugger UI","Components"]},"366":{"href":"/examples/debugger-ui#2-appsvelte","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">script</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> lang</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ts&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> EVMDebugger </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;./lib/EVMDebugger.svelte&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">script</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">main</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">h1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;Tevm Debugger&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">h1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;</span><span style=\"color:#005CC5;--shiki-dark:#8DDB8C\">EVMDebugger</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> /&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">main</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">style</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">  main</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    max-width</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1200</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">px</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    margin</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> auto</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    padding</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">  h1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    color</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">#2d3748</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    margin-bottom</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">style</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span></code></pre>\n","isPage":false,"text":"\n&lt;script lang=&quot;ts&quot;&gt;\n  import EVMDebugger from &#x27;./lib/EVMDebugger.svelte&#x27;\n&lt;/script&gt;\n \n&lt;main&gt;\n  &lt;h1&gt;Tevm Debugger&lt;/h1&gt;\n  &lt;EVMDebugger /&gt;\n&lt;/main&gt;\n \n&lt;style&gt;\n  main {\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 2rem;\n  }\n \n  h1 {\n    color: #2d3748;\n    margin-bottom: 2rem;\n  }\n&lt;/style&gt;\n","title":"2. App.svelte","titles":["Building a Debugger UI","Components"]},"367":{"href":"/examples/debugger-ui#advanced-features","html":"\n","isPage":false,"text":"\n","title":"Advanced Features","titles":["Building a Debugger UI"]},"368":{"href":"/examples/debugger-ui#memory-viewer-component","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">script</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> lang</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ts&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  export</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> memory</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  export</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> startOffset </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  export</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> bytesPerRow </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 16</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">  $</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: rows </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> chunk</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(memory, bytesPerRow)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> chunk</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">array</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Uint8Array</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">size</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> chunks</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> array.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">length</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> size) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      chunks.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">push</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(array.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">slice</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(i, i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> size))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> chunks</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> formatByte</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">byte</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> byte.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">16</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">padStart</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">2</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> formatAscii</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">byte</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> byte </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 32</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> &amp;&amp;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> byte </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 126</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> ?</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> String.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">fromCharCode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(byte) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;.&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">script</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;memory-viewer&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  {#</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">each</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> rows </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">as</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> row, i}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;memory-row&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">span</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;offset&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#F47067\">        {</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(startOffset </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> bytesPerRow).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">16</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">padStart</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">8</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">span</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">span</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;hex&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        {#</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">each</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> row </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">as</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> byte}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#F47067\">          {</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">formatByte</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(byte)</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        {/</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">each</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">span</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">span</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ascii&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        {#</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">each</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> row </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">as</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> byte}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#F47067\">          {</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">formatAscii</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(byte)</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        {/</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">each</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">span</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  {/</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">each</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">style</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">  .memory-viewer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    font-family</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">monospace</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    white-space</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">pre</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">  .memory-row</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    display</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">flex</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    gap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    padding</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0.25</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">  .offset</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    color</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">#718096</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">  .hex</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    letter-spacing</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0.1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">em</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">  .ascii</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    color</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">#718096</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">style</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span></code></pre>\n","isPage":false,"text":"\n&lt;script lang=&quot;ts&quot;&gt;\n  export let memory: Uint8Array\n  export let startOffset = 0\n  export let bytesPerRow = 16\n \n  $: rows = chunk(memory, bytesPerRow)\n \n  function chunk(array: Uint8Array, size: number) {\n    const chunks = []\n    for (let i = 0; i &lt; array.length; i += size) {\n      chunks.push(array.slice(i, i + size))\n    }\n    return chunks\n  }\n \n  function formatByte(byte: number) {\n    return byte.toString(16).padStart(2, &#x27;0&#x27;)\n  }\n \n  function formatAscii(byte: number) {\n    return byte &gt;= 32 &amp;&amp; byte &lt;= 126 ? String.fromCharCode(byte) : &#x27;.&#x27;\n  }\n&lt;/script&gt;\n \n&lt;div class=&quot;memory-viewer&quot;&gt;\n  {#each rows as row, i}\n    &lt;div class=&quot;memory-row&quot;&gt;\n      &lt;span class=&quot;offset&quot;&gt;\n        {(startOffset + i * bytesPerRow).toString(16).padStart(8, &#x27;0&#x27;)}:\n      &lt;/span&gt;\n      &lt;span class=&quot;hex&quot;&gt;\n        {#each row as byte}\n          {formatByte(byte)}\n        {/each}\n      &lt;/span&gt;\n      &lt;span class=&quot;ascii&quot;&gt;\n        {#each row as byte}\n          {formatAscii(byte)}\n        {/each}\n      &lt;/span&gt;\n    &lt;/div&gt;\n  {/each}\n&lt;/div&gt;\n \n&lt;style&gt;\n  .memory-viewer {\n    font-family: monospace;\n    white-space: pre;\n  }\n \n  .memory-row {\n    display: flex;\n    gap: 1rem;\n    padding: 0.25rem 0;\n  }\n \n  .offset {\n    color: #718096;\n  }\n \n  .hex {\n    letter-spacing: 0.1em;\n  }\n \n  .ascii {\n    color: #718096;\n  }\n&lt;/style&gt;\n","title":"Memory Viewer Component","titles":["Building a Debugger UI","Advanced Features"]},"369":{"href":"/examples/debugger-ui#storage-viewer-component","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">script</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> lang</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ts&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  import</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> type</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Address } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/utils&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/node&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  export</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Address</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> storage </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> loading </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> false</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  async</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> loadStorage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    loading </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> true</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">      const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> dump</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">dumpStorage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      storage </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(Object.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">entries</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(dump))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Failed to load storage:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, error)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    loading </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> false</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">script</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;storage&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">button</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> on</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">click</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">loadStorage</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> disabled</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">loading</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#F47067\">    {</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">loading </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;Loading...&#x27;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> :</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;Load Storage&#x27;</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">button</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  {#</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> storage.size </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&gt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;storage-items&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      {#</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">each</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">storage] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">as</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [slot, value]}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;storage-item&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">span</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;slot&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">slot</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">span</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">span</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;value&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">value</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">span</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      {/</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">each</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  {/</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">style</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">  .storage</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    padding</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">  .storage-items</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    margin-top</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">  .storage-item</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    display</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">flex</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    gap</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    padding</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0.25</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">rem</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    font-family</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">monospace</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">  .slot</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">    color</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">#718096</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">style</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span></code></pre>\n","isPage":false,"text":"\n&lt;script lang=&quot;ts&quot;&gt;\n  import type { Address } from &#x27;tevm/utils&#x27;\n  import { createTevmNode } from &#x27;tevm/node&#x27;\n \n  export let address: Address\n \n  let storage = new Map&lt;string, string&gt;()\n  let loading = false\n \n  const node = createTevmNode()\n \n  async function loadStorage() {\n    loading = true\n    try {\n      const vm = await node.getVm()\n      const dump = await vm.stateManager.dumpStorage(address)\n      storage = new Map(Object.entries(dump))\n    } catch (error) {\n      console.error(&#x27;Failed to load storage:&#x27;, error)\n    }\n    loading = false\n  }\n&lt;/script&gt;\n \n&lt;div class=&quot;storage&quot;&gt;\n  &lt;button on:click={loadStorage} disabled={loading}&gt;\n    {loading ? &#x27;Loading...&#x27; : &#x27;Load Storage&#x27;}\n  &lt;/button&gt;\n \n  {#if storage.size &gt; 0}\n    &lt;div class=&quot;storage-items&quot;&gt;\n      {#each [...storage] as [slot, value]}\n        &lt;div class=&quot;storage-item&quot;&gt;\n          &lt;span class=&quot;slot&quot;&gt;{slot}:&lt;/span&gt;\n          &lt;span class=&quot;value&quot;&gt;{value}&lt;/span&gt;\n        &lt;/div&gt;\n      {/each}\n    &lt;/div&gt;\n  {/if}\n&lt;/div&gt;\n \n&lt;style&gt;\n  .storage {\n    padding: 1rem;\n  }\n \n  .storage-items {\n    margin-top: 1rem;\n  }\n \n  .storage-item {\n    display: flex;\n    gap: 1rem;\n    padding: 0.25rem 0;\n    font-family: monospace;\n  }\n \n  .slot {\n    color: #718096;\n  }\n&lt;/style&gt;\n","title":"Storage Viewer Component","titles":["Building a Debugger UI","Advanced Features"]},"370":{"href":"/examples/debugger-ui#usage","html":"\n<ol>\n<li>Create the project structure:</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">tevm-debugger/</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">├── src/</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   ├── lib/</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   │   ├── EVMDebugger.svelte</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   │   ├── MemoryViewer.svelte</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   │   └── StorageViewer.svelte</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   ├── App.svelte</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">│   └── main.ts</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">└── package.json</span></span></code></pre>\n<ol start=\"2\">\n<li>Run the development server:</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> run</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> dev</span></span></code></pre>\n<ol start=\"3\">\n<li>Use the debugger:</li>\n</ol>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Example contract deployment</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bytecode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;0x...&#x27;</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // Your contract bytecode</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  tx: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    data: bytecode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Example contract interaction</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  tx: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,    </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Contract address</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    data: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Encoded function call</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\n\nCreate the project structure:\n\ntevm-debugger/\n├── src/\n│   ├── lib/\n│   │   ├── EVMDebugger.svelte\n│   │   ├── MemoryViewer.svelte\n│   │   └── StorageViewer.svelte\n│   ├── App.svelte\n│   └── main.ts\n└── package.json\n\nRun the development server:\n\nnpm run dev\n\nUse the debugger:\n\n// Example contract deployment\nconst bytecode = &#x27;0x...&#x27; // Your contract bytecode\nawait vm.runTx({\n  tx: {\n    data: bytecode\n  }\n})\n \n// Example contract interaction\nawait vm.runTx({\n  tx: {\n    to: &#x27;0x...&#x27;,    // Contract address\n    data: &#x27;0x...&#x27;,  // Encoded function call\n  }\n})\n","title":"Usage","titles":["Building a Debugger UI"]},"371":{"href":"/examples/debugger-ui#customization","html":"\n","isPage":false,"text":"\n","title":"Customization","titles":["Building a Debugger UI"]},"372":{"href":"/examples/debugger-ui#adding-transaction-history","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">script</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> lang</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ts&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { writable } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;svelte/store&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transactions</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> writable</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;{</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    hash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    to</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">    status</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;success&#x27;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> |</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;error&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }[]&gt;([])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  vm.evm.events?.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">on</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;afterMessage&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">result</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transactions.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">update</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">txs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">txs, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      hash: result.execResult.hash?.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">??</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      to: result.execResult.to?.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">??</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      data: result.execResult.data?.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;hex&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">??</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      status: result.execResult.exceptionError </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">?</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;error&#x27;</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> :</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;success&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }])</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">?.()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">script</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;transactions&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">h3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;Transaction History&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">h3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  {#</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">each</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> $transactions </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">as</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> tx}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;transaction&quot;</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">:</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">tx.status </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">===</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;error&#x27;</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;Hash: </span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">tx.hash</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;To: </span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">tx.to</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;Data: </span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">tx.data</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  {/</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">each</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span></code></pre>\n","isPage":false,"text":"\n&lt;script lang=&quot;ts&quot;&gt;\n  import { writable } from &#x27;svelte/store&#x27;\n \n  const transactions = writable&lt;{\n    hash: string\n    to: string\n    data: string\n    status: &#x27;success&#x27; | &#x27;error&#x27;\n  }[]&gt;([])\n \n  vm.evm.events?.on(&#x27;afterMessage&#x27;, (result, next) =&gt; {\n    transactions.update(txs =&gt; [...txs, {\n      hash: result.execResult.hash?.toString() ?? &#x27;&#x27;,\n      to: result.execResult.to?.toString() ?? &#x27;&#x27;,\n      data: result.execResult.data?.toString(&#x27;hex&#x27;) ?? &#x27;&#x27;,\n      status: result.execResult.exceptionError ? &#x27;error&#x27; : &#x27;success&#x27;\n    }])\n    next?.()\n  })\n&lt;/script&gt;\n \n&lt;div class=&quot;transactions&quot;&gt;\n  &lt;h3&gt;Transaction History&lt;/h3&gt;\n  {#each $transactions as tx}\n    &lt;div class=&quot;transaction&quot; class:error={tx.status === &#x27;error&#x27;}&gt;\n      &lt;div&gt;Hash: {tx.hash}&lt;/div&gt;\n      &lt;div&gt;To: {tx.to}&lt;/div&gt;\n      &lt;div&gt;Data: {tx.data}&lt;/div&gt;\n    &lt;/div&gt;\n  {/each}\n&lt;/div&gt;\n","title":"Adding Transaction History","titles":["Building a Debugger UI","Customization"]},"373":{"href":"/examples/debugger-ui#adding-gas-profiling","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">script</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> lang</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;ts&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> gasProfile</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, { </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">count</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> number</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">totalGas</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }&gt;()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  vm.evm.events?.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">on</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;step&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">step</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> opName</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> step.opcode.name</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> gasCost</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> BigInt</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(step.opcode.fee)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> stats</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> gasProfile.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(opName) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">??</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { count: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, totalGas: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    stats.count</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    stats.totalGas </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> gasCost</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    gasProfile.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(opName, stats)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    next</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">?.()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">script</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#6F42C1;--shiki-dark:#6CB6FF\"> class</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">=</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&quot;gas-profile&quot;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">h3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;Gas Profile&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">h3</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">table</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">thead</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">tr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">th</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;Opcode&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">th</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">th</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;Count&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">th</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">th</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;Total Gas&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">th</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">tr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">thead</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">tbody</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      {#</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">each</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">gasProfile] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">as</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [opcode, stats]}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">tr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">td</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">opcode</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">td</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">td</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">stats.count</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">td</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">          &lt;</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">td</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span><span style=\"color:#24292E;--shiki-dark:#F47067\">{</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">stats.totalGas.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span><span style=\"color:#24292E;--shiki-dark:#F47067\">}</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">td</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">        &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">tr</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      {/</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">each</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">tbody</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  &lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">table</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;/</span><span style=\"color:#22863A;--shiki-dark:#8DDB8C\">div</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;</span></span></code></pre>\n","isPage":false,"text":"\n&lt;script lang=&quot;ts&quot;&gt;\n  const gasProfile = new Map&lt;string, { count: number, totalGas: bigint }&gt;()\n \n  vm.evm.events?.on(&#x27;step&#x27;, (step, next) =&gt; {\n    const opName = step.opcode.name\n    const gasCost = BigInt(step.opcode.fee)\n \n    const stats = gasProfile.get(opName) ?? { count: 0, totalGas: 0n }\n    stats.count++\n    stats.totalGas += gasCost\n    gasProfile.set(opName, stats)\n \n    next?.()\n  })\n&lt;/script&gt;\n \n&lt;div class=&quot;gas-profile&quot;&gt;\n  &lt;h3&gt;Gas Profile&lt;/h3&gt;\n  &lt;table&gt;\n    &lt;thead&gt;\n      &lt;tr&gt;\n        &lt;th&gt;Opcode&lt;/th&gt;\n        &lt;th&gt;Count&lt;/th&gt;\n        &lt;th&gt;Total Gas&lt;/th&gt;\n      &lt;/tr&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n      {#each [...gasProfile] as [opcode, stats]}\n        &lt;tr&gt;\n          &lt;td&gt;{opcode}&lt;/td&gt;\n          &lt;td&gt;{stats.count}&lt;/td&gt;\n          &lt;td&gt;{stats.totalGas.toString()}&lt;/td&gt;\n        &lt;/tr&gt;\n      {/each}\n    &lt;/tbody&gt;\n  &lt;/table&gt;\n&lt;/div&gt;\n","title":"Adding Gas Profiling","titles":["Building a Debugger UI","Customization"]},"374":{"href":"/examples/debugger-ui#related-topics","html":"\n<ul>\n<li><a href=\"../api/evm-events\">EVM Events</a></li>\n<li><a href=\"../advanced/performance-profiler\">Performance Profiler</a></li>\n</ul>","isPage":false,"text":"\n\nEVM Events\nPerformance Profiler\n","title":"Related Topics","titles":["Building a Debugger UI"]},"375":{"href":"/examples/ethers#using-with-ethersjs","html":"</header>\n<p>This guide demonstrates how to use Tevm Node with Ethers.js, enabling seamless integration with the popular Ethereum development library.</p>\n","isPage":true,"text":"\nThis guide demonstrates how to use Tevm Node with Ethers.js, enabling seamless integration with the popular Ethereum development library.\n","title":"Using with Ethers.js","titles":[]},"376":{"href":"/examples/ethers#basic-setup","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { requestEip1193 } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/decorators&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { BrowserProvider } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;ethers&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create Tevm Node with EIP-1193 support</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">extend</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">requestEip1193</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create Ethers provider</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> provider</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> BrowserProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Basic provider usage</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> block</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> provider.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBlockNumber</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> balance</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> provider.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBalance</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nimport { createTevmNode } from &#x27;tevm&#x27;\nimport { requestEip1193 } from &#x27;tevm/decorators&#x27;\nimport { BrowserProvider } from &#x27;ethers&#x27;\n \n// Create Tevm Node with EIP-1193 support\nconst node = createTevmNode().extend(requestEip1193())\n \n// Create Ethers provider\nconst provider = new BrowserProvider(node)\n \n// Basic provider usage\nconst block = await provider.getBlockNumber()\nconst balance = await provider.getBalance(&#x27;0x1234...&#x27;)\n","title":"Basic Setup","titles":["Using with Ethers.js"]},"377":{"href":"/examples/ethers#contract-interaction","html":"\n","isPage":false,"text":"\n","title":"Contract Interaction","titles":["Using with Ethers.js"]},"378":{"href":"/examples/ethers#1-reading-contract-state","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Contract } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/ethers&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { parseAbi } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Contract setup</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> parseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function balanceOf(address) view returns (uint256)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function symbol() view returns (string)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function decimals() view returns (uint8)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tokenAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48&#x27;</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // USDC</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tokenAddress, abi, provider)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Read multiple values</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">balance</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">symbol</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> Promise</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">all</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  contract.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">balanceOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  contract.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">symbol</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  contract.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">decimals</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">`${</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">symbol</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">} Balance: ${</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">formatUnits</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">(</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">balance</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">, </span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">decimals</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">)</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">}`</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nimport { Contract } from &#x27;@tevm/ethers&#x27;\nimport { parseAbi } from &#x27;tevm&#x27;\n \n// Contract setup\nconst abi = parseAbi([\n  &#x27;function balanceOf(address) view returns (uint256)&#x27;,\n  &#x27;function symbol() view returns (string)&#x27;,\n  &#x27;function decimals() view returns (uint8)&#x27;,\n])\n \nconst tokenAddress = &#x27;0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48&#x27; // USDC\nconst contract = new Contract(tokenAddress, abi, provider)\n \n// Read multiple values\nconst [balance, symbol, decimals] = await Promise.all([\n  contract.balanceOf(&#x27;0x1234...&#x27;),\n  contract.symbol(),\n  contract.decimals(),\n])\n \nconsole.log(`${symbol} Balance: ${formatUnits(balance, decimals)}`)\n","title":"1. Reading Contract State","titles":["Using with Ethers.js","Contract Interaction"]},"379":{"href":"/examples/ethers#2-writing-to-contracts","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { ContractTransactionResponse } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;ethers&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get signer</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> provider.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> parseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function transfer(address to, uint256 amount) returns (bool)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tokenAddress, abi, signer)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Send transaction</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;0x5678...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  parseUnits</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;100&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">6</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">as</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> ContractTransactionResponse</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Wait for confirmation</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> receipt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> tx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">wait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Transaction confirmed:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, receipt.hash)</span></span></code></pre>\n","isPage":false,"text":"\nimport { ContractTransactionResponse } from &#x27;ethers&#x27;\n \n// Get signer\nconst signer = await provider.getSigner()\n \nconst abi = parseAbi([\n  &#x27;function transfer(address to, uint256 amount) returns (bool)&#x27;,\n])\n \nconst contract = new Contract(tokenAddress, abi, signer)\n \n// Send transaction\nconst tx = await contract.transfer(\n  &#x27;0x5678...&#x27;,\n  parseUnits(&#x27;100&#x27;, 6)\n) as ContractTransactionResponse\n \n// Wait for confirmation\nconst receipt = await tx.wait()\nconsole.log(&#x27;Transaction confirmed:&#x27;, receipt.hash)\n","title":"2. Writing to Contracts","titles":["Using with Ethers.js","Contract Interaction"]},"380":{"href":"/examples/ethers#event-handling","html":"\n","isPage":false,"text":"\n","title":"Event Handling","titles":["Using with Ethers.js"]},"381":{"href":"/examples/ethers#1-listening-for-events","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> parseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;event Transfer(address indexed from, address indexed to, uint256 value)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function transfer(address to, uint256 amount) returns (bool)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tokenAddress, abi, provider)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Type-safe event handling</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">type</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TransferEvent</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  from</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  to</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  amount</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> bigint</span></span>\n<span class=\"line\"><span style=\"color:#E36209;--shiki-dark:#F69D50\">  event</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> any</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> events</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> TransferEvent</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[] </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">contract.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">on</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">from</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">to</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">amount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">event</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  events.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">push</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ from, to, amount, event })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Remove listener when done</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">contract.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">off</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n","isPage":false,"text":"\nconst abi = parseAbi([\n  &#x27;event Transfer(address indexed from, address indexed to, uint256 value)&#x27;,\n  &#x27;function transfer(address to, uint256 amount) returns (bool)&#x27;,\n])\n \nconst contract = new Contract(tokenAddress, abi, provider)\n \n// Type-safe event handling\ntype TransferEvent = {\n  from: string\n  to: string\n  amount: bigint\n  event: any\n}\n \nconst events: TransferEvent[] = []\ncontract.on(&#x27;Transfer&#x27;, (from, to, amount, event) =&gt; {\n  events.push({ from, to, amount, event })\n})\n \n// Remove listener when done\ncontract.off(&#x27;Transfer&#x27;)\n","title":"1. Listening for Events","titles":["Using with Ethers.js","Event Handling"]},"382":{"href":"/examples/ethers#2-querying-past-events","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> parseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;event Transfer(address indexed from, address indexed to, uint256 value)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tokenAddress, abi, provider)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create filter</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> filter</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract.filters.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">Transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get past events</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> events</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">queryFilter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(filter, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;latest&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> event</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> of</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> events) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">from</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">to</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> event.args</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Historical transfer:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    from,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    to,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    value: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">formatUnits</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(value, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">6</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nconst abi = parseAbi([\n  &#x27;event Transfer(address indexed from, address indexed to, uint256 value)&#x27;,\n])\n \nconst contract = new Contract(tokenAddress, abi, provider)\n \n// Create filter\nconst filter = contract.filters.Transfer()\n \n// Get past events\nconst events = await contract.queryFilter(filter, -1000, &#x27;latest&#x27;)\n \nfor (const event of events) {\n  const { from, to, value } = event.args\n  console.log(&#x27;Historical transfer:&#x27;, {\n    from,\n    to,\n    value: formatUnits(value, 6),\n  })\n}\n","title":"2. Querying Past Events","titles":["Using with Ethers.js","Event Handling"]},"383":{"href":"/examples/ethers#advanced-usage","html":"\n","isPage":false,"text":"\n","title":"Advanced Usage","titles":["Using with Ethers.js"]},"384":{"href":"/examples/ethers#1-contract-deployment","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { ContractFactory } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;ethers&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> parseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function getValue() view returns (uint256)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get signer</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> provider.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create factory</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> factory</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> ContractFactory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(abi, bytecode, signer)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Deploy contract</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> factory.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deploy</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">waitForDeployment</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Contract deployed to:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span></code></pre>\n","isPage":false,"text":"\nimport { ContractFactory } from &#x27;ethers&#x27;\n \nconst abi = parseAbi([\n  &#x27;function getValue() view returns (uint256)&#x27;,\n])\n \n// Get signer\nconst signer = await provider.getSigner()\n \n// Create factory\nconst factory = new ContractFactory(abi, bytecode, signer)\n \n// Deploy contract\nconst contract = await factory.deploy()\nawait contract.waitForDeployment()\n \nconsole.log(&#x27;Contract deployed to:&#x27;, await contract.getAddress())\n","title":"1. Contract Deployment","titles":["Using with Ethers.js","Advanced Usage"]},"385":{"href":"/examples/ethers#2-low-level-transaction-handling","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create transaction</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseEther</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;1&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Sign transaction</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> provider.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signedTx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> signer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">signTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tx)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Send raw transaction</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> hash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> provider.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">send</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;eth_sendRawTransaction&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [signedTx])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Wait for confirmation</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> receipt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> provider.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">waitForTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(hash)</span></span></code></pre>\n","isPage":false,"text":"\n// Create transaction\nconst tx = {\n  to: &#x27;0x1234...&#x27;,\n  value: parseEther(&#x27;1&#x27;),\n  data: &#x27;0x&#x27;,\n}\n \n// Sign transaction\nconst signer = await provider.getSigner()\nconst signedTx = await signer.signTransaction(tx)\n \n// Send raw transaction\nconst hash = await provider.send(&#x27;eth_sendRawTransaction&#x27;, [signedTx])\n \n// Wait for confirmation\nconst receipt = await provider.waitForTransaction(hash)\n","title":"2. Low-level Transaction Handling","titles":["Using with Ethers.js","Advanced Usage"]},"386":{"href":"/examples/ethers#3-interface-encodingdecoding","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Interface } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;ethers&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { parseAbi } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create interface</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> parseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function transfer(address to, uint256 amount) returns (bool)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;event Transfer(address indexed from, address indexed to, uint256 value)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> iface</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Interface</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(abi)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Encode function data</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> data</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> iface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, [</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;0x1234...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  parseUnits</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;100&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">6</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Decode event logs</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> log</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receipt.logs[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> decodedLog</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> iface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseLog</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  topics: log.topics,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: log.data,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nimport { Interface } from &#x27;ethers&#x27;\nimport { parseAbi } from &#x27;tevm&#x27;\n \n// Create interface\nconst abi = parseAbi([\n  &#x27;function transfer(address to, uint256 amount) returns (bool)&#x27;,\n  &#x27;event Transfer(address indexed from, address indexed to, uint256 value)&#x27;,\n])\nconst iface = new Interface(abi)\n \n// Encode function data\nconst data = iface.encodeFunctionData(&#x27;transfer&#x27;, [\n  &#x27;0x1234...&#x27;,\n  parseUnits(&#x27;100&#x27;, 6),\n])\n \n// Decode event logs\nconst log = receipt.logs[0]\nconst decodedLog = iface.parseLog({\n  topics: log.topics,\n  data: log.data,\n})\n","title":"3. Interface Encoding/Decoding","titles":["Using with Ethers.js","Advanced Usage"]},"387":{"href":"/examples/ethers#testing-with-ethers","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { expect } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;chai&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { loadFixture } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@nomicfoundation/hardhat-network-helpers&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { parseAbi } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">describe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Token Contract&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  async</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deployTokenFixture</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Setup Tevm Node</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> provider</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> BrowserProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> signer</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> provider.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getSigner</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> parseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">      &#x27;function balanceOf(address) view returns (uint256)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">      &#x27;function transfer(address to, uint256 amount) returns (bool)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Deploy contract</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> factory</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> ContractFactory</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(abi, bytecode, signer)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> token</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> factory.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deploy</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> token.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">waitForDeployment</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { token, signer, provider }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  it</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Should handle basic operations&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">token</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">signer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> loadFixture</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(deployTokenFixture)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Test initial state</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    expect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> token.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">balanceOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(signer.address)).to.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">equal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(initialSupply)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Test transfer</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> token.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    expect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> token.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">balanceOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)).to.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">equal</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nimport { expect } from &#x27;chai&#x27;\nimport { loadFixture } from &#x27;@nomicfoundation/hardhat-network-helpers&#x27;\nimport { parseAbi } from &#x27;tevm&#x27;\n \ndescribe(&#x27;Token Contract&#x27;, () =&gt; {\n  async function deployTokenFixture() {\n    // Setup Tevm Node\n    const node = createTevmNode()\n    const provider = new BrowserProvider(node)\n    const signer = await provider.getSigner()\n \n    const abi = parseAbi([\n      &#x27;function balanceOf(address) view returns (uint256)&#x27;,\n      &#x27;function transfer(address to, uint256 amount) returns (bool)&#x27;,\n    ])\n \n    // Deploy contract\n    const factory = new ContractFactory(abi, bytecode, signer)\n    const token = await factory.deploy()\n    await token.waitForDeployment()\n \n    return { token, signer, provider }\n  }\n \n  it(&#x27;Should handle basic operations&#x27;, async () =&gt; {\n    const { token, signer } = await loadFixture(deployTokenFixture)\n \n    // Test initial state\n    expect(await token.balanceOf(signer.address)).to.equal(initialSupply)\n \n    // Test transfer\n    await token.transfer(&#x27;0x1234...&#x27;, 100)\n    expect(await token.balanceOf(&#x27;0x1234...&#x27;)).to.equal(100)\n  })\n})\n","title":"Testing with Ethers","titles":["Using with Ethers.js"]},"388":{"href":"/examples/ethers#best-practices","html":"\n<ol>\n<li>\n<p><strong>Contract Initialization</strong>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { parseAbi } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Contract } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;@tevm/ethers&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Reuse contract instances</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contracts</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Map</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">Contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">&gt;()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> string</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contracts.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">get</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">!</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">contract) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> parseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">      &#x27;function balanceOf(address) view returns (uint256)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">      &#x27;function transfer(address to, uint256 amount) returns (bool)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ])</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    contract </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address, abi, provider)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    contracts.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">set</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address, contract)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n</li>\n<li>\n<p><strong>Error Handling</strong>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> parseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function riskyFunction() returns (uint256)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address, abi, provider)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">riskyFunction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> tx.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">wait</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error.code </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">===</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;CALL_EXCEPTION&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Contract call failed:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, error.reason)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">else</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> if</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error.code </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">===</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;NETWORK_ERROR&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">error</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Network error:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, error.message)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  throw</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> error</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n</li>\n<li>\n<p><strong>Gas Management</strong>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> parseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;function transfer(address to, uint256 amount) returns (bool)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address, abi, provider)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Estimate gas with buffer</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> gasEstimate</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract.transfer.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">estimateGas</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  recipient,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  amount</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  recipient,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  amount,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    gasLimit: gasEstimate </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 120</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> /</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 100</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 20% buffer</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span></code></pre>\n</li>\n<li>\n<p><strong>Event Management</strong>:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> abi</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> parseAbi</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">  &#x27;event Transfer(address indexed from, address indexed to, uint256 value)&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address, abi, provider)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Clean up listeners</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setupEventListeners</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">:</span><span style=\"color:#6F42C1;--shiki-dark:#F69D50\"> Contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> handler</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">...</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">args</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Handle event</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  contract.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">on</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, handler)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    contract.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">off</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, handler)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> cleanup</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setupEventListeners</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(contract)</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Later...</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">cleanup</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span></code></pre>\n</li>\n</ol>\n","isPage":false,"text":"\n\n\nContract Initialization:\nimport { parseAbi } from &#x27;tevm&#x27;\nimport { Contract } from &#x27;@tevm/ethers&#x27;\n \n// Reuse contract instances\nconst contracts = new Map&lt;string, Contract&gt;()\n \nfunction getContract(address: string): Contract {\n  let contract = contracts.get(address)\n  if (!contract) {\n    const abi = parseAbi([\n      &#x27;function balanceOf(address) view returns (uint256)&#x27;,\n      &#x27;function transfer(address to, uint256 amount) returns (bool)&#x27;,\n    ])\n    contract = new Contract(address, abi, provider)\n    contracts.set(address, contract)\n  }\n  return contract\n}\n\n\nError Handling:\nconst abi = parseAbi([\n  &#x27;function riskyFunction() returns (uint256)&#x27;,\n])\nconst contract = new Contract(address, abi, provider)\n \ntry {\n  const tx = await contract.riskyFunction()\n  await tx.wait()\n} catch (error) {\n  if (error.code === &#x27;CALL_EXCEPTION&#x27;) {\n    console.error(&#x27;Contract call failed:&#x27;, error.reason)\n  } else if (error.code === &#x27;NETWORK_ERROR&#x27;) {\n    console.error(&#x27;Network error:&#x27;, error.message)\n  }\n  throw error\n}\n\n\nGas Management:\nconst abi = parseAbi([\n  &#x27;function transfer(address to, uint256 amount) returns (bool)&#x27;,\n])\nconst contract = new Contract(address, abi, provider)\n \n// Estimate gas with buffer\nconst gasEstimate = await contract.transfer.estimateGas(\n  recipient,\n  amount\n)\n \nconst tx = await contract.transfer(\n  recipient,\n  amount,\n  {\n    gasLimit: gasEstimate * 120n / 100n, // 20% buffer\n  }\n)\n\n\nEvent Management:\nconst abi = parseAbi([\n  &#x27;event Transfer(address indexed from, address indexed to, uint256 value)&#x27;,\n])\nconst contract = new Contract(address, abi, provider)\n \n// Clean up listeners\nfunction setupEventListeners(contract: Contract) {\n  const handler = (...args) =&gt; {\n    // Handle event\n  }\n \n  contract.on(&#x27;Transfer&#x27;, handler)\n \n  return () =&gt; {\n    contract.off(&#x27;Transfer&#x27;, handler)\n  }\n}\n \nconst cleanup = setupEventListeners(contract)\n// Later...\ncleanup()\n\n\n","title":"Best Practices","titles":["Using with Ethers.js"]},"389":{"href":"/examples/ethers#related-topics","html":"\n<ul>\n<li><a href=\"../api/json-rpc\">JSON-RPC Support</a></li>\n<li><a href=\"./local-testing\">Local Testing</a></li>\n<li><a href=\"./forking-mainnet\">Forking Mainnet</a></li>\n</ul>","isPage":false,"text":"\n\nJSON-RPC Support\nLocal Testing\nForking Mainnet\n","title":"Related Topics","titles":["Using with Ethers.js"]},"390":{"href":"/examples/forking-mainnet#forking-mainnet-example","html":"</header>\n","isPage":true,"text":"\n","title":"Forking Mainnet Example","titles":[]},"391":{"href":"/examples/forking-mainnet#basic-fork-setup","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { http } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;viem&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  fork: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transport: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">http</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;https://mainnet.infura.io/v3/&lt;yourkey&gt;&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    blockTag: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">17_000_000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  loggingLevel: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;debug&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ready</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Now any calls to an unknown account or contract</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// will fetch the data from mainnet, but store the result locally for caching.</span></span></code></pre>\n","isPage":false,"text":"\nimport { createTevmNode } from &#x27;tevm&#x27;\nimport { http } from &#x27;viem&#x27;\n \nconst node = createTevmNode({\n  fork: {\n    transport: http(&#x27;https://mainnet.infura.io/v3/&lt;yourkey&gt;&#x27;),\n    blockTag: 17_000_000n,\n  },\n  loggingLevel: &#x27;debug&#x27;,\n})\n \nawait node.ready()\n \n// Now any calls to an unknown account or contract\n// will fetch the data from mainnet, but store the result locally for caching.\n","title":"Basic Fork Setup","titles":["Forking Mainnet Example"]},"392":{"href":"/examples/forking-mainnet#account-impersonation","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Impersonate a whale account</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setImpersonatedAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x28C6c06298d514Db089934071355E5743bf21d60&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Binance 14</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Now you can run transactions &quot;as&quot; that address, no signature needed</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createImpersonatedTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000000000000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 1 ETH</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ tx })</span></span></code></pre>\n","isPage":false,"text":"\n// Impersonate a whale account\nnode.setImpersonatedAccount(&#x27;0x28C6c06298d514Db089934071355E5743bf21d60&#x27;) // Binance 14\n \n// Now you can run transactions &quot;as&quot; that address, no signature needed\nconst tx = createImpersonatedTx({\n  to: &#x27;0x1234...&#x27;,\n  value: 1000000000000000000n, // 1 ETH\n})\n \nconst vm = await node.getVm()\nawait vm.runTx({ tx })\n","title":"Account Impersonation","titles":["Forking Mainnet Example"]},"393":{"href":"/examples/forking-mainnet#working-with-forked-contracts","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Example: Interacting with USDC on mainnet</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> USDC_ADDRESS</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get the contract state from mainnet</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> usdcContract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">USDC_ADDRESS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">USDC_ABI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> balance</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> usdcContract.read.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">balanceOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Modify state locally</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> usdcContract.write.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x5678...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]) </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 1 USDC</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Changes only affect your local fork</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> newBalance</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> usdcContract.read.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">balanceOf</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span></code></pre>\n","isPage":false,"text":"\n// Example: Interacting with USDC on mainnet\nconst USDC_ADDRESS = &#x27;0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48&#x27;\n \n// Get the contract state from mainnet\nconst usdcContract = new Contract(USDC_ADDRESS, USDC_ABI)\nconst balance = await usdcContract.read.balanceOf([&#x27;0x1234...&#x27;])\n \n// Modify state locally\nawait usdcContract.write.transfer([&#x27;0x5678...&#x27;, 1000000]) // 1 USDC\n \n// Changes only affect your local fork\nconst newBalance = await usdcContract.read.balanceOf([&#x27;0x1234...&#x27;])\n","title":"Working with Forked Contracts","titles":["Forking Mainnet Example"]},"394":{"href":"/examples/forking-mainnet#fork-at-specific-block","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  fork: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transport: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">http</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;https://mainnet.infura.io/v3/&lt;yourkey&gt;&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    blockTag: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">15_000_000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Fork from a specific block</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Test historical state</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> historicalBalance</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getBalance</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address)</span></span></code></pre>\n","isPage":false,"text":"\nconst node = createTevmNode({\n  fork: {\n    transport: http(&#x27;https://mainnet.infura.io/v3/&lt;yourkey&gt;&#x27;),\n    blockTag: 15_000_000n, // Fork from a specific block\n  },\n})\n \n// Test historical state\nconst historicalBalance = await getBalance(address)\n","title":"Fork at Specific Block","titles":["Forking Mainnet Example"]},"395":{"href":"/examples/forking-mainnet#multiple-network-support","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Fork from different networks</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> optimismNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  fork: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transport: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">http</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;https://mainnet.optimism.io&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> arbitrumNode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  fork: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transport: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">http</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;https://arb1.arbitrum.io/rpc&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n<strong>Related</strong>\n<ul>\n<li><a href=\"../core/forking\">Forking Guide</a></li>\n<li><a href=\"../core/managing-state\">State Management</a></li>\n<li><a href=\"../api/json-rpc\">JSON-RPC Support</a></li>\n</ul>","isPage":false,"text":"\n// Fork from different networks\nconst optimismNode = createTevmNode({\n  fork: {\n    transport: http(&#x27;https://mainnet.optimism.io&#x27;),\n  },\n})\n \nconst arbitrumNode = createTevmNode({\n  fork: {\n    transport: http(&#x27;https://arb1.arbitrum.io/rpc&#x27;),\n  },\n})\nRelated\n\nForking Guide\nState Management\nJSON-RPC Support\n","title":"Multiple Network Support","titles":["Forking Mainnet Example"]},"396":{"href":"/examples/local-testing#local-testing","html":"</header>\n<p>This guide demonstrates how to use Tevm Node for local testing of <a href=\"https://ethereum.org/en/developers/docs/smart-contracts/\">smart contracts</a> and <a href=\"https://ethereum.org/en/developers/docs/transactions/\">transactions</a>. For more background on testing Ethereum applications, see the <a href=\"https://ethereum.org/en/developers/docs/smart-contracts/testing/\">Smart Contract Testing Guide</a>.</p>\n","isPage":true,"text":"\nThis guide demonstrates how to use Tevm Node for local testing of smart contracts and transactions. For more background on testing Ethereum applications, see the Smart Contract Testing Guide.\n","title":"Local Testing","titles":[]},"397":{"href":"/examples/local-testing#basic-test-setup","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createImpersonatedTx } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/tx&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { expect, test } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;vitest&#x27;</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // or jest, mocha, etc.</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Basic ETH transfer&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Create a new node instance</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    miningConfig: { type: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;auto&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Mine blocks automatically</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ready</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Create and run a transaction</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createImpersonatedTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    from: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x70997970C51812dc3A010C7d01b50e0d17dc79C8&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    value: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000000000000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 1 ETH</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ tx })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Assert transaction succeeded</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  expect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(result.execResult.exceptionError).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toBeUndefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Check recipient balance</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> account</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(tx.to)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  expect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(account.balance).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toBe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000000000000000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n<p>For more information on transaction execution, see the <a href=\"https://ethereum.org/en/developers/docs/evm/execution/\">EVM Execution Model</a>.</p>\n","isPage":false,"text":"\nimport { createTevmNode } from &#x27;tevm&#x27;\nimport { createImpersonatedTx } from &#x27;tevm/tx&#x27;\nimport { expect, test } from &#x27;vitest&#x27; // or jest, mocha, etc.\n \ntest(&#x27;Basic ETH transfer&#x27;, async () =&gt; {\n  // Create a new node instance\n  const node = createTevmNode({\n    miningConfig: { type: &#x27;auto&#x27; }, // Mine blocks automatically\n  })\n  await node.ready()\n \n  const vm = await node.getVm()\n \n  // Create and run a transaction\n  const tx = createImpersonatedTx({\n    from: &#x27;0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266&#x27;,\n    to: &#x27;0x70997970C51812dc3A010C7d01b50e0d17dc79C8&#x27;,\n    value: 1000000000000000000n, // 1 ETH\n  })\n \n  const result = await vm.runTx({ tx })\n \n  // Assert transaction succeeded\n  expect(result.execResult.exceptionError).toBeUndefined()\n \n  // Check recipient balance\n  const account = await vm.stateManager.getAccount(tx.to)\n  expect(account.balance).toBe(1000000000000000000n)\n})\nFor more information on transaction execution, see the EVM Execution Model.\n","title":"Basic Test Setup","titles":["Local Testing"]},"398":{"href":"/examples/local-testing#contract-testing","html":"\n","isPage":false,"text":"\n","title":"Contract Testing","titles":["Local Testing"]},"399":{"href":"/examples/local-testing#1-deployment--interaction","html":"\n<p>For background on contract deployment and interaction, see the <a href=\"https://ethereum.org/en/developers/docs/smart-contracts/deploying/\">Contract Deployment Guide</a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { Contract } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/contract&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { bytecode, abi } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;./MyContract.json&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Deploy and interact with contract&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ready</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Deploy contract</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> deployTx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createImpersonatedTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    data: bytecode,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ tx: deployTx })</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  expect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(result.execResult.exceptionError).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toBeUndefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contractAddress</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result.createdAddress</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  expect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(contractAddress).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toBeDefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Create contract instance</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(contractAddress, abi)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Call contract method</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> callResult</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract.read.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  expect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(callResult).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toBe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(expectedValue)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Send transaction to contract</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract.write.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([newValue])</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> txResult</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ tx })</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  expect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(txResult.execResult.exceptionError).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toBeUndefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Verify state change</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> updatedValue</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract.read.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  expect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(updatedValue).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toBe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(newValue)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nFor background on contract deployment and interaction, see the Contract Deployment Guide.\nimport { Contract } from &#x27;tevm/contract&#x27;\nimport { bytecode, abi } from &#x27;./MyContract.json&#x27;\n \ntest(&#x27;Deploy and interact with contract&#x27;, async () =&gt; {\n  const node = createTevmNode()\n  await node.ready()\n  const vm = await node.getVm()\n \n  // Deploy contract\n  const deployTx = createImpersonatedTx({\n    data: bytecode,\n  })\n \n  const result = await vm.runTx({ tx: deployTx })\n  expect(result.execResult.exceptionError).toBeUndefined()\n \n  const contractAddress = result.createdAddress\n  expect(contractAddress).toBeDefined()\n \n  // Create contract instance\n  const contract = new Contract(contractAddress, abi)\n \n  // Call contract method\n  const callResult = await contract.read.getValue()\n  expect(callResult).toBe(expectedValue)\n \n  // Send transaction to contract\n  const tx = await contract.write.setValue([newValue])\n  const txResult = await vm.runTx({ tx })\n  expect(txResult.execResult.exceptionError).toBeUndefined()\n \n  // Verify state change\n  const updatedValue = await contract.read.getValue()\n  expect(updatedValue).toBe(newValue)\n})\n","title":"1. Deployment &amp; Interaction","titles":["Local Testing","Contract Testing"]},"400":{"href":"/examples/local-testing#2-event-testing","html":"\n<p>For more information on events and logs, see the <a href=\"https://ethereum.org/en/developers/docs/smart-contracts/anatomy/#events-and-logs\">Events and Logs Guide</a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Contract events&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ready</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Deploy contract</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deployContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Create event filter</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setFilter</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    id: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    address: contract.address,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    topics: [</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      contract.interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getEventTopic</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;ValueChanged&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    ],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Trigger event</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract.write.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setValue</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">123</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ tx })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Get event logs</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> receipts</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getReceiptsManager</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> logs</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receipts.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getLogs</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    fromBlock: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    toBlock: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;latest&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    address: contract.address,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  expect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(logs.</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">length</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toBe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  expect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(logs[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">].topics[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toBe</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(contract.interface.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getEventTopic</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;ValueChanged&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nFor more information on events and logs, see the Events and Logs Guide.\ntest(&#x27;Contract events&#x27;, async () =&gt; {\n  const node = createTevmNode()\n  await node.ready()\n \n  // Deploy contract\n  const contract = await deployContract(node)\n \n  // Create event filter\n  node.setFilter({\n    id: &#x27;0x1&#x27;,\n    address: contract.address,\n    topics: [\n      contract.interface.getEventTopic(&#x27;ValueChanged&#x27;),\n    ],\n  })\n \n  // Trigger event\n  const tx = await contract.write.setValue([123])\n  await vm.runTx({ tx })\n \n  // Get event logs\n  const receipts = await node.getReceiptsManager()\n  const logs = await receipts.getLogs({\n    fromBlock: 0n,\n    toBlock: &#x27;latest&#x27;,\n    address: contract.address,\n  })\n \n  expect(logs.length).toBe(1)\n  expect(logs[0].topics[0]).toBe(contract.interface.getEventTopic(&#x27;ValueChanged&#x27;))\n})\n","title":"2. Event Testing","titles":["Local Testing","Contract Testing"]},"401":{"href":"/examples/local-testing#complex-testing-scenarios","html":"\n","isPage":false,"text":"\n","title":"Complex Testing Scenarios","titles":["Local Testing"]},"402":{"href":"/examples/local-testing#1-state-management","html":"\n<p>For more information on state management, see the <a href=\"https://ethereum.org/en/developers/docs/evm/state-machine/\">Ethereum State Guide</a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Complex state changes&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ready</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Create checkpoint</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">checkpoint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  try</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Perform multiple state changes</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> performStateChanges</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Verify intermediate state</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> intermediateState</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getState</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm)</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">    expect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(intermediateState).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toMatchSnapshot</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // More changes</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> performMoreChanges</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Commit changes</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">commit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">catch</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (error) {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Revert on failure</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">revert</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    throw</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> error</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nFor more information on state management, see the Ethereum State Guide.\ntest(&#x27;Complex state changes&#x27;, async () =&gt; {\n  const node = createTevmNode()\n  await node.ready()\n  const vm = await node.getVm()\n \n  // Create checkpoint\n  await vm.stateManager.checkpoint()\n \n  try {\n    // Perform multiple state changes\n    await performStateChanges(vm)\n \n    // Verify intermediate state\n    const intermediateState = await getState(vm)\n    expect(intermediateState).toMatchSnapshot()\n \n    // More changes\n    await performMoreChanges(vm)\n \n    // Commit changes\n    await vm.stateManager.commit()\n  } catch (error) {\n    // Revert on failure\n    await vm.stateManager.revert()\n    throw error\n  }\n})\n","title":"1. State Management","titles":["Local Testing","Complex Testing Scenarios"]},"403":{"href":"/examples/local-testing#2-fork-testing","html":"\n<p>For more information on network forking, see the <a href=\"../core/forking\">Forking Guide</a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Mainnet fork testing&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    fork: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      transport: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">http</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;https://mainnet.infura.io/v3/YOUR-KEY&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      blockTag: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">17_000_000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ready</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Impersonate a whale account</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setImpersonatedAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x28C6c06298d514Db089934071355E5743bf21d60&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Test DeFi interactions</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> uniswap</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> Contract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">UNISWAP_ADDRESS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">UNISWAP_ABI</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> uniswap.write.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">swapExactTokensForTokens</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">([</span><span style=\"color:#6A737D;--shiki-dark:#768390\">/* ... */</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">])</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ tx })</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  expect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(result.execResult.exceptionError).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toBeUndefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nFor more information on network forking, see the Forking Guide.\ntest(&#x27;Mainnet fork testing&#x27;, async () =&gt; {\n  const node = createTevmNode({\n    fork: {\n      transport: http(&#x27;https://mainnet.infura.io/v3/YOUR-KEY&#x27;),\n      blockTag: 17_000_000n,\n    },\n  })\n  await node.ready()\n \n  // Impersonate a whale account\n  node.setImpersonatedAccount(&#x27;0x28C6c06298d514Db089934071355E5743bf21d60&#x27;)\n \n  // Test DeFi interactions\n  const uniswap = new Contract(UNISWAP_ADDRESS, UNISWAP_ABI)\n  const tx = await uniswap.write.swapExactTokensForTokens([/* ... */])\n \n  const result = await vm.runTx({ tx })\n  expect(result.execResult.exceptionError).toBeUndefined()\n})\n","title":"2. Fork Testing","titles":["Local Testing","Complex Testing Scenarios"]},"404":{"href":"/examples/local-testing#3-time-based-testing","html":"\n<p>For more information on block timestamps and time-based operations, see the <a href=\"https://ethereum.org/en/developers/docs/blocks/blocks-and-time/\">Block Time Guide</a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">test</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Time-dependent behavior&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> () </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    miningConfig: { type: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;interval&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, interval: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">ready</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Deploy time-locked contract</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deployTimeLock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(vm)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Try to withdraw (should fail)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> tx </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract.write.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">withdraw</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ tx })</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  expect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(result.execResult.exceptionError).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toBeDefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Advance time by mining blocks</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 100</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.blockchain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">putBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">createBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ timestamp: Date.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">now</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">*</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1000</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }))</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Try withdraw again (should succeed)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  tx </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract.write.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">withdraw</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  result </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ tx })</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  expect</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(result.execResult.exceptionError).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toBeUndefined</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nFor more information on block timestamps and time-based operations, see the Block Time Guide.\ntest(&#x27;Time-dependent behavior&#x27;, async () =&gt; {\n  const node = createTevmNode({\n    miningConfig: { type: &#x27;interval&#x27;, interval: 1000 },\n  })\n  await node.ready()\n  const vm = await node.getVm()\n \n  // Deploy time-locked contract\n  const contract = await deployTimeLock(vm)\n \n  // Try to withdraw (should fail)\n  let tx = await contract.write.withdraw()\n  let result = await vm.runTx({ tx })\n  expect(result.execResult.exceptionError).toBeDefined()\n \n  // Advance time by mining blocks\n  for (let i = 0; i &lt; 100; i++) {\n    await vm.blockchain.putBlock(createBlock({ timestamp: Date.now() + i * 1000 }))\n  }\n \n  // Try withdraw again (should succeed)\n  tx = await contract.write.withdraw()\n  result = await vm.runTx({ tx })\n  expect(result.execResult.exceptionError).toBeUndefined()\n})\n","title":"3. Time-based Testing","titles":["Local Testing","Complex Testing Scenarios"]},"405":{"href":"/examples/local-testing#testing-utilities","html":"\n","isPage":false,"text":"\n","title":"Testing Utilities","titles":["Local Testing"]},"406":{"href":"/examples/local-testing#1-account-management","html":"\n<p>For more information on Ethereum accounts, see the <a href=\"https://ethereum.org/en/developers/docs/accounts/\">Accounts Guide</a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Helper to setup test accounts</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> setupAccounts</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">vm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> accounts</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> [</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &#x27;0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &#x27;0x70997970C51812dc3A010C7d01b50e0d17dc79C8&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  ]</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> address</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> of</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> accounts) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">putAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      nonce: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      balance: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">10000000000000000000</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// 10 ETH</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> accounts</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nFor more information on Ethereum accounts, see the Accounts Guide.\n// Helper to setup test accounts\nasync function setupAccounts(vm) {\n  const accounts = [\n    &#x27;0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266&#x27;,\n    &#x27;0x70997970C51812dc3A010C7d01b50e0d17dc79C8&#x27;,\n  ]\n \n  for (const address of accounts) {\n    await vm.stateManager.putAccount(address, {\n      nonce: 0n,\n      balance: 10000000000000000000n, // 10 ETH\n    })\n  }\n \n  return accounts\n}\n","title":"1. Account Management","titles":["Local Testing","Testing Utilities"]},"407":{"href":"/examples/local-testing#2-transaction-helpers","html":"\n<p>For more information on transaction types and formats, see the <a href=\"https://ethereum.org/en/developers/docs/transactions/transaction-types/\">Transaction Types Guide</a>.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Helper to send ETH</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> sendEth</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">vm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">from</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">to</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">value</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createImpersonatedTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    from,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    to,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    value,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ tx })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Helper to deploy contract</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> function</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> deployContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">vm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">bytecode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, </span><span style=\"color:#E36209;--shiki-dark:#F69D50\">args</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> []) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createImpersonatedTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    data: bytecode </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">+</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> encodeConstructor</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(args),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ tx })</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> result.createdAddress</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span></code></pre>\n","isPage":false,"text":"\nFor more information on transaction types and formats, see the Transaction Types Guide.\n// Helper to send ETH\nasync function sendEth(vm, from, to, value) {\n  const tx = createImpersonatedTx({\n    from,\n    to,\n    value,\n  })\n \n  return vm.runTx({ tx })\n}\n \n// Helper to deploy contract\nasync function deployContract(vm, bytecode, args = []) {\n  const tx = createImpersonatedTx({\n    data: bytecode + encodeConstructor(args),\n  })\n \n  const result = await vm.runTx({ tx })\n  return result.createdAddress\n}\n","title":"2. Transaction Helpers","titles":["Local Testing","Testing Utilities"]},"408":{"href":"/examples/local-testing#related-topics","html":"\n<ul>\n<li><a href=\"https://viem.sh/docs/testing/overview.html\">Viem Testing Guide</a></li>\n<li><a href=\"https://github.com/ethereumjs/ethereumjs-monorepo/tree/master/packages/vm\">EthereumJS VM</a></li>\n<li><a href=\"../api/json-rpc\">JSON-RPC Methods</a></li>\n<li><a href=\"../api/contracts\">Contract API</a></li>\n<li><a href=\"../core/managing-state\">State Management</a></li>\n</ul>\n","isPage":false,"text":"\n\nViem Testing Guide\nEthereumJS VM\nJSON-RPC Methods\nContract API\nState Management\n\n","title":"Related Topics","titles":["Local Testing"]},"409":{"href":"/examples/local-testing#replaying-contracts-with-shadow-events","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { http } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;viem&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create a node that forks from mainnet</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  fork: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transport: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">http</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;https://mainnet.infura.io/v3/YOUR-KEY&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  },</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get the transaction receipt to find its index</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> receipt</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">request</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  method: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;eth_getTransactionReceipt&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  params: [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">] </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Original tx hash</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get the block and its transactions</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> block</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">request</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  method: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;eth_getBlockByNumber&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  params: [(receipt.blockNumber </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">-</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 1</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">).</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">toString</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">16</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">), </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">true</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Replay all transactions before our target tx</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">for</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">let</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> 0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">; i </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">&lt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> receipt.transactionIndex; i</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">++</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) {</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> tx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> block.transactions[i]</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">  await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ tx })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Deploy modified contract with new event</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> modifiedBytecode</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;0x...&#x27;</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // Contract bytecode with new event</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: receipt.contractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  deployedBytecode: modifiedBytecode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Now run the target transaction</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  tx: block.transactions[receipt.transactionIndex]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// The result will include the new shadow event</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(result.execResult.logs)</span></span></code></pre>\n","isPage":false,"text":"\nimport { createTevmNode } from &#x27;tevm&#x27;\nimport { http } from &#x27;viem&#x27;\n \n// Create a node that forks from mainnet\nconst node = createTevmNode({\n  fork: {\n    transport: http(&#x27;https://mainnet.infura.io/v3/YOUR-KEY&#x27;),\n  },\n})\n \n// Get the transaction receipt to find its index\nconst receipt = await node.request({\n  method: &#x27;eth_getTransactionReceipt&#x27;,\n  params: [&#x27;0x...&#x27;] // Original tx hash\n})\n \n// Get the block and its transactions\nconst block = await node.request({\n  method: &#x27;eth_getBlockByNumber&#x27;,\n  params: [(receipt.blockNumber - 1n).toString(16), true]\n})\n \n// Replay all transactions before our target tx\nfor (let i = 0; i &lt; receipt.transactionIndex; i++) {\n  const tx = block.transactions[i]\n  await node.getVm().runTx({ tx })\n}\n \n// Deploy modified contract with new event\nconst modifiedBytecode = &#x27;0x...&#x27; // Contract bytecode with new event\nawait node.setAccount({\n  address: receipt.contractAddress,\n  deployedBytecode: modifiedBytecode\n})\n \n// Now run the target transaction\nconst result = await node.getVm().runTx({\n  tx: block.transactions[receipt.transactionIndex]\n})\n \n// The result will include the new shadow event\nconsole.log(result.execResult.logs)\n","title":"Replaying Contracts with Shadow Events","titles":["Local Testing"]},"410":{"href":"/examples/local-testing#estimating-gas-for-token-approval","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/node&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { encodeFunctionData } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;viem&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// First approve the token</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> approveTx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: tokenAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    abi: erc20ABI,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    functionName: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;approve&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    args: [spenderAddress, amount]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Estimate gas by running the tx</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ tx: approveTx })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;Gas used:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, result.execResult.executionGasUsed)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Now we can estimate transferFrom</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transferFromTx</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: tokenAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">encodeFunctionData</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    abi: erc20ABI,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    functionName: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;transferFrom&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    args: [ownerAddress, recipientAddress, amount]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">}</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> transferResult</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ tx: transferFromTx })</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;TransferFrom gas:&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">, transferResult.execResult.executionGasUsed)</span></span></code></pre>","isPage":false,"text":"\nimport { createTevmNode } from &#x27;tevm/node&#x27;\nimport { encodeFunctionData } from &#x27;viem&#x27;\n \nconst node = createTevmNode()\nconst vm = await node.getVm()\n \n// First approve the token\nconst approveTx = {\n  to: tokenAddress,\n  data: encodeFunctionData({\n    abi: erc20ABI,\n    functionName: &#x27;approve&#x27;,\n    args: [spenderAddress, amount]\n  })\n}\n \n// Estimate gas by running the tx\nconst result = await vm.runTx({ tx: approveTx })\nconsole.log(&#x27;Gas used:&#x27;, result.execResult.executionGasUsed)\n \n// Now we can estimate transferFrom\nconst transferFromTx = {\n  to: tokenAddress,\n  data: encodeFunctionData({\n    abi: erc20ABI,\n    functionName: &#x27;transferFrom&#x27;,\n    args: [ownerAddress, recipientAddress, amount]\n  })\n}\n \nconst transferResult = await vm.runTx({ tx: transferFromTx })\nconsole.log(&#x27;TransferFrom gas:&#x27;, transferResult.execResult.executionGasUsed)","title":"Estimating Gas for Token Approval","titles":["Local Testing"]},"411":{"href":"/examples/viem#using-with-viem","html":"</header>\n<p>This guide demonstrates how to use Tevm Node with Viem, enabling seamless integration with Viem&#x27;s powerful Ethereum development tools.</p>\n","isPage":true,"text":"\nThis guide demonstrates how to use Tevm Node with Viem, enabling seamless integration with Viem&#x27;s powerful Ethereum development tools.\n","title":"Using with Viem","titles":[]},"412":{"href":"/examples/viem#basic-setup","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/node&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { requestEip1193 } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/decorators&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createPublicClient, custom, parseAbi } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;viem&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { mainnet } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;viem/chains&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create Tevm Node with EIP-1193 support</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">extend</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">requestEip1193</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create Viem client</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createPublicClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  chain: mainnet,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">  // Use Tevm node as the viem transport</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  transport: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">custom</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Now viemClient can do e.g. getBalance, readContract, etc,</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// all fully in memory or forking from node if you configured it</span></span></code></pre>\n","isPage":false,"text":"\nimport { createTevmNode } from &#x27;tevm/node&#x27;\nimport { requestEip1193 } from &#x27;tevm/decorators&#x27;\nimport { createPublicClient, custom, parseAbi } from &#x27;viem&#x27;\nimport { mainnet } from &#x27;viem/chains&#x27;\n \n// Create Tevm Node with EIP-1193 support\nconst node = createTevmNode().extend(requestEip1193())\n \n// Create Viem client\nconst client = createPublicClient({\n  chain: mainnet,\n  // Use Tevm node as the viem transport\n  transport: custom(node),\n})\n \n// Now viemClient can do e.g. getBalance, readContract, etc,\n// all fully in memory or forking from node if you configured it\n","title":"Basic Setup","titles":["Using with Viem"]},"413":{"href":"/examples/viem#using-viem","html":"\n<p>Use <a href=\"/examples/viem\">viem</a> via actions. All viem and tevm actions are available as tree shakable actions.</p>\n","isPage":false,"text":"\nUse viem via actions. All viem and tevm actions are available as tree shakable actions.\n","title":"Using viem","titles":["Using with Viem"]},"414":{"href":"/examples/viem#1-public-actions","html":"\n<p>Use <a href=\"https://viem.sh/docs/actions/public/introduction\">viem&#x27;s public actions</a> to read from locally running evm node</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get latest block</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> block</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBlock</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get balance</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> balance</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBalance</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get transaction count</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> nonce</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getTransactionCount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nUse viem&#x27;s public actions to read from locally running evm node\n// Get latest block\nconst block = await client.getBlock()\n \n// Get balance\nconst balance = await client.getBalance({\n  address: &#x27;0x1234...&#x27;,\n})\n \n// Get transaction count\nconst nonce = await client.getTransactionCount({\n  address: &#x27;0x1234...&#x27;,\n})\n","title":"1. Public actions","titles":["Using with Viem","Using viem"]},"415":{"href":"/examples/viem#2-wallet-actions","html":"\n<p>All of <a href=\"/examples/viem\">viem&#x27;s</a> <a href=\"https://viem.sh/docs/actions/wallet/introduction\"><code>Wallet actions</code></a> are available via passing in an <code>account</code></p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Import PREFUNDED_ACCOUNTS from tevm</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { PREFUNDED_ACCOUNTS } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create client with prefunded test account</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createMemoryClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  account: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">PREFUNDED_ACCOUNTS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">], </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// First prefunded account with 10000 ETH</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Send transaction using prefunded account</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> hash</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">sendTransaction</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234567890123456789012345678901234567890&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseEther</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;1&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Deploy contract using prefunded account</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">contractAddress</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">deployContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  abi,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  bytecode,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  account: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">PREFUNDED_ACCOUNTS</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">[</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">0</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nAll of viem&#x27;s Wallet actions are available via passing in an account\n// Import PREFUNDED_ACCOUNTS from tevm\nimport { PREFUNDED_ACCOUNTS } from &#x27;tevm&#x27;\n \n// Create client with prefunded test account\nconst client = createMemoryClient({\n  account: PREFUNDED_ACCOUNTS[0], // First prefunded account with 10000 ETH\n})\n \n// Send transaction using prefunded account\nconst hash = await client.sendTransaction({\n  to: &#x27;0x1234567890123456789012345678901234567890&#x27;,\n  value: parseEther(&#x27;1&#x27;),\n})\n \n// Deploy contract using prefunded account\nconst { contractAddress } = await client.deployContract({\n  abi,\n  bytecode,\n  account: PREFUNDED_ACCOUNTS[0],\n})\n","title":"2. Wallet actions","titles":["Using with Viem","Using viem"]},"416":{"href":"/examples/viem#3-test-actions","html":"\n<p>All of viem&#x27;s <a href=\"https://viem.sh/docs/actions/test/introduction\"><code>Test actions</code></a> are available for testing and debugging</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Import test actions</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { mine, setBalance, setNextBlockTimestamp, setBlockTimestamp } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;viem/test&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Mine blocks</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">mine</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ blocks: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> })</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Set account balance</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setBalance</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234567890123456789012345678901234567890&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseEther</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;100&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Manipulate block timestamps</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setNextBlockTimestamp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1695311333</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setBlockTimestamp</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">1695311333</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Combine actions for test scenarios</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setBalance</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234567890123456789012345678901234567890&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  value: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseEther</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;100&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> client.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">mine</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({ blocks: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> })</span></span></code></pre>\n<p>These test actions are particularly useful for:</p>\n<ul>\n<li>Setting up specific test scenarios</li>\n<li>Manipulating blockchain state for testing</li>\n<li>Time-traveling through blocks</li>\n<li>Debugging smart contract interactions</li>\n</ul>\n","isPage":false,"text":"\nAll of viem&#x27;s Test actions are available for testing and debugging\n// Import test actions\nimport { mine, setBalance, setNextBlockTimestamp, setBlockTimestamp } from &#x27;viem/test&#x27;\n \n// Mine blocks\nawait client.mine({ blocks: 1 })\n \n// Set account balance\nawait client.setBalance({\n  address: &#x27;0x1234567890123456789012345678901234567890&#x27;,\n  value: parseEther(&#x27;100&#x27;)\n})\n \n// Manipulate block timestamps\nawait client.setNextBlockTimestamp(1695311333n)\nawait client.setBlockTimestamp(1695311333n)\n \n// Combine actions for test scenarios\nawait client.setBalance({\n  address: &#x27;0x1234567890123456789012345678901234567890&#x27;,\n  value: parseEther(&#x27;100&#x27;)\n})\nawait client.mine({ blocks: 5 })\nThese test actions are particularly useful for:\n\nSetting up specific test scenarios\nManipulating blockchain state for testing\nTime-traveling through blocks\nDebugging smart contract interactions\n\n","title":"3. Test actions","titles":["Using with Viem","Using viem"]},"417":{"href":"/examples/viem#tevm-actions","html":"\n<p>Tevm provides additional actions beyond standard <a href=\"/examples/viem\">viem</a> functionality for enhanced testing and debugging capabilities.</p>\n","isPage":false,"text":"\nTevm provides additional actions beyond standard viem functionality for enhanced testing and debugging capabilities.\n","title":"Tevm Actions","titles":["Using with Viem"]},"418":{"href":"/examples/viem#1-contract-interactions","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { tevmContract, tevmCall, tevmDeploy } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/actions&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Call a contract method</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> tevmContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(client, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  abi: myContractAbi,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  functionName: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;balanceOf&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  args: [</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">],</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Low-level contract call</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> callResult</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> tevmCall</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(client, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Deploy a contract</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> deployResult</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> tevmDeploy</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(client, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  abi: myContractAbi,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  bytecode: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nimport { tevmContract, tevmCall, tevmDeploy } from &#x27;tevm/actions&#x27;\n \n// Call a contract method\nconst result = await tevmContract(client, {\n  abi: myContractAbi,\n  functionName: &#x27;balanceOf&#x27;,\n  args: [&#x27;0x1234...&#x27;],\n})\n \n// Low-level contract call\nconst callResult = await tevmCall(client, {\n  to: &#x27;0x1234...&#x27;,\n  data: &#x27;0x...&#x27;,\n})\n \n// Deploy a contract\nconst deployResult = await tevmDeploy(client, {\n  abi: myContractAbi,\n  bytecode: &#x27;0x...&#x27;,\n})\n","title":"1. Contract Interactions","titles":["Using with Viem","Tevm Actions"]},"419":{"href":"/examples/viem#2-account-management","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { tevmGetAccount, tevmSetAccount } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/actions&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Get account state</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> account</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> tevmGetAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(client, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Modify account state</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> tevmSetAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(client, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1234...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  balance: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">parseEther</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;100&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  code: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,  </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Optional contract bytecode</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  storage: {      </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// Optional storage slots</span></span>\n<span class=\"line\"><span style=\"color:#032F62;--shiki-dark:#96D0FF\">    &#x27;0x0&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x1&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nimport { tevmGetAccount, tevmSetAccount } from &#x27;tevm/actions&#x27;\n \n// Get account state\nconst account = await tevmGetAccount(client, {\n  address: &#x27;0x1234...&#x27;,\n})\n \n// Modify account state\nawait tevmSetAccount(client, {\n  address: &#x27;0x1234...&#x27;,\n  balance: parseEther(&#x27;100&#x27;),\n  code: &#x27;0x...&#x27;,  // Optional contract bytecode\n  storage: {      // Optional storage slots\n    &#x27;0x0&#x27;: &#x27;0x1&#x27;\n  }\n})\n","title":"2. Account Management","titles":["Using with Viem","Tevm Actions"]},"420":{"href":"/examples/viem#3-other-tevm-actions","html":"\n<p>You can use <code>tevmLoadState</code> and <code>tevmDumpState</code> to persist state to disk or local storage.</p>\n<p><code>tevmMine</code> is an important action for mining new blocks.</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { tevmDumpState, tevmLoadState, tevmMine } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/actions&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Save current state</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> state</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> tevmDumpState</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(client)</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Load previously saved state</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> tevmLoadState</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(client, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  state: state</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Mine blocks with Tevm</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> tevmMine</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(client, {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  blocks: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">5</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n<p>These Tevm-specific actions provide powerful capabilities for:</p>\n<ul>\n<li>Direct contract interactions and deployment</li>\n<li>Fine-grained account state manipulation</li>\n<li>Complete EVM state management</li>\n<li>Advanced testing scenarios</li>\n</ul>\n","isPage":false,"text":"\nYou can use tevmLoadState and tevmDumpState to persist state to disk or local storage.\ntevmMine is an important action for mining new blocks.\nimport { tevmDumpState, tevmLoadState, tevmMine } from &#x27;tevm/actions&#x27;\n \n// Save current state\nconst state = await tevmDumpState(client)\n \n// Load previously saved state\nawait tevmLoadState(client, {\n  state: state\n})\n \n// Mine blocks with Tevm\nawait tevmMine(client, {\n  blocks: 5\n})\nThese Tevm-specific actions provide powerful capabilities for:\n\nDirect contract interactions and deployment\nFine-grained account state manipulation\nComplete EVM state management\nAdvanced testing scenarios\n\n","title":"3. Other Tevm actions","titles":["Using with Viem","Tevm Actions"]},"421":{"href":"/examples/viem#complete-action-reference","html":"\n","isPage":false,"text":"\n","title":"Complete Action Reference","titles":["Using with Viem"]},"422":{"href":"/examples/viem#public-actions","html":"\n<p>All <a href=\"https://viem.sh/docs/actions/public/introduction\">viem&#x27;s public actions</a> are supported:</p>\n","isPage":false,"text":"\nAll viem&#x27;s public actions are supported:\n","title":"Public Actions","titles":["Using with Viem","Complete Action Reference"]},"423":{"href":"/examples/viem#contract-interactions","html":"\n<ul>\n<li><a href=\"https://viem.sh/docs/actions/public/call\"><code>call</code></a></li>\n<li><a href=\"https://viem.sh/docs/contract/readContract\"><code>readContract</code></a></li>\n<li><a href=\"https://viem.sh/docs/contract/simulateContract\"><code>simulateContract</code></a></li>\n<li><a href=\"https://viem.sh/docs/contract/estimateContractGas\"><code>estimateContractGas</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/public/estimateGas\"><code>estimateGas</code></a></li>\n<li><a href=\"https://viem.sh/docs/contract/getBytecode\"><code>getBytecode</code></a></li>\n</ul>\n","isPage":false,"text":"\n\ncall\nreadContract\nsimulateContract\nestimateContractGas\nestimateGas\ngetBytecode\n\n","title":"Contract Interactions","titles":["Using with Viem","Complete Action Reference","Public Actions"]},"424":{"href":"/examples/viem#block--transaction","html":"\n<ul>\n<li><a href=\"https://viem.sh/docs/actions/public/getBlock\"><code>getBlock</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/public/getBlockNumber\"><code>getBlockNumber</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/public/getBlockTransactionCount\"><code>getBlockTransactionCount</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/public/getTransaction\"><code>getTransaction</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/public/getTransactionCount\"><code>getTransactionCount</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/public/getTransactionReceipt\"><code>getTransactionReceipt</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/public/waitForTransactionReceipt\"><code>waitForTransactionReceipt</code></a></li>\n</ul>\n","isPage":false,"text":"\n\ngetBlock\ngetBlockNumber\ngetBlockTransactionCount\ngetTransaction\ngetTransactionCount\ngetTransactionReceipt\nwaitForTransactionReceipt\n\n","title":"Block &amp; Transaction","titles":["Using with Viem","Complete Action Reference","Public Actions"]},"425":{"href":"/examples/viem#account--chain","html":"\n<ul>\n<li><a href=\"https://viem.sh/docs/actions/public/getBalance\"><code>getBalance</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/public/getChainId\"><code>getChainId</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/public/getGasPrice\"><code>getGasPrice</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/public/estimateFeesPerGas\"><code>estimateFeesPerGas</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/public/getStorageAt\"><code>getStorageAt</code></a></li>\n</ul>\n","isPage":false,"text":"\n\ngetBalance\ngetChainId\ngetGasPrice\nestimateFeesPerGas\ngetStorageAt\n\n","title":"Account &amp; Chain","titles":["Using with Viem","Complete Action Reference","Public Actions"]},"426":{"href":"/examples/viem#test-actions","html":"\n<p>All <a href=\"https://viem.sh/docs/actions/test/introduction\">viem&#x27;s test actions</a> are supported:</p>\n","isPage":false,"text":"\nAll viem&#x27;s test actions are supported:\n","title":"Test Actions","titles":["Using with Viem","Complete Action Reference"]},"427":{"href":"/examples/viem#block--mining","html":"\n<ul>\n<li><a href=\"https://viem.sh/docs/actions/test/mine\"><code>mine</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/test/setAutomine\"><code>setAutomine</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/test/setIntervalMining\"><code>setIntervalMining</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/test/setBlockGasLimit\"><code>setBlockGasLimit</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/test/setBlockTimestampInterval\"><code>setBlockTimestampInterval</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/test/setNextBlockBaseFeePerGas\"><code>setNextBlockBaseFeePerGas</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/test/setNextBlockTimestamp\"><code>setNextBlockTimestamp</code></a></li>\n</ul>\n","isPage":false,"text":"\n\nmine\nsetAutomine\nsetIntervalMining\nsetBlockGasLimit\nsetBlockTimestampInterval\nsetNextBlockBaseFeePerGas\nsetNextBlockTimestamp\n\n","title":"Block &amp; Mining","titles":["Using with Viem","Complete Action Reference","Test Actions"]},"428":{"href":"/examples/viem#account--state","html":"\n<ul>\n<li><a href=\"https://viem.sh/docs/actions/test/setBalance\"><code>setBalance</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/test/setCode\"><code>setCode</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/test/setNonce\"><code>setNonce</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/test/setStorageAt\"><code>setStorageAt</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/test/setCoinbase\"><code>setCoinbase</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/test/setMinGasPrice\"><code>setMinGasPrice</code></a></li>\n</ul>\n","isPage":false,"text":"\n\nsetBalance\nsetCode\nsetNonce\nsetStorageAt\nsetCoinbase\nsetMinGasPrice\n\n","title":"Account &amp; State","titles":["Using with Viem","Complete Action Reference","Test Actions"]},"429":{"href":"/examples/viem#state-management","html":"\n<ul>\n<li><a href=\"https://viem.sh/docs/actions/test/snapshot\"><code>snapshot</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/test/revert\"><code>revert</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/test/reset\"><code>reset</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/test/dumpState\"><code>dumpState</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/test/loadState\"><code>loadState</code></a></li>\n</ul>\n","isPage":false,"text":"\n\nsnapshot\nrevert\nreset\ndumpState\nloadState\n\n","title":"State Management","titles":["Using with Viem","Complete Action Reference","Test Actions"]},"430":{"href":"/examples/viem#wallet-actions","html":"\n<p>All <a href=\"https://viem.sh/docs/actions/wallet/introduction\">viem&#x27;s wallet actions</a> are supported:</p>\n","isPage":false,"text":"\nAll viem&#x27;s wallet actions are supported:\n","title":"Wallet Actions","titles":["Using with Viem","Complete Action Reference"]},"431":{"href":"/examples/viem#account-management","html":"\n<ul>\n<li><a href=\"https://viem.sh/docs/actions/wallet/getAddresses\"><code>getAddresses</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/wallet/requestAddresses\"><code>requestAddresses</code></a></li>\n</ul>\n","isPage":false,"text":"\n\ngetAddresses\nrequestAddresses\n\n","title":"Account Management","titles":["Using with Viem","Complete Action Reference","Wallet Actions"]},"432":{"href":"/examples/viem#transaction-operations","html":"\n<ul>\n<li><a href=\"https://viem.sh/docs/actions/wallet/prepareTransactionRequest\"><code>prepareTransactionRequest</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/wallet/sendTransaction\"><code>sendTransaction</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/wallet/sendRawTransaction\"><code>sendRawTransaction</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/wallet/signTransaction\"><code>signTransaction</code></a></li>\n</ul>\n","isPage":false,"text":"\n\nprepareTransactionRequest\nsendTransaction\nsendRawTransaction\nsignTransaction\n\n","title":"Transaction Operations","titles":["Using with Viem","Complete Action Reference","Wallet Actions"]},"433":{"href":"/examples/viem#signing-operations","html":"\n<ul>\n<li><a href=\"https://viem.sh/docs/actions/wallet/signMessage\"><code>signMessage</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/wallet/signTypedData\"><code>signTypedData</code></a></li>\n</ul>\n","isPage":false,"text":"\n\nsignMessage\nsignTypedData\n\n","title":"Signing Operations","titles":["Using with Viem","Complete Action Reference","Wallet Actions"]},"434":{"href":"/examples/viem#chain-management","html":"\n<ul>\n<li><a href=\"https://viem.sh/docs/actions/wallet/addChain\"><code>addChain</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/wallet/switchChain\"><code>switchChain</code></a></li>\n</ul>\n","isPage":false,"text":"\n\naddChain\nswitchChain\n\n","title":"Chain Management","titles":["Using with Viem","Complete Action Reference","Wallet Actions"]},"435":{"href":"/examples/viem#permissions--assets","html":"\n<ul>\n<li><a href=\"https://viem.sh/docs/actions/wallet/getPermissions\"><code>getPermissions</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/wallet/requestPermissions\"><code>requestPermissions</code></a></li>\n<li><a href=\"https://viem.sh/docs/actions/wallet/watchAsset\"><code>watchAsset</code></a></li>\n</ul>","isPage":false,"text":"\n\ngetPermissions\nrequestPermissions\nwatchAsset\n","title":"Permissions &amp; Assets","titles":["Using with Viem","Complete Action Reference","Wallet Actions"]},"436":{"href":"/introduction/architecture-overview#architecture-overview","html":"</header>\n","isPage":true,"text":"\n","title":"Architecture Overview","titles":[]},"437":{"href":"/introduction/architecture-overview#what-is-tevm-node","html":"\n<p><a href=\"https://github.com/evmts/tevm-monorepo\">Tevm Node</a> is a JavaScript implementation of an Ethereum node that can run in any JavaScript environment - browsers, Node.js, or other runtimes. It provides a complete <a href=\"https://ethereum.org/en/developers/docs/evm/\">Ethereum Virtual Machine (EVM)</a> with state management, transaction processing, and JSON-RPC support.</p>\n","isPage":false,"text":"\nTevm Node is a JavaScript implementation of an Ethereum node that can run in any JavaScript environment - browsers, Node.js, or other runtimes. It provides a complete Ethereum Virtual Machine (EVM) with state management, transaction processing, and JSON-RPC support.\n","title":"What is Tevm Node?","titles":["Architecture Overview"]},"438":{"href":"/introduction/architecture-overview#what-can-you-do-with-tevm-node","html":"\n<p>Tevm has a lot of use cases many which are covered in the examples section</p>\n<ol>\n<li>Anything viem can do as tevm is an extension of viem&#x27;s capabilities</li>\n<li>Simulate blocks and transactions locally. Hook directly into evm execution</li>\n<li>Estimate gas with no network requests and no loading setupEventListeners</li>\n<li>Build an EVM simulator like <a href=\"https://svvy.sh\">svvy.sh</a></li>\n<li>Test your JavaScript against an anvil compatible fork in JavaScript</li>\n<li>Debug evm tx step by step</li>\n<li>Optimistic ui updates when tx are sent</li>\n<li>And more!</li>\n</ol>\n","isPage":false,"text":"\nTevm has a lot of use cases many which are covered in the examples section\n\nAnything viem can do as tevm is an extension of viem&#x27;s capabilities\nSimulate blocks and transactions locally. Hook directly into evm execution\nEstimate gas with no network requests and no loading setupEventListeners\nBuild an EVM simulator like svvy.sh\nTest your JavaScript against an anvil compatible fork in JavaScript\nDebug evm tx step by step\nOptimistic ui updates when tx are sent\nAnd more!\n\n","title":"What can you do with Tevm Node?","titles":["Architecture Overview"]},"439":{"href":"/introduction/architecture-overview#core-architecture","html":"\n<p>Tevm Node is built on several key components that work together:</p>\n","isPage":false,"text":"\nTevm Node is built on several key components that work together:\n","title":"Core Architecture","titles":["Architecture Overview"]},"440":{"href":"/introduction/architecture-overview#1-virtual-machine-evm","html":"\n<ul>\n<li>Core execution engine that runs <a href=\"https://ethereum.org/en/developers/docs/evm/opcodes/\">EVM bytecode</a></li>\n<li>Handles state transitions and gas metering</li>\n<li>Based on <a href=\"https://github.com/ethereumjs/ethereumjs-monorepo/tree/master/packages/evm\"><code>@ethereumjs/evm</code></a></li>\n</ul>\n<p>See <a href=\"../api/evm.mdx\">evm docs</a> for api info</p>\n","isPage":false,"text":"\n\nCore execution engine that runs EVM bytecode\nHandles state transitions and gas metering\nBased on @ethereumjs/evm\n\nSee evm docs for api info\n","title":"1. Virtual Machine (EVM)","titles":["Architecture Overview","Core Architecture"]},"441":{"href":"/introduction/architecture-overview#2-state-manager","html":"\n<ul>\n<li>Manages account balances, contract code, and storage</li>\n<li>Supports forking from live networks</li>\n<li>Implements caching and lazy loading</li>\n</ul>\n<p>See <a href=\"../api/state.mdx\">state docs</a> for api info</p>\n","isPage":false,"text":"\n\nManages account balances, contract code, and storage\nSupports forking from live networks\nImplements caching and lazy loading\n\nSee state docs for api info\n","title":"2. State Manager","titles":["Architecture Overview","Core Architecture"]},"442":{"href":"/introduction/architecture-overview#3-transaction-pool-mempool","html":"\n<ul>\n<li>Manages pending transactions</li>\n<li>Orders transactions by gas price</li>\n<li>Validates transaction requirements</li>\n</ul>\n<p>See <a href=\"../api/txpool.mdx\">TxPool docs</a> for api info</p>\n","isPage":false,"text":"\n\nManages pending transactions\nOrders transactions by gas price\nValidates transaction requirements\n\nSee TxPool docs for api info\n","title":"3. Transaction Pool (Mempool)","titles":["Architecture Overview","Core Architecture"]},"443":{"href":"/introduction/architecture-overview#4-blockchain","html":"\n<ul>\n<li>Maintains block history and chain state</li>\n<li>Handles block production (mining)</li>\n<li>Manages chain reorganizations</li>\n</ul>\n<p>See <a href=\"../api/blockchain.mdx\">Blockchain docs</a> for api info</p>\n","isPage":false,"text":"\n\nMaintains block history and chain state\nHandles block production (mining)\nManages chain reorganizations\n\nSee Blockchain docs for api info\n","title":"4. Blockchain","titles":["Architecture Overview","Core Architecture"]},"444":{"href":"/introduction/architecture-overview#5-receipts-manager","html":"\n<ul>\n<li>Caches transaction outcomes</li>\n<li>Manages event logs and filters</li>\n<li>Useful for implementing optimistic updates</li>\n</ul>\n<p>See <a href=\"../api/receipt-manager.mdx\">Receipts Manager docs</a> for api info</p>\n","isPage":false,"text":"\n\nCaches transaction outcomes\nManages event logs and filters\nUseful for implementing optimistic updates\n\nSee Receipts Manager docs for api info\n","title":"5. Receipts Manager","titles":["Architecture Overview","Core Architecture"]},"445":{"href":"/introduction/architecture-overview#available-apis","html":"\n<p>Tevm Node provides several layers of APIs for different use cases:</p>\n","isPage":false,"text":"\nTevm Node provides several layers of APIs for different use cases:\n","title":"Available APIs","titles":["Architecture Overview"]},"446":{"href":"/introduction/architecture-overview#1-high-level-actions","html":"\n<p>Most functionality in Tevm is done via tree shakable actions including JSON-RPC compatabile actions.</p>\n<p>The most commonly used actions are provided as handlers:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { callHandler, mineHandler, getAccountHandler } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/actions&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create a Tevm node</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Execute contract calls</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> callHandler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  to: contractAddress,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  data: calldata</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Mine pending transactions</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> mineHandler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Read account state</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> account</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> getAccountHandler</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: accountAddress</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nMost functionality in Tevm is done via tree shakable actions including JSON-RPC compatabile actions.\nThe most commonly used actions are provided as handlers:\nimport { createTevmNode } from &#x27;tevm&#x27;\nimport { callHandler, mineHandler, getAccountHandler } from &#x27;tevm/actions&#x27;\n \n// Create a Tevm node\nconst node = createTevmNode()\n \n// Execute contract calls\nconst result = await callHandler(node)({\n  to: contractAddress,\n  data: calldata\n})\n \n// Mine pending transactions\nawait mineHandler(node)()\n \n// Read account state\nconst account = await getAccountHandler(node)({\n  address: accountAddress\n})\n","title":"1. High-Level Actions","titles":["Architecture Overview","Available APIs"]},"447":{"href":"/introduction/architecture-overview#2-json-rpc-interface","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { requestEip1193 } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/decorators&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">().</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">extend</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">requestEip1193</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">())</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Standard Ethereum JSON-RPC calls</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> balance</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">request</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  method: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;eth_getBalance&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  params: [address, </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;latest&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">]</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nimport { requestEip1193 } from &#x27;tevm/decorators&#x27;\n \nconst node = createTevmNode().extend(requestEip1193())\n \n// Standard Ethereum JSON-RPC calls\nconst balance = await node.request({\n  method: &#x27;eth_getBalance&#x27;,\n  params: [address, &#x27;latest&#x27;]\n})\n","title":"2. JSON-RPC Interface","titles":["Architecture Overview","Available APIs"]},"448":{"href":"/introduction/architecture-overview#3-direct-vm-access","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Low-level EVM execution</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> result</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">runTx</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  tx: transaction,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  block: block</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// State management</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">putAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(address, account)</span></span></code></pre>\n","isPage":false,"text":"\nconst vm = await node.getVm()\n \n// Low-level EVM execution\nconst result = await vm.runTx({\n  tx: transaction,\n  block: block\n})\n \n// State management\nawait vm.stateManager.putAccount(address, account)\n","title":"3. Direct VM Access","titles":["Architecture Overview","Available APIs"]},"449":{"href":"/introduction/architecture-overview#4-contract-utilities","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createContract } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm/contract&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Type-safe contract interactions</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> contract</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createContract</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  humanReadableAbi: abi,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: contractAddress</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> action</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> contract.write.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">transfer</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(to, amount)</span></span></code></pre>\n<p>Note, you can optionally compile these contracts automatically in a typesafe way using the tevm bundler (docs coming soon)</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// import solidity direction to create a contract</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {MyContract} </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;./MyContract.sol&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(MyContract.abi)</span></span></code></pre>\n","isPage":false,"text":"\nimport { createContract } from &#x27;tevm/contract&#x27;\n \n// Type-safe contract interactions\nconst contract = createContract({\n  humanReadableAbi: abi,\n  address: contractAddress\n})\n \nconst action = contract.write.transfer(to, amount)\nNote, you can optionally compile these contracts automatically in a typesafe way using the tevm bundler (docs coming soon)\n// import solidity direction to create a contract\nimport {MyContract} from &#x27;./MyContract.sol&#x27;\n \nconsole.log(MyContract.abi)\n","title":"4. Contract Utilities","titles":["Architecture Overview","Available APIs"]},"450":{"href":"/introduction/architecture-overview#key-features","html":"\n","isPage":false,"text":"\n","title":"Key Features","titles":["Architecture Overview"]},"451":{"href":"/introduction/architecture-overview#1-forking","html":"\n<p>Fork from any live network or another Tevm instance:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  fork: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transport: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">http</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;https://mainnet.infura.io/v3/YOUR-KEY&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">),</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    blockTag: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;latest&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nFork from any live network or another Tevm instance:\nconst node = createTevmNode({\n  fork: {\n    transport: http(&#x27;https://mainnet.infura.io/v3/YOUR-KEY&#x27;),\n    blockTag: &#x27;latest&#x27;\n  }\n})\n","title":"1. Forking","titles":["Architecture Overview","Key Features"]},"452":{"href":"/introduction/architecture-overview#2-mining-modes","html":"\n<p>Configure how transactions are processed:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  miningConfig: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    type: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;auto&#x27;</span><span style=\"color:#6A737D;--shiki-dark:#768390\"> // Mine every transaction</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Or &#x27;interval&#x27;, &#x27;manual&#x27;, &#x27;gas&#x27;</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nConfigure how transactions are processed:\nconst node = createTevmNode({\n  miningConfig: {\n    type: &#x27;auto&#x27; // Mine every transaction\n    // Or &#x27;interval&#x27;, &#x27;manual&#x27;, &#x27;gas&#x27;\n  }\n})\n","title":"2. Mining Modes","titles":["Architecture Overview","Key Features"]},"453":{"href":"/introduction/architecture-overview#3-custom-precompiles","html":"\n<p>Extend the EVM with JavaScript functions:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> precompile</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> definePrecompile</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x123...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">  call</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">: </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">async</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> (</span><span style=\"color:#E36209;--shiki-dark:#F69D50\">input</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">) </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">=&gt;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">    // Custom logic</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">    return</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      returnValue: result,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">      executionGasUsed: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nExtend the EVM with JavaScript functions:\nconst precompile = definePrecompile({\n  address: &#x27;0x123...&#x27;,\n  call: async (input) =&gt; {\n    // Custom logic\n    return {\n      returnValue: result,\n      executionGasUsed: 100n\n    }\n  }\n})\n","title":"3. Custom Precompiles","titles":["Architecture Overview","Key Features"]},"454":{"href":"/introduction/architecture-overview#4-state-management","html":"\n<p>Direct control over blockchain state:</p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Modify account state</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">setAccount</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  address: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x123...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  balance: </span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\">100</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">n</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  code: </span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;0x...&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">,</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  storage: { </span><span style=\"color:#6A737D;--shiki-dark:#768390\">/* ... */</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create checkpoints</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">checkpoint</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.stateManager.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">commit</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">() </span><span style=\"color:#6A737D;--shiki-dark:#768390\">// or .revert()</span></span></code></pre>\n","isPage":false,"text":"\nDirect control over blockchain state:\n// Modify account state\nawait node.setAccount({\n  address: &#x27;0x123...&#x27;,\n  balance: 100n,\n  code: &#x27;0x...&#x27;,\n  storage: { /* ... */ }\n})\n \n// Create checkpoints\nawait vm.stateManager.checkpoint()\nawait vm.stateManager.commit() // or .revert()\n","title":"4. State Management","titles":["Architecture Overview","Key Features"]},"455":{"href":"/introduction/architecture-overview#common-use-cases","html":"\n<ol>\n<li>\n<strong>Local Development</strong>\n<ul>\n<li>Run a complete Ethereum environment locally</li>\n<li>Test contracts without external networks</li>\n<li>Simulate complex scenarios</li>\n</ul>\n</li>\n<li>\n<strong>Testing</strong>\n<ul>\n<li>Unit test smart contracts</li>\n<li>Integration test DApp interactions</li>\n<li>Fork mainnet for realistic tests</li>\n</ul>\n</li>\n<li>\n<strong>Transaction Simulation</strong>\n<ul>\n<li>Preview transaction outcomes</li>\n<li>Estimate gas costs accurately</li>\n<li>Debug failed transactions</li>\n</ul>\n</li>\n<li>\n<strong>State Manipulation</strong>\n<ul>\n<li>Modify account balances</li>\n<li>Override contract state</li>\n<li>Test edge cases</li>\n</ul>\n</li>\n</ol>\n","isPage":false,"text":"\n\n\nLocal Development\n\nRun a complete Ethereum environment locally\nTest contracts without external networks\nSimulate complex scenarios\n\n\n\nTesting\n\nUnit test smart contracts\nIntegration test DApp interactions\nFork mainnet for realistic tests\n\n\n\nTransaction Simulation\n\nPreview transaction outcomes\nEstimate gas costs accurately\nDebug failed transactions\n\n\n\nState Manipulation\n\nModify account balances\nOverride contract state\nTest edge cases\n\n\n\n","title":"Common Use Cases","titles":["Architecture Overview"]},"456":{"href":"/introduction/architecture-overview#integration-examples","html":"\n","isPage":false,"text":"\n","title":"Integration Examples","titles":["Architecture Overview"]},"457":{"href":"/introduction/architecture-overview#with-viem","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createPublicClient, custom } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;viem&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> client</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createPublicClient</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  transport: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">custom</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node.request)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span></code></pre>\n","isPage":false,"text":"\nimport { createPublicClient, custom } from &#x27;viem&#x27;\n \nconst client = createPublicClient({\n  transport: custom(node.request)\n})\n","title":"With Viem","titles":["Architecture Overview","Integration Examples"]},"458":{"href":"/introduction/architecture-overview#with-ethersjs","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { BrowserProvider } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;ethers&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> provider</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> new</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> BrowserProvider</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(node)</span></span></code></pre>\n","isPage":false,"text":"\nimport { BrowserProvider } from &#x27;ethers&#x27;\n \nconst provider = new BrowserProvider(node)\n","title":"With Ethers.js","titles":["Architecture Overview","Integration Examples"]},"459":{"href":"/introduction/architecture-overview#next-steps","html":"\n<ul>\n<li><a href=\"../introduction/installation\">Installation &amp; Quickstart</a></li>\n<li><a href=\"../core/create-tevm-node\">Core Concepts</a></li>\n<li><a href=\"../api/methods\">API Reference</a></li>\n<li><a href=\"../examples/local-testing\">Examples</a></li>\n</ul>","isPage":false,"text":"\n\nInstallation &amp; Quickstart\nCore Concepts\nAPI Reference\nExamples\n","title":"Next Steps","titles":["Architecture Overview"]},"460":{"href":"/introduction/installation#installation--quickstart","html":"</header>\n","isPage":true,"text":"\n","title":"Installation &amp; Quickstart","titles":[]},"461":{"href":"/introduction/installation#1-install","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">npm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> install</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> tevm</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># or</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">yarn</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> add</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> tevm</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># or</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">pnpm</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> add</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> tevm</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\"># or</span></span>\n<span class=\"line\"><span style=\"color:#6F42C1;--shiki-dark:#F69D50\">bun</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> add</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> tevm</span></span></code></pre>\n","isPage":false,"text":"\nnpm install tevm\n \n# or\nyarn add tevm\n \n# or\npnpm add tevm\n \n# or\nbun add tevm\n","title":"1. Install","titles":["Installation &amp; Quickstart"]},"462":{"href":"/introduction/installation#2-quick-start","html":"\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create an instance</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Access the internal VM once it is ready</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Perform an method on the vm or one of it&#x27;s subcomponents like blockchain</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.blockchain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBlockByTag</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;latest&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))</span></span></code></pre>\n","isPage":false,"text":"\nimport { createTevmNode } from &#x27;tevm&#x27;\n \n// Create an instance\nconst node = createTevmNode()\n \n// Access the internal VM once it is ready\nconst vm = await node.getVm()\n \n// Perform an method on the vm or one of it&#x27;s subcomponents like blockchain\nconsole.log(await vm.blockchain.getBlockByTag(&#x27;latest&#x27;))\n","title":"2. Quick Start","titles":["Installation &amp; Quickstart"]},"463":{"href":"/introduction/installation#3-next-steps","html":"\n<ul>\n<li>Explore the <a href=\"../core/create-tevm-node\">Core Concepts</a></li>\n<li>Check out <a href=\"../examples/local-testing\">Examples</a></li>\n</ul>","isPage":false,"text":"\n\nExplore the Core Concepts\nCheck out Examples\n","title":"3. Next Steps","titles":["Installation &amp; Quickstart"]},"464":{"href":"/introduction/what-is-tevm-node#what-is-tevm-node","html":"</header>\n<p>Tevm Node is an in-browser &amp; Node.js-compatible Ethereum Node. It provides a complete Ethereum Virtual Machine (EVM) execution environment, powered by JavaScript, that you can run:</p>\n<ul>\n<li><strong>In Node.js</strong> for local or CI testing.</li>\n<li><strong>In the Browser</strong> for advanced user experiences (offline, real-time simulation, etc.).</li>\n<li><strong>In Deno, Bun</strong>, or any modern JS environment.</li>\n</ul>\n","isPage":true,"text":"\nTevm Node is an in-browser &amp; Node.js-compatible Ethereum Node. It provides a complete Ethereum Virtual Machine (EVM) execution environment, powered by JavaScript, that you can run:\n\nIn Node.js for local or CI testing.\nIn the Browser for advanced user experiences (offline, real-time simulation, etc.).\nIn Deno, Bun, or any modern JS environment.\n\n","title":"What is Tevm Node?","titles":[]},"465":{"href":"/introduction/what-is-tevm-node#key-features","html":"\n<ul>\n<li><strong>Forking:</strong> Simulate mainnet or testnet state from a live RPC, similar to Hardhat or Anvil but running in browser and more functionality.</li>\n<li><strong>TxPool (Mempool):</strong> Keep track of unmined transactions locally.</li>\n<li><strong>Mining Config:</strong> Choose between auto mining, interval-based mining, manual, or gas-limit-based mining.</li>\n<li><strong>Zero dependencies on native modules</strong> – works seamlessly in the browser.</li>\n<li><strong>Extendable:</strong> Hook into the VM, custom precompiles, receipts, and more.</li>\n</ul>\n","isPage":false,"text":"\n\nForking: Simulate mainnet or testnet state from a live RPC, similar to Hardhat or Anvil but running in browser and more functionality.\nTxPool (Mempool): Keep track of unmined transactions locally.\nMining Config: Choose between auto mining, interval-based mining, manual, or gas-limit-based mining.\nZero dependencies on native modules – works seamlessly in the browser.\nExtendable: Hook into the VM, custom precompiles, receipts, and more.\n\n","title":"Key Features","titles":["What is Tevm Node?"]},"466":{"href":"/introduction/what-is-tevm-node#hello-world-example","html":"\n<p>This example forks optimism then reads block data using <code>vm.blockchain</code></p>\n<pre class=\"shiki shiki-themes github-light github-dark-dimmed\" style=\"background-color:#fff;--shiki-dark-bg:#22272e;color:#24292e;--shiki-dark:#adbac7\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">import</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> { createTevmNode, http } </span><span style=\"color:#D73A49;--shiki-dark:#F47067\">from</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\"> &#x27;tevm&#x27;</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#6A737D;--shiki-dark:#768390\">// Create a node that forks from Optimism</span></span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> node</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\"> createTevmNode</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">({</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  fork: {</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">    transport: </span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">http</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;https://mainnet.optimism.io&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">)</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">  }</span></span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">})</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#D73A49;--shiki-dark:#F47067\">const</span><span style=\"color:#005CC5;--shiki-dark:#6CB6FF\"> vm</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> =</span><span style=\"color:#D73A49;--shiki-dark:#F47067\"> await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> node.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getVm</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">()</span></span>\n<span class=\"line\" data-empty-line=\"true\"> </span>\n<span class=\"line\"><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">console.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">log</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#D73A49;--shiki-dark:#F47067\">await</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\"> vm.blockchain.</span><span style=\"color:#6F42C1;--shiki-dark:#DCBDFB\">getBlockByTag</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">(</span><span style=\"color:#032F62;--shiki-dark:#96D0FF\">&#x27;latest&#x27;</span><span style=\"color:#24292E;--shiki-dark:#ADBAC7\">))</span></span></code></pre>\n","isPage":false,"text":"\nThis example forks optimism then reads block data using vm.blockchain\nimport { createTevmNode, http } from &#x27;tevm&#x27;\n \n// Create a node that forks from Optimism\nconst node = createTevmNode({\n  fork: {\n    transport: http(&#x27;https://mainnet.optimism.io&#x27;)\n  }\n})\n \nconst vm = await node.getVm()\n \nconsole.log(await vm.blockchain.getBlockByTag(&#x27;latest&#x27;))\n","title":"Hello World Example","titles":["What is Tevm Node?"]},"467":{"href":"/introduction/what-is-tevm-node#motivations--why-tevm-node","html":"\n<ul>\n<li><strong>Browser/Local Execution</strong> for improved latency &amp; advanced debugging.</li>\n<li><strong>Optimistic updates</strong>: Inspect tx side effects before on-chain mining.</li>\n<li><strong>Lightweight</strong>: Slashes overhead vs. running a full geth or anvil node.</li>\n<li><strong>Network independence</strong>: Freed from real chain constraints in your applications.</li>\n</ul>\n","isPage":false,"text":"\n\nBrowser/Local Execution for improved latency &amp; advanced debugging.\nOptimistic updates: Inspect tx side effects before on-chain mining.\nLightweight: Slashes overhead vs. running a full geth or anvil node.\nNetwork independence: Freed from real chain constraints in your applications.\n\n","title":"Motivations / Why Tevm Node","titles":["What is Tevm Node?"]},"468":{"href":"/introduction/what-is-tevm-node#next-steps","html":"\n<ul>\n<li><a href=\"./why-run-ethereum-in-js\">Why run Ethereum in JavaScript?</a></li>\n<li><a href=\"./installation\">Installation &amp; Quickstart</a></li>\n</ul>","isPage":false,"text":"\n\nWhy run Ethereum in JavaScript?\nInstallation &amp; Quickstart\n","title":"Next Steps","titles":["What is Tevm Node?"]},"469":{"href":"/introduction/why-run-ethereum-in-js#why-run-ethereum-in-javascript","html":"</header>\n","isPage":true,"text":"\n","title":"Why run Ethereum in JavaScript?","titles":[]},"470":{"href":"/introduction/why-run-ethereum-in-js#1-advanced-gas-estimation--local-execution","html":"\n<p>Running the EVM locally removes round-trip latency to a remote node. You can do:</p>\n<ul>\n<li>Bulk simulation or multi-tx simulation</li>\n<li>Real-time &quot;dry run&quot; of transactions</li>\n<li>Faster dev/test cycles</li>\n</ul>\n","isPage":false,"text":"\nRunning the EVM locally removes round-trip latency to a remote node. You can do:\n\nBulk simulation or multi-tx simulation\nReal-time &quot;dry run&quot; of transactions\nFaster dev/test cycles\n\n","title":"1. Advanced Gas Estimation &amp; Local Execution","titles":["Why run Ethereum in JavaScript?"]},"471":{"href":"/introduction/why-run-ethereum-in-js#2-user-experience-enhancements","html":"\n<ul>\n<li><strong>Offline</strong> or <em>local-first</em> capabilities</li>\n<li><strong>Optimistic UI</strong> updates with local simulation</li>\n<li>No reliance on ephemeral test networks</li>\n</ul>\n","isPage":false,"text":"\n\nOffline or local-first capabilities\nOptimistic UI updates with local simulation\nNo reliance on ephemeral test networks\n\n","title":"2. User Experience Enhancements","titles":["Why run Ethereum in JavaScript?"]},"472":{"href":"/introduction/why-run-ethereum-in-js#3-testing--debugging","html":"\n<ul>\n<li>Fine-grained EVM introspection</li>\n<li>Deterministic environment</li>\n<li>Light footprint – no external server needed</li>\n</ul>\n","isPage":false,"text":"\n\nFine-grained EVM introspection\nDeterministic environment\nLight footprint – no external server needed\n\n","title":"3. Testing &amp; Debugging","titles":["Why run Ethereum in JavaScript?"]},"473":{"href":"/introduction/why-run-ethereum-in-js#4-ecosystem--portability","html":"\n<ul>\n<li>Portable across Node.js, browsers, and serverless</li>\n<li>Works with standard EVM interfaces</li>\n<li>Integrates well with modern JS/TS tooling</li>\n</ul>","isPage":false,"text":"\n\nPortable across Node.js, browsers, and serverless\nWorks with standard EVM interfaces\nIntegrates well with modern JS/TS tooling\n","title":"4. Ecosystem &amp; Portability","titles":["Why run Ethereum in JavaScript?"]}},"dirtCount":0,"index":[["zero",{"2":{"465":1}}],["└──",{"2":{"370":3}}],["│",{"2":{"370":9}}],["├──",{"2":{"370":5}}],["718096",{"2":{"368":2,"369":1}}],["742a2a",{"2":{"365":1}}],["721",{"2":{"164":1}}],["kzgproofs",{"2":{"272":1}}],["kzgcommitments",{"2":{"272":1}}],["kzg",{"2":{"159":2}}],["keccak256",{"2":{"159":1,"304":1,"307":2,"316":3,"325":2}}],["keep",{"2":{"72":1,"293":1,"465":1}}],["key",{"0":{"12":1,"62":1,"331":1,"450":1,"465":1},"1":{"13":1,"14":1,"15":1,"451":1,"452":1,"453":1,"454":1},"2":{"6":1,"30":2,"41":6,"82":1,"85":1,"88":1,"148":2,"157":2,"252":2,"256":3,"335":2,"403":1,"409":1,"439":1,"451":1}}],["+",{"2":{"94":1,"201":1,"219":1,"303":1,"368":2,"404":1,"407":1}}],["+=",{"2":{"41":2,"43":2,"47":1,"191":2,"368":1,"373":1}}],["8",{"2":{"78":1,"368":1}}],["5rem",{"2":{"365":4}}],["5n",{"2":{"93":1,"201":1}}],["5",{"0":{"444":1},"2":{"78":2,"329":1,"365":1,"416":1,"420":1}}],["500000n",{"2":{"170":1}}],["5000",{"2":{"64":1,"289":1}}],["658",{"2":{"248":1}}],["60",{"2":{"78":1,"293":1}}],["6",{"2":{"69":1,"184":1,"286":1,"379":1,"382":1,"386":1}}],["⚡",{"2":{"62":1}}],["🧹",{"2":{"62":1}}],["📊",{"2":{"62":1}}],["🔄",{"2":{"62":1}}],["🔍",{"2":{"62":1}}],["quot",{"2":{"219":2,"299":2,"303":2,"365":28,"366":2,"368":12,"369":12,"372":6,"373":4,"392":2,"470":2}}],["queries",{"2":{"58":2,"247":1}}],["queryfilter",{"2":{"382":1}}],["query",{"2":{"57":1,"84":1,"339":1}}],["querying",{"0":{"55":1,"69":1,"246":1,"382":1},"2":{"55":1,"233":1}}],["quickstart",{"0":{"460":1},"1":{"461":1,"462":1,"463":1},"2":{"6":1,"459":1,"468":1}}],["quick",{"0":{"2":1,"6":1,"61":1,"462":1},"1":{"3":1,"4":1,"5":1}}],["||",{"2":{"41":1,"47":1,"191":1}}],["|",{"2":{"39":3,"84":3,"127":86,"131":6,"133":2,"151":20,"157":1,"199":1,"237":4,"241":1,"300":4,"307":2,"347":1,"355":1,"357":1,"358":1,"365":1,"372":1}}],["yarn",{"2":{"461":1}}],["y",{"2":{"365":1}}],["yellow",{"2":{"35":1,"342":1}}],["yourkey",{"2":{"391":1,"394":1}}],["your",{"2":{"8":1,"10":1,"36":1,"37":1,"166":1,"302":1,"365":1,"370":1,"393":1,"403":1,"409":1,"438":1,"451":1,"467":1}}],["you",{"0":{"438":1},"2":{"0":1,"3":2,"4":2,"5":1,"25":1,"36":1,"48":1,"83":1,"87":1,"180":1,"181":1,"187":1,"217":2,"250":1,"307":2,"392":1,"412":1,"420":1,"449":1,"464":1,"470":1}}],["$transactions",{"2":{"372":1}}],["$",{"2":{"34":1,"58":1,"368":1,"378":1}}],["`$",{"2":{"191":1,"378":1}}],["`0x$",{"2":{"133":1,"299":1}}],["`transaction",{"2":{"58":1}}],["`",{"2":{"34":1,"58":1,"133":1,"191":1,"299":1,"378":1}}],["`precompile",{"2":{"34":1}}],["`client",{"2":{"4":1}}],["4a5568",{"2":{"365":3}}],["4n",{"2":{"258":1}}],["4895",{"2":{"150":1,"154":1}}],["4844",{"0":{"272":1},"2":{"69":1,"73":1,"242":1,"248":1,"265":1,"278":1,"290":1,"297":1,"355":1}}],["4",{"0":{"11":1,"33":1,"78":1,"171":1,"443":1,"449":1,"454":1,"473":1},"2":{"329":1,"341":1}}],["420n",{"2":{"224":1,"299":1}}],["420",{"2":{"3":1,"312":2}}],["ui",{"0":{"362":1},"1":{"363":1,"364":1,"365":1,"366":1,"367":1,"368":1,"369":1,"370":1,"371":1,"372":1,"373":1,"374":1},"2":{"218":1,"438":1,"471":1}}],["uint8",{"2":{"378":1}}],["uint8arrays",{"2":{"301":1}}],["uint8array",{"0":{"120":1,"123":1,"124":1},"2":{"26":1,"27":2,"28":2,"30":2,"31":1,"32":1,"33":2,"34":2,"52":1,"80":1,"120":1,"127":21,"131":5,"133":1,"157":6,"159":11,"188":1,"237":5,"239":1,"240":1,"252":10,"256":1,"269":1,"272":4,"274":2,"299":1,"300":1,"302":1,"307":2,"312":2,"313":1,"357":1,"368":2}}],["uint256",{"2":{"162":3,"168":1,"201":2,"378":1,"379":1,"381":2,"382":1,"384":1,"386":2,"387":2,"388":5}}],["url",{"2":{"113":1}}],["unmined",{"2":{"465":1}}],["unexpectedly",{"2":{"306":1}}],["unreachablecodeerror",{"2":{"306":1}}],["unprefixed",{"2":{"301":1}}],["unused",{"2":{"215":1}}],["uniswap",{"2":{"403":4}}],["unit",{"0":{"315":1},"2":{"455":1}}],["unique",{"2":{"262":1,"267":1}}],["uninstallfilter",{"2":{"209":1,"215":1}}],["unified",{"2":{"146":1}}],["unclehash",{"2":{"119":1,"127":1}}],["unless",{"2":{"94":1}}],["unknownblockerror",{"2":{"144":1}}],["unknown",{"2":{"76":1,"192":1,"214":1,"391":1}}],["underflow",{"2":{"203":2}}],["understanding",{"2":{"24":1}}],["understand",{"2":{"6":1,"8":1}}],["undefined",{"2":{"43":1,"51":1,"55":2,"56":1,"58":1,"157":1,"199":1}}],["util",{"2":{"327":1}}],["utility",{"2":{"266":1,"298":1,"307":1,"308":1}}],["utilities",{"0":{"21":1,"161":1,"298":1,"307":1,"405":1,"449":1},"1":{"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"172":1,"299":1,"300":1,"301":1,"302":1,"303":1,"304":1,"305":1,"306":1,"307":1,"406":1,"407":1},"2":{"9":3,"15":1,"18":1,"20":1,"21":2,"23":1,"26":1,"35":1,"115":1,"131":1,"146":1,"148":1,"161":1,"172":1,"307":1,"308":1}}],["utils",{"0":{"308":1},"1":{"309":1,"310":1,"311":1,"312":1,"313":1,"314":1,"315":1,"316":1,"317":1,"318":1,"319":1,"320":1,"321":1,"322":1,"323":1,"324":1,"325":1,"326":1,"327":1},"2":{"21":1,"26":1,"27":1,"51":1,"119":1,"201":1,"256":1,"298":1,"307":1,"308":2,"309":1,"312":1,"313":1,"315":1,"316":1,"317":1,"318":1,"319":1,"320":1,"322":1,"323":1,"324":1,"325":1,"326":1,"369":1}}],["upon",{"2":{"298":1}}],["updatedvalue",{"2":{"399":2}}],["updateui",{"2":{"218":2}}],["updates",{"0":{"218":1},"2":{"209":1,"438":1,"444":1,"467":1,"471":1}}],["update",{"2":{"70":1,"218":2,"255":1,"336":1,"372":1}}],["up",{"2":{"6":1,"8":1,"34":1,"193":1,"215":1,"296":1,"341":1,"342":1,"365":1,"388":1,"416":1}}],["usdccontract",{"2":{"393":4}}],["usdc",{"2":{"184":2,"378":1,"393":5}}],["usage",{"0":{"27":1,"43":1,"66":1,"112":1,"145":1,"153":1,"154":1,"189":1,"221":1,"243":1,"296":1,"304":1,"360":1,"370":1,"383":1},"1":{"67":1,"68":1,"69":1,"70":1,"154":1,"155":1,"156":1,"157":1,"244":1,"245":1,"246":1,"384":1,"385":1,"386":1},"2":{"10":1,"34":1,"43":1,"47":1,"57":1,"104":1,"191":1,"209":1,"260":1,"298":1,"322":1,"341":1,"342":1,"362":1,"376":1}}],["using",{"0":{"4":1,"5":1,"26":1,"156":1,"183":1,"184":1,"212":1,"213":1,"217":1,"375":1,"411":1,"413":1},"1":{"376":1,"377":1,"378":1,"379":1,"380":1,"381":1,"382":1,"383":1,"384":1,"385":1,"386":1,"387":1,"388":1,"389":1,"412":1,"413":1,"414":2,"415":2,"416":2,"417":1,"418":1,"419":1,"420":1,"421":1,"422":1,"423":1,"424":1,"425":1,"426":1,"427":1,"428":1,"429":1,"430":1,"431":1,"432":1,"433":1,"434":1,"435":1},"2":{"10":2,"27":1,"154":1,"215":2,"216":2,"274":1,"359":1,"362":1,"415":2,"449":1,"466":1}}],["user",{"0":{"471":1},"2":{"464":1}}],["uses",{"2":{"152":1,"158":1,"203":1,"326":1}}],["used",{"2":{"9":1,"239":1,"298":1,"307":1,"332":1,"355":2,"360":1,"365":1,"410":1,"446":1}}],["useful",{"2":{"3":1,"166":1,"416":1,"444":1}}],["use",{"0":{"44":1,"455":1},"1":{"45":1,"46":1,"47":1},"2":{"3":1,"4":4,"5":2,"6":1,"34":2,"48":1,"58":1,"75":2,"77":1,"162":1,"165":1,"166":1,"168":1,"180":1,"181":1,"190":1,"191":1,"207":1,"215":2,"217":1,"219":2,"250":1,"260":2,"341":3,"370":1,"375":1,"396":1,"411":1,"412":1,"413":1,"414":1,"420":1,"438":1,"445":1}}],["pnpm",{"2":{"461":1}}],["pk",{"2":{"159":2}}],["portable",{"2":{"473":1}}],["portability",{"0":{"473":1}}],["pointer",{"2":{"365":1}}],["power",{"2":{"219":1}}],["powered",{"2":{"219":1,"464":1}}],["powerful",{"2":{"161":1,"411":1,"420":1}}],["potential",{"2":{"215":1}}],["popular",{"2":{"206":1,"375":1}}],["polygon",{"2":{"152":2}}],["post",{"2":{"241":1}}],["postbyzantiumtxreceipt",{"0":{"241":1},"2":{"241":1,"242":1}}],["postbyzantiumreceipt",{"2":{"52":2}}],["possible",{"2":{"215":1}}],["position",{"2":{"102":1,"107":1}}],["poolsize",{"2":{"78":2}}],["pooled",{"2":{"65":1,"293":1}}],["pool",{"0":{"60":1,"64":1,"72":1,"288":1,"291":1,"292":1,"337":1,"442":1},"1":{"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1,"71":1,"72":1,"73":1,"74":1,"75":1,"76":1,"77":1,"78":1,"79":1,"80":1,"81":1,"292":1,"293":1,"338":1},"2":{"11":1,"18":1,"49":1,"59":1,"60":1,"64":1,"65":1,"70":1,"73":1,"77":1,"78":3,"109":1,"279":1,"282":1,"288":3,"289":2,"290":1,"292":4,"293":1,"294":1,"295":1,"296":3,"337":6,"338":2,"342":1}}],["pc",{"2":{"39":1,"189":2,"190":2,"365":2}}],["passing",{"2":{"415":1}}],["past",{"0":{"382":1},"2":{"382":1}}],["padstart",{"2":{"368":2}}],["padding",{"2":{"365":6,"366":1,"368":1,"369":2}}],["particularly",{"2":{"416":1}}],["paris",{"2":{"151":1}}],["parentblock",{"2":{"350":1,"360":1}}],["parentbeaconblockroot",{"2":{"127":1}}],["parent",{"2":{"334":1}}],["parenthash",{"2":{"119":1,"127":1,"333":2}}],["parselog",{"2":{"386":1}}],["parseunits",{"2":{"379":1,"386":1}}],["parsedabi",{"2":{"323":2}}],["parsegwei",{"2":{"315":2}}],["parseerror",{"2":{"214":1}}],["parseether",{"2":{"75":1,"91":1,"93":1,"184":1,"229":1,"315":2,"385":1,"415":1,"416":2,"419":1}}],["parse",{"2":{"214":1,"301":1,"306":1,"323":1}}],["parseabi",{"2":{"26":2,"27":2,"30":1,"31":1,"32":1,"33":2,"34":2,"201":2,"323":2,"378":2,"379":1,"381":1,"382":1,"384":1,"386":2,"387":2,"388":5,"412":1}}],["parameter",{"2":{"113":1}}],["parameters",{"0":{"84":1,"88":1},"2":{"65":1,"99":3,"146":1,"158":1,"185":4}}],["params",{"2":{"68":2,"207":1,"214":1,"215":3,"218":3,"409":2,"447":1}}],["paper",{"2":{"35":1,"342":1}}],["patterns",{"0":{"43":1},"2":{"42":1}}],["patricia",{"2":{"21":1,"261":1}}],["paths",{"2":{"341":1}}],["path",{"0":{"7":1},"1":{"8":1,"9":1,"10":1,"11":1},"2":{"306":1}}],["packages",{"0":{"17":1},"2":{"16":1,"96":1,"195":1,"198":4,"217":4,"249":1,"262":1,"279":1,"298":1,"308":1,"343":1}}],["package",{"0":{"16":1,"129":1,"146":1},"1":{"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"136":1,"137":1,"138":1,"139":1,"140":1,"141":1,"142":1,"143":1,"144":1,"145":1,"147":1,"148":1,"149":1,"150":1,"151":1,"152":1,"153":1,"154":1,"155":1,"156":1,"157":1,"158":1,"159":1,"160":1},"2":{"16":2,"26":1,"96":1,"113":1,"115":1,"129":1,"144":1,"146":1,"151":1,"152":1,"157":1,"158":2,"159":1,"161":1,"164":1,"166":1,"173":1,"185":1,"195":1,"233":1,"249":1,"250":1,"262":1,"265":1,"277":1,"279":1,"308":1,"326":2,"343":1,"370":1}}],["petersburg",{"2":{"151":1}}],["persist",{"2":{"420":1}}],["persistent",{"2":{"34":1}}],["persistence",{"2":{"23":1}}],["persister",{"2":{"23":1}}],["permissions",{"0":{"435":1}}],["permission",{"2":{"185":1}}],["percentage",{"2":{"289":1}}],["percentageoftotal",{"2":{"191":1}}],["percent",{"2":{"68":1,"289":1}}],["periodically",{"2":{"48":1,"260":1}}],["performmorechanges",{"2":{"402":1}}],["performstatechanges",{"2":{"402":1}}],["performs",{"2":{"294":1}}],["perform",{"2":{"260":1,"402":1,"462":1}}],["performed",{"2":{"34":1}}],["performancelog",{"2":{"39":3}}],["performance",{"0":{"14":1,"36":1,"38":1,"40":1,"57":1,"77":1},"1":{"37":1,"38":1,"39":1,"40":1,"41":2,"42":2,"43":2,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"58":1},"2":{"11":2,"36":1,"38":1,"39":1,"45":2,"62":1,"194":1,"199":1,"204":1,"374":1}}],["per",{"2":{"31":1,"62":1,"64":2,"289":2,"295":1}}],["pendingtxs",{"2":{"218":2,"296":1}}],["pendingreceipt",{"2":{"218":3}}],["pending",{"2":{"11":1,"60":1,"62":1,"68":1,"84":1,"137":1,"183":1,"217":1,"218":2,"279":1,"296":1,"337":3,"442":1,"446":1}}],["privatekey",{"2":{"275":1,"316":1}}],["privatekeytoaccount",{"2":{"224":2}}],["price",{"2":{"62":1,"64":1,"68":3,"76":2,"101":1,"176":1,"242":1,"286":1,"289":4,"294":2,"295":2,"337":1,"442":1}}],["prague",{"2":{"151":1}}],["practices",{"0":{"34":1,"48":1,"58":1,"74":1,"94":1,"167":1,"193":1,"215":1,"260":1,"341":1,"388":1},"1":{"75":1,"76":1,"77":1,"78":1,"168":1,"169":1,"170":1,"171":1},"2":{"214":1}}],["pruning",{"2":{"58":1,"62":1,"65":1}}],["preparetransactionrequest",{"2":{"432":1}}],["prefunded",{"2":{"415":8}}],["prefer",{"2":{"307":1,"341":1}}],["prefixed",{"2":{"301":1}}],["prebyzantiumtxreceipt",{"0":{"240":1},"2":{"240":1}}],["prebyzantiumreceipt",{"2":{"52":1}}],["preset",{"0":{"152":1},"2":{"154":1}}],["preview",{"2":{"455":1}}],["previously",{"2":{"99":1,"177":1,"420":1}}],["previous",{"2":{"45":1}}],["prevent",{"2":{"57":1,"62":1}}],["pre",{"2":{"20":1,"164":1,"240":1,"265":1,"269":1,"368":1}}],["predeploys",{"2":{"20":1}}],["precompilefunc",{"2":{"199":1}}],["precompilelog",{"2":{"39":1}}],["precompileb",{"2":{"33":2}}],["precompilea",{"2":{"33":2}}],["precompilecontract",{"2":{"28":1}}],["precompileoutput",{"2":{"28":2}}],["precompileinput",{"2":{"28":2}}],["precompile",{"0":{"28":1,"30":1,"31":1,"32":1},"2":{"26":5,"27":2,"33":2,"34":2,"39":2,"199":5,"201":2,"204":1,"453":1}}],["precompiled",{"2":{"20":1,"25":1,"347":1}}],["precompiles",{"0":{"25":1,"26":1,"33":1,"201":1,"453":1},"1":{"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1},"2":{"11":1,"14":1,"20":1,"25":2,"26":2,"172":1,"199":1,"200":1,"201":1,"204":1,"205":1,"331":1,"465":1}}],["project",{"0":{"363":1},"2":{"363":1,"370":1}}],["proposals",{"2":{"331":1}}],["properly",{"2":{"34":1,"341":1}}],["proper",{"2":{"34":2,"75":1,"77":1,"168":1,"260":1}}],["properties",{"0":{"93":1},"2":{"9":1,"148":1}}],["produce",{"2":{"303":1}}],["production",{"2":{"8":1,"10":1,"48":2,"443":1}}],["proofs",{"0":{"258":1}}],["proof",{"2":{"252":1,"258":2}}],["program",{"2":{"189":1}}],["profileoperation",{"2":{"48":2}}],["profile",{"2":{"45":2,"48":2,"191":8,"373":2}}],["profileropts",{"2":{"347":1}}],["profiler",{"0":{"36":1,"37":1},"1":{"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1},"2":{"11":1,"36":1,"37":1,"39":1,"48":1,"191":2,"194":1,"200":1,"374":1}}],["profiling",{"0":{"191":1,"373":1},"2":{"37":2,"48":2,"200":1,"347":1}}],["promise",{"2":{"28":1,"80":3,"131":11,"132":1,"157":7,"199":1,"237":5,"252":21,"355":2,"378":1}}],["provided",{"2":{"34":1,"158":1,"446":1}}],["provides",{"2":{"26":1,"50":1,"55":1,"82":1,"96":1,"115":1,"129":1,"146":1,"161":1,"173":1,"176":1,"177":1,"178":1,"187":1,"195":1,"206":1,"217":1,"233":1,"249":1,"262":1,"279":1,"282":1,"308":1,"343":1,"355":1,"417":1,"437":1,"445":1,"464":1}}],["provide",{"2":{"25":1,"146":1,"276":1,"420":1}}],["provider",{"0":{"207":1},"2":{"5":4,"213":1,"216":1,"376":5,"378":1,"379":1,"381":1,"382":1,"384":1,"385":3,"387":3,"388":4,"458":1}}],["processed",{"2":{"188":2,"230":1,"452":1}}],["processeddata",{"2":{"27":2}}],["processdata",{"2":{"34":2}}],["processb",{"2":{"33":1}}],["processa",{"2":{"33":1}}],["processwithgas",{"2":{"31":1}}],["process",{"2":{"27":2,"32":1,"34":3,"141":1,"171":1,"193":2,"246":1,"340":1,"360":2}}],["processing",{"0":{"70":1},"2":{"17":1,"72":2,"193":1,"354":1,"437":1}}],["procedures",{"2":{"21":2}}],["protocol",{"2":{"19":1}}],["push",{"2":{"46":1,"190":2,"368":1,"381":1}}],["public",{"0":{"414":1,"422":1},"1":{"423":1,"424":1,"425":1},"2":{"4":1,"176":1,"219":2,"414":1,"422":1}}],["putreceipt",{"2":{"218":1}}],["putaccount",{"2":{"157":1,"252":1,"255":1,"335":1,"336":1,"353":1,"406":1,"448":1}}],["putcontractstorage",{"2":{"30":1,"157":1,"252":1,"256":1,"335":1}}],["putcontractcode",{"2":{"3":1,"157":1,"252":1,"256":1,"335":1}}],["putblock",{"2":{"3":1,"131":1,"136":1,"145":1,"333":1,"334":1,"404":1}}],["3600",{"2":{"227":1}}],["30000000n",{"2":{"119":1}}],["30000000000n",{"2":{"68":1,"170":1}}],["32099",{"2":{"214":1}}],["32000",{"2":{"214":1}}],["32603",{"2":{"214":1}}],["32602",{"2":{"214":1}}],["32601",{"2":{"214":1}}],["32600",{"2":{"214":1}}],["32700",{"2":{"214":1}}],["32",{"2":{"30":2,"316":1,"368":1}}],["3",{"0":{"5":1,"10":1,"32":1,"43":1,"47":1,"77":1,"93":1,"170":1,"386":1,"404":1,"416":1,"420":1,"442":1,"448":1,"453":1,"463":1,"472":1},"2":{"256":1,"265":1,"272":1,"329":1,"341":1}}],["osaka",{"2":{"151":1}}],["occurred",{"2":{"85":1,"89":1}}],["old",{"2":{"62":1,"65":1,"72":1,"288":1,"296":1}}],["override",{"2":{"334":1,"455":1}}],["overflow",{"2":{"203":2,"365":1}}],["overhead",{"2":{"48":1,"467":1}}],["over",{"2":{"43":1,"341":1,"454":1}}],["overview",{"0":{"329":1,"436":1},"1":{"437":1,"438":1,"439":1,"440":1,"441":1,"442":1,"443":1,"444":1,"445":1,"446":1,"447":1,"448":1,"449":1,"450":1,"451":1,"452":1,"453":1,"454":1,"455":1,"456":1,"457":1,"458":1,"459":1},"2":{"6":2}}],["object",{"2":{"41":1,"47":1,"299":1,"369":1}}],["outcomes",{"2":{"444":1,"455":1}}],["out",{"2":{"27":1,"30":1,"31":1,"34":2,"192":2,"203":4,"463":1}}],["our",{"2":{"0":1,"218":2,"409":1}}],["owneraddress",{"2":{"410":1}}],["owneraction",{"2":{"164":1}}],["ownerof",{"2":{"164":1}}],["own",{"2":{"16":1,"166":1,"219":1,"302":1}}],["once",{"2":{"462":1}}],["only",{"2":{"393":1}}],["ondestroy",{"2":{"365":2}}],["onmount",{"2":{"365":2}}],["onblock",{"2":{"131":2}}],["one",{"2":{"68":1,"219":1,"462":1}}],["on",{"2":{"9":1,"34":1,"39":1,"52":1,"143":1,"164":1,"188":1,"189":4,"190":3,"191":1,"192":1,"193":3,"218":4,"225":1,"230":1,"237":1,"320":1,"328":1,"330":1,"333":1,"335":1,"337":1,"354":4,"365":3,"369":1,"372":1,"373":1,"381":1,"388":1,"393":1,"396":1,"397":1,"399":1,"400":1,"402":2,"403":1,"404":1,"406":1,"407":1,"439":1,"440":1,"462":1,"465":1,"467":1,"471":1}}],["opacity",{"2":{"365":1}}],["opname",{"2":{"191":3,"373":3}}],["openzeppelin",{"2":{"172":1}}],["operation",{"2":{"48":2,"64":1}}],["operations",{"0":{"103":1,"104":1,"273":1,"332":1,"349":1,"352":1,"432":1,"433":1},"1":{"274":1,"275":1,"276":1,"350":1,"351":1},"2":{"9":1,"21":1,"34":1,"41":2,"48":3,"77":1,"99":1,"115":1,"143":1,"170":1,"260":1,"308":1,"335":3,"341":1,"387":1,"404":1}}],["opts",{"0":{"119":1,"120":1,"121":1},"2":{"199":1,"355":1}}],["optionally",{"2":{"143":1,"449":1}}],["optional",{"2":{"37":1,"65":1,"84":1,"131":1,"200":1,"246":3,"278":1,"294":1,"307":1,"419":2}}],["options",{"0":{"283":1,"347":1},"2":{"4":1,"37":1,"55":1,"80":1,"132":1,"177":1,"204":1,"296":1,"347":1,"357":1,"358":1,"360":1}}],["optimistically",{"2":{"218":1}}],["optimistic",{"0":{"218":1},"2":{"218":2,"438":1,"444":1,"467":1,"471":1}}],["optimismnode",{"2":{"395":1}}],["optimism",{"2":{"4":4,"152":2,"222":3,"225":1,"395":1,"466":3}}],["optimization",{"0":{"45":1,"47":1,"77":1},"2":{"48":1,"341":1}}],["optimized",{"2":{"62":1}}],["optimizedcode",{"2":{"48":1}}],["optimize",{"2":{"11":1,"36":1}}],["opcodelist",{"2":{"199":1}}],["opcodelog",{"2":{"39":1}}],["opcode",{"0":{"41":1},"2":{"39":3,"41":3,"189":3,"190":3,"191":5,"192":2,"203":2,"204":1,"362":1,"365":3,"373":5}}],["opcodestats",{"2":{"41":2}}],["opcodes",{"2":{"35":1,"191":4,"199":2,"204":1,"342":1}}],["other",{"0":{"307":1,"420":1},"2":{"8":1,"159":1,"204":1,"260":1,"267":1,"360":1,"437":1}}],["offline",{"2":{"464":1,"471":1}}],["offset",{"2":{"368":2}}],["off",{"2":{"193":1,"381":1,"388":1}}],["offering",{"2":{"129":1,"161":1,"302":1}}],["official",{"2":{"24":1}}],["of",{"2":{"6":1,"17":1,"27":2,"30":1,"31":1,"34":2,"39":1,"46":1,"48":1,"51":1,"57":1,"62":1,"72":1,"83":1,"84":1,"85":1,"96":1,"99":3,"113":1,"121":2,"123":1,"124":1,"129":1,"173":1,"176":1,"177":3,"183":1,"191":1,"192":2,"195":2,"203":4,"217":1,"218":2,"225":1,"233":1,"241":1,"247":2,"262":2,"267":1,"288":1,"292":2,"298":2,"307":1,"308":1,"332":1,"340":1,"343":2,"360":1,"382":1,"396":1,"406":1,"415":1,"416":1,"437":1,"438":2,"445":1,"462":1,"465":1,"470":1}}],["original",{"2":{"68":2,"409":1}}],["originaltx",{"2":{"68":3}}],["originalcode",{"2":{"48":1}}],["orders",{"2":{"442":1}}],["orderedtxs",{"2":{"69":1}}],["ordered",{"2":{"65":1,"69":1,"337":2}}],["ordering",{"2":{"60":1,"62":1,"279":1,"294":1}}],["or",{"2":{"4":1,"8":1,"14":1,"16":1,"34":1,"65":1,"137":1,"250":1,"301":1,"302":1,"304":1,"307":2,"333":1,"336":1,"347":1,"391":1,"397":1,"412":1,"420":1,"437":1,"451":1,"452":1,"454":1,"461":3,"462":1,"464":2,"465":3,"467":1,"470":1,"471":1}}],["freed",{"2":{"467":1}}],["fromcharcode",{"2":{"368":1}}],["fromtxdata",{"2":{"274":1}}],["fromrlp",{"2":{"318":2}}],["fromrlpserializedblock",{"0":{"120":1},"2":{"120":1}}],["fromrpc",{"2":{"266":1}}],["fromserializedtx",{"2":{"266":1}}],["fromstring",{"2":{"119":1}}],["fromvaluesarray",{"0":{"121":1},"2":{"121":1}}],["fromblockbodydata",{"2":{"266":1}}],["fromblockdata",{"0":{"119":1},"2":{"119":1}}],["fromblock",{"2":{"55":4,"56":1,"171":1,"246":1,"339":1,"400":1}}],["from",{"2":{"3":2,"4":3,"5":3,"8":1,"13":1,"16":2,"26":8,"27":6,"37":1,"42":2,"51":4,"61":3,"70":1,"84":1,"86":2,"91":1,"109":1,"112":2,"117":3,"119":5,"120":4,"121":4,"123":3,"124":3,"125":3,"138":1,"145":3,"149":2,"152":2,"154":3,"155":1,"156":3,"158":1,"162":2,"164":1,"165":1,"166":1,"171":2,"176":1,"177":1,"178":1,"180":1,"181":1,"184":1,"189":1,"190":1,"198":4,"200":1,"201":2,"207":2,"212":3,"213":3,"217":3,"218":2,"221":1,"222":3,"224":3,"225":1,"236":1,"237":1,"253":1,"255":2,"256":3,"266":5,"267":2,"274":1,"277":1,"282":1,"296":2,"299":6,"301":1,"302":2,"303":4,"305":1,"307":1,"308":1,"312":2,"313":1,"315":1,"316":2,"317":2,"318":2,"319":1,"320":1,"322":1,"323":1,"324":3,"325":1,"326":1,"332":1,"334":1,"346":5,"359":1,"360":3,"365":3,"366":1,"369":2,"372":1,"376":3,"378":2,"379":1,"381":4,"382":3,"384":1,"386":3,"387":3,"388":3,"391":3,"393":1,"394":1,"395":1,"397":4,"399":2,"407":2,"409":3,"410":2,"412":5,"414":1,"415":2,"416":1,"418":1,"419":1,"420":1,"441":1,"446":2,"447":1,"449":2,"451":1,"457":1,"458":1,"462":1,"465":1,"466":2,"467":1}}],["fc8181",{"2":{"365":1}}],["flex",{"2":{"365":3,"368":1,"369":1}}],["flexible",{"2":{"55":1}}],["flexibility",{"0":{"14":1}}],["fluent",{"2":{"355":1}}],["flows",{"2":{"304":1}}],["floor",{"2":{"119":1}}],["fetch",{"2":{"391":1}}],["fetched",{"2":{"334":1}}],["fetching",{"2":{"94":1}}],["feature",{"2":{"267":1}}],["features",{"0":{"11":1,"12":1,"62":1,"71":1,"331":1,"367":1,"450":1,"465":1},"1":{"13":1,"14":1,"15":1,"72":1,"73":1,"368":1,"369":1,"451":1,"452":1,"453":1,"454":1},"2":{"6":1,"249":1,"359":1}}],["feemarketeip1559txdata",{"2":{"271":1,"272":1}}],["feemarketeip1559transaction",{"2":{"265":1}}],["fee",{"2":{"73":1,"170":1,"190":1,"191":1,"265":1,"271":1,"278":1,"290":1,"297":1,"373":1}}],["fully",{"2":{"163":1,"214":1,"219":1,"412":1}}],["full",{"2":{"67":1,"96":1,"168":1,"195":1,"249":1,"262":1,"279":1,"295":1,"308":1,"330":1,"341":1,"343":1,"467":1}}],["funds",{"2":{"67":1,"231":2}}],["fundamental",{"2":{"8":1}}],["functionname",{"2":{"317":1,"410":2,"418":1}}],["functions",{"0":{"316":1},"2":{"75":1,"198":3,"217":4,"298":1,"308":1,"453":1}}],["functionprofile",{"2":{"45":4}}],["functioncalltx",{"2":{"45":1}}],["function",{"2":{"21":1,"26":1,"27":1,"30":1,"31":1,"32":1,"33":2,"34":2,"45":2,"46":1,"54":1,"112":1,"132":2,"149":1,"162":2,"168":1,"180":1,"181":1,"184":1,"190":1,"191":1,"200":1,"201":1,"215":1,"300":1,"317":2,"324":1,"365":2,"368":3,"369":1,"370":1,"378":3,"379":1,"381":1,"384":1,"386":2,"387":3,"388":6,"406":1,"407":2}}],["functionality",{"0":{"134":1,"254":1,"348":1},"1":{"135":1,"136":1,"137":1,"138":1,"139":1,"140":1,"141":1,"142":1,"255":1,"256":1,"257":1,"258":1,"259":1,"349":1,"350":1,"351":1,"352":1,"353":1},"2":{"11":1,"21":1,"22":1,"25":1,"96":1,"111":1,"115":1,"129":1,"146":1,"173":1,"195":1,"198":1,"233":1,"249":1,"262":1,"282":1,"308":1,"343":1,"417":1,"446":1,"465":1}}],["footprint",{"2":{"472":1}}],["font",{"2":{"365":2,"368":1,"369":1}}],["follows",{"2":{"304":1}}],["following",{"2":{"303":1}}],["follow",{"2":{"214":1}}],["folder",{"2":{"96":1,"195":1,"249":1,"262":1,"279":1,"308":1,"343":1}}],["foundry",{"2":{"210":1}}],["found",{"2":{"56":2,"144":1,"210":1,"214":1}}],["forging",{"2":{"302":1}}],["forms",{"2":{"299":1}}],["formatunits",{"2":{"378":1,"382":1}}],["formatascii",{"2":{"368":2}}],["formatabi",{"2":{"323":2}}],["formatbyte",{"2":{"368":2}}],["formattedabi",{"2":{"323":1}}],["formatgwei",{"2":{"315":2}}],["formatether",{"2":{"315":2}}],["formats",{"2":{"266":1,"299":1,"407":1}}],["format",{"2":{"214":1,"323":1}}],["foreach",{"2":{"246":1}}],["forked",{"0":{"393":1},"2":{"334":1}}],["forkedblock",{"2":{"334":1}}],["forkedclient",{"2":{"222":1}}],["forkedchain",{"2":{"145":1}}],["forking",{"0":{"13":1,"222":1,"390":1,"451":1},"1":{"391":1,"392":1,"393":1,"394":1,"395":1},"2":{"8":1,"10":1,"133":1,"334":1,"389":1,"395":1,"403":2,"412":1,"441":1,"465":1}}],["fork",{"0":{"334":1,"391":1,"394":1,"403":1},"2":{"4":1,"8":1,"13":1,"113":1,"133":1,"145":2,"222":2,"391":1,"393":1,"394":2,"395":3,"403":2,"409":1,"438":1,"451":2,"455":1,"466":1}}],["forks",{"2":{"4":1,"409":1,"466":2}}],["for",{"0":{"381":1,"410":1},"2":{"4":2,"9":1,"10":1,"13":1,"17":2,"19":1,"21":2,"22":1,"23":1,"26":1,"34":2,"46":1,"48":1,"50":1,"52":2,"55":1,"56":1,"58":2,"65":1,"67":1,"69":2,"75":1,"77":1,"82":1,"96":1,"99":3,"106":1,"115":2,"116":1,"129":1,"131":1,"143":1,"144":2,"146":2,"157":1,"158":1,"161":1,"162":1,"164":2,"166":1,"171":1,"173":2,"176":1,"177":1,"185":6,"189":3,"191":1,"195":1,"198":1,"199":1,"203":1,"204":1,"210":1,"212":1,"213":1,"214":2,"215":4,"217":2,"218":3,"219":1,"233":1,"236":1,"237":2,"239":1,"240":1,"241":1,"242":2,"244":2,"247":2,"249":1,"252":1,"258":1,"260":1,"262":1,"265":1,"266":1,"276":1,"279":1,"282":2,"289":1,"294":1,"295":1,"296":1,"298":1,"302":1,"304":1,"307":2,"308":1,"326":1,"332":1,"339":1,"340":1,"341":2,"343":1,"355":1,"357":1,"358":1,"359":2,"360":1,"368":1,"379":1,"382":1,"385":1,"391":1,"396":2,"397":1,"399":1,"400":1,"402":1,"403":1,"404":2,"406":2,"407":1,"409":1,"416":4,"417":1,"420":2,"440":1,"441":1,"442":1,"443":1,"444":2,"445":1,"455":1,"464":2,"467":1}}],["family",{"2":{"365":2,"368":1,"369":1}}],["familiar",{"2":{"4":1}}],["factors",{"2":{"325":1}}],["factory",{"2":{"132":1,"149":1,"274":1,"384":3,"387":2}}],["false",{"2":{"94":2,"113":1,"200":1,"244":1,"351":1,"352":2,"360":1,"365":2,"369":2}}],["faster",{"2":{"67":1,"470":1}}],["fail",{"2":{"404":1}}],["fails",{"2":{"144":1,"306":1,"359":2}}],["failed",{"2":{"54":1,"58":2,"94":1,"241":1,"332":1,"369":1,"388":1,"455":1}}],["failure",{"2":{"52":1,"402":1}}],["fine",{"2":{"420":1,"472":1}}],["final",{"2":{"355":1}}],["find",{"2":{"41":1,"409":1}}],["fields",{"2":{"239":1,"252":1,"255":1,"267":1,"269":1}}],["filters",{"0":{"105":1},"2":{"56":1,"58":1,"215":2,"246":2,"382":1,"444":1}}],["filtering",{"2":{"55":1,"215":1}}],["filter",{"2":{"41":1,"42":1,"43":1,"47":1,"50":1,"55":4,"105":2,"171":3,"209":5,"237":1,"244":1,"246":1,"382":3,"400":1}}],["first",{"2":{"15":1,"363":1,"410":1,"415":1,"471":1}}],["2rem",{"2":{"366":2}}],["2d3748",{"2":{"365":1,"366":1}}],["25rem",{"2":{"365":6,"368":1,"369":1}}],["2500",{"2":{"57":1,"247":1}}],["2718",{"2":{"265":1,"269":1,"278":1,"297":1}}],["2n",{"2":{"224":1}}],["2424",{"2":{"201":1}}],["2930",{"0":{"270":1},"2":{"73":1,"265":1,"278":1,"290":1}}],["20",{"2":{"65":1,"75":1,"164":1,"293":1,"299":3,"301":1,"302":2,"304":1,"306":1,"388":1}}],["200px",{"2":{"365":1}}],["20000000000n",{"2":{"61":2,"68":1,"274":2}}],["200n",{"2":{"26":1,"27":1,"30":1,"32":1,"33":2,"34":1}}],["21000n",{"2":{"26":1,"51":1,"61":1,"75":1,"274":2}}],["2",{"0":{"4":1,"9":1,"31":1,"42":1,"46":1,"76":1,"92":1,"169":1,"366":1,"379":1,"382":1,"385":1,"400":1,"403":1,"407":1,"415":1,"419":1,"441":1,"447":1,"452":1,"462":1,"471":1},"2":{"26":1,"33":1,"67":1,"75":1,"224":1,"246":1,"256":1,"265":1,"271":1,"304":1,"329":1,"341":1,"365":1,"368":1}}],["binance",{"2":{"392":1}}],["bitvector",{"2":{"239":2}}],["bigintlike",{"2":{"322":1,"347":1,"357":1}}],["bigints",{"2":{"301":1}}],["bigint",{"2":{"28":2,"31":1,"34":1,"39":1,"52":4,"85":2,"88":2,"119":1,"127":20,"131":5,"133":1,"159":3,"191":1,"239":1,"242":2,"252":3,"269":7,"270":1,"271":2,"272":1,"299":1,"300":1,"355":3,"373":2,"381":1}}],["border",{"2":{"365":6}}],["body",{"2":{"266":1}}],["bool",{"2":{"162":1,"168":1,"379":1,"381":1,"386":1,"387":1,"388":2}}],["boolean",{"2":{"80":2,"84":1,"85":2,"131":1,"148":1,"237":2,"252":1,"347":2,"355":1,"357":7,"358":4}}],["bottom",{"2":{"365":1,"366":1}}],["bottlenecks",{"2":{"36":1}}],["both",{"2":{"55":1,"96":1,"146":1,"173":1}}],["browsers",{"2":{"437":1,"473":1}}],["browser",{"2":{"307":1,"464":2,"465":2,"467":1}}],["browserprovider",{"2":{"5":2,"213":2,"376":2,"387":1,"458":2}}],["break",{"2":{"76":3,"192":3}}],["bun",{"2":{"461":1,"464":1}}],["bundler",{"2":{"449":1}}],["buffer",{"2":{"388":2}}],["bulk",{"2":{"77":1,"470":1}}],["button",{"2":{"365":4,"369":2}}],["but",{"2":{"72":1,"113":1,"391":1,"465":1}}],["bumps",{"2":{"294":1}}],["bump",{"2":{"68":1,"289":2,"295":1}}],["buildblock",{"2":{"350":1,"360":1}}],["build",{"2":{"298":1,"350":2,"355":2,"360":3,"438":1}}],["building",{"0":{"350":1,"355":1,"362":1},"1":{"363":1,"364":1,"365":1,"366":1,"367":1,"368":1,"369":1,"370":1,"371":1,"372":1,"373":1,"374":1},"2":{"8":1,"307":1}}],["built",{"2":{"25":1,"36":1,"57":1,"164":1,"328":1,"331":1,"439":1}}],["bloom",{"2":{"239":1,"244":1}}],["blobs",{"2":{"272":1}}],["blobversionedhashes",{"2":{"272":1}}],["blobeip4844txdata",{"2":{"272":1}}],["blobeip4844transaction",{"2":{"265":1}}],["blob",{"2":{"73":1,"113":1,"198":4,"217":4,"242":3,"248":1,"265":1,"272":1,"278":1,"290":1,"297":1,"355":1}}],["blobgaslimitexceedederror",{"2":{"113":1}}],["blobgasprice",{"2":{"52":1,"242":1}}],["blobgasused",{"2":{"52":1,"127":1,"242":1,"355":1}}],["bloat",{"2":{"62":1}}],["blockbuilder",{"2":{"350":3,"355":2,"360":3}}],["blockbyhash",{"2":{"333":1}}],["blockbytes",{"0":{"121":1}}],["blockreceipts",{"2":{"339":1}}],["blocknum",{"2":{"207":1}}],["blocknumber",{"2":{"101":1,"176":1,"180":1,"183":3,"207":1,"209":1,"218":2,"221":1,"322":1,"334":1,"340":2,"409":1}}],["blockexplorers",{"2":{"148":1}}],["blockheader",{"2":{"131":1}}],["blockhash",{"2":{"51":1,"131":1,"138":1,"237":1,"244":3,"245":2,"333":2,"339":1}}],["blockid",{"2":{"131":1,"137":1}}],["blockoptions",{"0":{"119":1,"120":1,"121":1}}],["blockdata",{"0":{"119":2},"2":{"119":2,"266":1}}],["blocks",{"0":{"136":1,"137":1,"138":1,"350":1,"351":1},"2":{"8":1,"55":1,"60":1,"70":2,"80":1,"109":1,"115":1,"116":1,"129":1,"138":1,"141":1,"177":1,"215":1,"218":1,"224":2,"230":2,"246":1,"287":1,"333":1,"334":3,"355":1,"397":1,"404":1,"416":4,"420":3,"438":1}}],["block",{"0":{"18":1,"70":1,"103":1,"115":1,"116":1,"119":1,"120":1,"121":1,"135":1,"349":1,"355":1,"394":1,"424":1,"427":1},"1":{"116":1,"117":2,"118":2,"119":2,"120":2,"121":2,"122":2,"123":2,"124":2,"125":2,"126":1,"127":1,"128":1,"136":1,"137":1,"138":1,"350":1,"351":1},"2":{"4":3,"5":1,"8":1,"14":1,"17":1,"18":2,"57":2,"58":1,"80":1,"84":1,"101":1,"103":4,"104":2,"115":4,"117":5,"119":6,"120":6,"121":6,"123":6,"124":6,"125":6,"131":6,"133":1,"136":3,"137":3,"138":1,"140":1,"141":2,"143":3,"144":2,"145":3,"160":1,"176":1,"183":1,"209":5,"215":1,"218":4,"221":1,"227":2,"237":8,"239":1,"242":1,"244":3,"245":1,"246":3,"247":2,"266":1,"329":1,"330":2,"333":10,"339":1,"347":1,"350":4,"351":2,"352":2,"354":5,"355":4,"357":3,"358":2,"359":1,"360":7,"376":1,"394":1,"404":2,"409":4,"414":2,"416":1,"443":2,"448":2,"466":1}}],["blocktag",{"2":{"4":2,"84":1,"86":1,"131":2,"133":2,"137":1,"145":1,"217":1,"218":1,"222":1,"322":3,"391":1,"394":1,"403":1,"451":1}}],["blockchainevents",{"2":{"131":1}}],["blockchain",{"0":{"129":1,"333":1,"443":1},"1":{"130":1,"131":1,"132":1,"133":1,"134":1,"135":1,"136":1,"137":1,"138":1,"139":1,"140":1,"141":1,"142":1,"143":1,"144":1,"145":1,"334":1},"2":{"3":1,"4":1,"8":1,"17":2,"55":2,"129":3,"131":1,"132":1,"136":1,"143":1,"144":2,"145":1,"198":1,"200":1,"329":1,"333":3,"343":1,"346":4,"347":2,"350":1,"360":1,"404":1,"416":1,"443":1,"454":1,"462":2,"466":2}}],["b",{"2":{"41":2,"47":2}}],["byzantium",{"2":{"151":1,"240":1,"241":1}}],["byte",{"2":{"26":3,"31":1,"299":1,"301":1,"302":1,"306":1,"368":10}}],["bytesperrow",{"2":{"368":3}}],["byteslike",{"2":{"322":1}}],["bytestonumber",{"2":{"312":1}}],["bytestobigint",{"2":{"312":1}}],["bytestohex",{"2":{"312":2}}],["bytes32",{"2":{"30":2}}],["bytes",{"0":{"312":1},"2":{"26":2,"27":2,"31":1,"33":2,"34":2,"121":1,"302":2,"306":1,"307":3,"312":3,"316":1}}],["bytecode",{"2":{"17":1,"54":1,"85":1,"88":1,"112":1,"165":2,"195":1,"198":1,"330":1,"335":1,"370":3,"384":1,"387":1,"399":2,"407":2,"409":1,"415":1,"418":1,"419":1,"440":1}}],["by",{"2":{"16":1,"41":1,"47":1,"55":3,"65":1,"68":2,"69":2,"103":4,"104":3,"137":2,"191":1,"209":2,"215":1,"217":1,"219":1,"237":1,"242":1,"245":1,"286":3,"302":2,"307":1,"333":1,"337":1,"339":1,"347":1,"404":1,"410":1,"438":1,"442":1,"464":1}}],["beyond",{"2":{"417":1}}],["behavior",{"0":{"301":1},"2":{"404":1}}],["below",{"2":{"298":1}}],["between",{"2":{"246":1,"365":1,"465":1}}],["berlin",{"2":{"151":1}}],["beforetx",{"2":{"354":1}}],["beforeblock",{"2":{"354":1}}],["beforemessage",{"2":{"188":1,"189":1}}],["beforelogs",{"2":{"48":2}}],["before",{"2":{"48":2,"60":1,"94":1,"188":1,"215":1,"338":1,"341":1,"354":2,"409":1,"467":1}}],["best",{"0":{"34":1,"48":1,"58":1,"74":1,"94":1,"167":1,"193":1,"215":1,"260":1,"341":1,"388":1},"1":{"75":1,"76":1,"77":1,"78":1,"168":1,"169":1,"170":1,"171":1},"2":{"214":1}}],["be",{"2":{"16":1,"84":1,"144":1,"163":1,"207":1,"217":2}}],["benefits",{"2":{"6":1}}],["background",{"2":{"365":4,"396":1,"399":1}}],["basetxreceipt",{"0":{"239":1},"2":{"239":1,"240":1,"241":1}}],["basecallparams",{"2":{"99":1}}],["basefeepergas",{"2":{"119":1,"127":1}}],["basefee",{"2":{"69":1,"286":1,"296":1,"337":1}}],["base",{"0":{"99":1},"2":{"68":1,"112":1}}],["based",{"0":{"404":1},"2":{"9":1,"34":1,"39":1,"52":1,"237":1,"330":1,"333":1,"335":1,"337":1,"404":1,"440":1,"465":2}}],["basic",{"0":{"27":1,"154":1,"189":1,"221":1,"322":1,"376":1,"391":1,"397":1,"412":1},"2":{"26":1,"269":1,"376":1,"387":1,"397":1}}],["basics",{"2":{"6":1}}],["balanceaction",{"2":{"163":2}}],["balanceof",{"2":{"162":2,"163":1,"225":1,"378":2,"387":3,"388":1,"393":2,"418":1}}],["balances",{"2":{"9":1,"441":1,"455":1}}],["balance",{"0":{"91":1},"2":{"3":1,"4":1,"5":1,"62":1,"65":1,"67":1,"76":2,"85":2,"86":2,"88":2,"91":1,"93":1,"94":3,"102":1,"107":1,"169":1,"176":1,"183":3,"184":1,"209":1,"210":1,"217":1,"225":2,"229":1,"252":1,"255":1,"276":1,"336":1,"359":1,"376":1,"378":3,"393":1,"397":2,"406":1,"414":2,"416":1,"419":1,"447":1,"454":1}}],["v3",{"2":{"391":1,"394":1,"403":1,"409":1,"451":1}}],["vs",{"2":{"219":1,"467":1}}],["v",{"2":{"159":1,"269":1,"316":1}}],["void",{"2":{"80":6,"131":4,"157":4,"188":4,"199":2,"237":2,"252":11}}],["volumes",{"2":{"62":1}}],["verification",{"2":{"294":1}}],["verify",{"2":{"58":1,"399":1,"402":1}}],["versions",{"2":{"62":1}}],["variables",{"2":{"215":1}}],["various",{"2":{"39":1,"143":1,"144":1,"151":1,"203":1,"262":1,"266":1,"290":1,"299":2,"301":1,"307":1,"308":1,"331":1,"359":1}}],["validatetx",{"2":{"338":1}}],["validate",{"2":{"338":1,"341":1}}],["validates",{"2":{"140":1,"442":1}}],["validateheader",{"2":{"131":1,"140":1}}],["validations",{"2":{"294":1}}],["validation",{"0":{"140":1,"294":1,"338":1},"2":{"23":1,"60":1,"62":2,"65":1,"67":3,"144":1,"158":1,"279":1,"285":2,"359":2}}],["valid",{"2":{"65":1,"301":1,"306":1}}],["validity",{"2":{"34":1}}],["valuechanged",{"2":{"400":2}}],["value2",{"2":{"93":1}}],["value1",{"2":{"93":1}}],["values",{"0":{"121":1},"2":{"75":1,"88":1,"92":1,"121":4,"378":1}}],["value",{"2":{"3":1,"30":2,"42":2,"51":1,"61":1,"75":1,"88":1,"112":1,"157":2,"162":1,"168":1,"171":2,"189":2,"209":1,"210":1,"217":1,"224":1,"229":1,"252":1,"256":2,"267":2,"269":1,"274":2,"330":1,"332":1,"335":2,"369":3,"381":1,"382":4,"385":1,"386":1,"388":1,"392":1,"397":1,"407":2,"415":1,"416":2}}],["vitest",{"2":{"397":1}}],["vite",{"2":{"363":1}}],["viewer",{"0":{"368":1,"369":1},"2":{"368":2}}],["view",{"2":{"96":1,"162":1,"195":1,"249":1,"262":1,"279":1,"308":1,"343":1,"378":3,"384":1,"387":1,"388":1}}],["viemclient",{"2":{"412":1}}],["viemchain",{"2":{"150":1}}],["viem",{"0":{"4":1,"212":1,"411":1,"413":1,"457":1},"1":{"412":1,"413":1,"414":2,"415":2,"416":2,"417":1,"418":1,"419":1,"420":1,"421":1,"422":1,"423":1,"424":1,"425":1,"426":1,"427":1,"428":1,"429":1,"430":1,"431":1,"432":1,"433":1,"434":1,"435":1},"2":{"4":2,"10":2,"15":1,"117":1,"119":1,"120":1,"121":1,"123":1,"124":1,"125":1,"146":1,"149":1,"152":3,"154":1,"156":1,"212":2,"216":1,"219":2,"224":1,"232":1,"298":1,"307":2,"327":1,"391":1,"408":1,"409":1,"410":1,"411":2,"412":4,"413":2,"414":1,"415":1,"416":2,"417":1,"422":1,"426":1,"430":1,"438":2,"457":1}}],["virtual",{"0":{"440":1},"2":{"17":1,"195":1,"283":1,"329":1,"343":1,"437":1,"464":1}}],["via",{"2":{"4":1,"65":1,"217":1,"413":1,"415":1,"446":1}}],["vmprofileropts",{"2":{"347":1}}],["vmopts",{"2":{"347":1}}],["vm",{"0":{"328":1,"343":1,"346":1,"347":1,"448":1},"1":{"329":1,"330":1,"331":1,"332":1,"333":1,"334":1,"335":1,"336":1,"337":1,"338":1,"339":1,"340":1,"341":1,"342":1,"344":1,"345":1,"346":1,"347":1,"348":1,"349":1,"350":1,"351":1,"352":1,"353":1,"354":1,"355":1,"356":1,"357":1,"358":1,"359":1,"360":1,"361":1},"2":{"3":1,"4":2,"9":1,"17":1,"26":2,"30":2,"34":1,"38":4,"45":5,"46":4,"48":3,"49":1,"51":3,"54":3,"55":2,"59":1,"80":2,"81":1,"99":3,"156":4,"176":1,"177":3,"187":1,"189":5,"190":6,"191":4,"192":1,"193":4,"217":1,"282":1,"283":2,"296":1,"330":3,"341":1,"343":4,"344":1,"346":2,"350":1,"351":1,"352":1,"353":3,"354":5,"359":1,"360":6,"361":1,"365":6,"369":2,"370":2,"372":1,"373":1,"392":2,"397":3,"399":3,"400":1,"402":7,"403":1,"404":5,"406":2,"407":4,"408":1,"410":3,"448":3,"454":2,"462":4,"465":1,"466":3}}],["light",{"2":{"472":1}}],["lightweight",{"2":{"298":1,"467":1}}],["library",{"2":{"375":1}}],["libraries",{"2":{"206":1,"308":1}}],["lib",{"2":{"366":1,"370":1}}],["live",{"2":{"362":1,"441":1,"451":1,"465":1}}],["like",{"2":{"219":1,"298":1,"438":1,"462":1}}],["listening",{"0":{"381":1}}],["listener",{"2":{"320":1,"381":1}}],["listeners",{"2":{"193":1,"388":1}}],["listen",{"2":{"171":1,"189":3}}],["list",{"2":{"101":1,"290":1}}],["lists",{"2":{"73":1,"265":1,"270":1,"278":1}}],["lifecycle",{"0":{"65":1},"2":{"60":1,"279":1}}],["limiting",{"2":{"247":1}}],["limits",{"0":{"64":1,"293":1},"2":{"34":1,"57":2,"64":2,"294":2,"341":1}}],["limit",{"2":{"34":1,"57":3,"58":1,"65":1,"113":1,"170":1,"247":3,"252":1,"277":1,"293":2,"359":1,"465":1}}],["lt",{"2":{"27":1,"28":1,"30":1,"34":1,"80":3,"131":12,"132":1,"150":1,"157":7,"166":3,"199":1,"237":5,"252":22,"292":2,"323":2,"324":2,"355":2,"365":50,"366":9,"368":16,"369":17,"372":15,"373":29,"388":1,"391":1,"394":1,"404":1,"409":1}}],["layers",{"2":{"445":1}}],["lang=",{"2":{"365":1,"366":1,"368":1,"369":1,"372":1,"373":1}}],["last",{"2":{"257":1}}],["latency",{"2":{"467":1,"470":1}}],["later",{"2":{"193":1,"388":1}}],["latestblock",{"2":{"145":1}}],["latest",{"2":{"4":3,"55":1,"84":1,"86":1,"137":2,"145":2,"171":1,"217":1,"222":1,"322":1,"333":1,"339":1,"363":1,"382":1,"400":1,"414":1,"447":1,"451":1,"462":1,"466":1}}],["large",{"2":{"48":1,"58":1,"62":1,"295":1}}],["lazy",{"2":{"14":1,"441":1}}],["left",{"2":{"365":1}}],["letter",{"2":{"368":1}}],["let",{"2":{"299":1,"365":6,"368":4,"369":3,"388":1,"404":3,"409":1}}],["less",{"2":{"219":1}}],["legacytx",{"2":{"274":1}}],["legacytxdata",{"2":{"269":1,"270":1}}],["legacytransaction",{"2":{"265":1,"274":2}}],["legacy",{"0":{"269":1},"2":{"73":1,"290":1}}],["least",{"2":{"68":2}}],["learn",{"2":{"8":1}}],["learning",{"0":{"7":1},"1":{"8":1,"9":1,"10":1,"11":1}}],["length",{"2":{"31":1,"32":1,"34":2,"56":1,"189":1,"190":1,"365":1,"368":1,"400":1}}],["levels",{"2":{"67":1}}],["level",{"0":{"385":1,"446":1},"2":{"3":2,"6":1,"133":1,"150":1,"178":1,"187":2,"217":2,"219":1,"298":1,"307":2,"341":1,"418":1,"448":1}}],["lot",{"2":{"438":1}}],["locked",{"2":{"404":1}}],["localblock",{"2":{"334":1}}],["locally",{"2":{"10":1,"391":1,"393":1,"414":1,"438":1,"455":1,"465":1,"470":1}}],["local",{"0":{"396":1,"470":1},"1":{"397":1,"398":1,"399":1,"400":1,"401":1,"402":1,"403":1,"404":1,"405":1,"406":1,"407":1,"408":1,"409":1,"410":1},"2":{"10":1,"334":1,"389":1,"393":1,"396":1,"420":1,"455":1,"464":1,"467":1,"471":2}}],["london",{"2":{"151":1,"154":1,"155":1}}],["long",{"2":{"48":1}}],["loadfixture",{"2":{"387":2}}],["loadstorage",{"2":{"369":2}}],["loadstate",{"2":{"110":1,"177":1,"184":1,"429":1}}],["loadstatehandler",{"2":{"99":1,"177":1}}],["loads",{"2":{"177":1}}],["load",{"2":{"99":1,"110":1,"184":1,"369":2,"420":1}}],["loading",{"2":{"14":1,"369":6,"438":1,"441":1}}],["logic",{"2":{"453":1}}],["logindex",{"2":{"51":1,"245":2,"246":2,"340":2}}],["logtopic",{"2":{"185":1}}],["logoptions",{"2":{"133":1,"150":1}}],["logginglevel",{"2":{"133":1,"145":1,"150":1,"154":1,"200":1,"204":1,"253":1,"391":1}}],["logging",{"2":{"22":1,"133":1,"150":1,"200":1,"204":1}}],["logger",{"2":{"22":1}}],["logsbloom",{"2":{"119":1,"127":1}}],["logs",{"0":{"50":1,"53":1,"55":1,"105":1,"246":1,"340":1},"1":{"51":1,"52":1,"53":1,"54":2,"55":2,"56":2,"57":1,"58":1,"59":1},"2":{"11":2,"38":3,"41":1,"42":1,"43":1,"45":3,"46":2,"47":1,"48":3,"50":1,"51":3,"52":2,"56":3,"57":4,"81":1,"105":2,"199":1,"204":4,"209":3,"216":1,"218":1,"233":1,"236":1,"237":1,"239":2,"246":4,"247":4,"329":1,"332":2,"339":3,"340":2,"342":1,"386":2,"400":6,"409":1,"444":1}}],["log",{"0":{"39":1},"2":{"4":2,"41":7,"42":9,"43":9,"45":1,"47":5,"51":1,"52":2,"55":1,"56":3,"57":1,"58":2,"86":4,"171":1,"183":2,"185":1,"189":4,"190":1,"191":1,"204":2,"245":5,"246":13,"247":1,"302":2,"325":1,"332":7,"333":1,"340":8,"360":2,"378":1,"379":1,"382":1,"384":1,"386":3,"409":1,"410":2,"449":1,"462":1,"466":1}}],["lower",{"2":{"217":1,"219":1,"298":1,"307":1}}],["low",{"0":{"385":1},"2":{"3":1,"76":2,"178":1,"187":1,"295":1,"418":1,"448":1}}],["000n",{"2":{"391":1,"394":1,"403":1}}],["000",{"2":{"391":1,"394":1,"403":1}}],["00",{"2":{"299":1}}],["0",{"2":{"30":1,"32":1,"34":1,"41":3,"43":1,"47":1,"52":1,"56":1,"64":1,"78":1,"184":1,"191":1,"201":1,"241":2,"246":1,"315":4,"365":12,"366":1,"368":7,"369":3,"373":1,"386":1,"400":2,"404":1,"409":1,"415":2}}],["0n",{"2":{"3":1,"41":2,"43":2,"47":2,"61":1,"68":2,"75":1,"119":3,"183":2,"191":2,"201":1,"217":2,"274":2,"330":1,"339":1,"365":1,"373":1,"400":1,"406":1}}],["0x70997970c51812dc3a010c7d01b50e0d17dc79c8",{"2":{"397":1,"406":1}}],["0x28c6c06298d514db089934071355e5743bf21d60",{"2":{"392":1,"403":1}}],["0x2345",{"2":{"61":1}}],["0x2345678901234567890123456789012345678901",{"2":{"51":1}}],["0x5678",{"2":{"379":1,"393":1}}],["0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",{"2":{"119":2}}],["0x48656c6c6f",{"2":{"312":2}}],["0x456",{"2":{"112":3,"181":1,"183":1,"184":1,"318":1}}],["0x0",{"2":{"419":1}}],["0x01a4",{"2":{"312":4}}],["0x0000000000000000",{"2":{"119":1}}],["0x0000000000000000000000000000000000000000",{"2":{"119":1}}],["0x0000000000000000000000000000000000000000000000000000000000000002",{"2":{"256":1}}],["0x0000000000000000000000000000000000000000000000000000000000000001",{"2":{"256":1}}],["0x{"2":{"119":1}}],["0x0000000000000000000000000000000000000000000000000000000000000000",{"2":{"119":3}}],["0x000000000000000000000000000000000000000000000000000000000000abcd",{"2":{"55":1}}],["0x0000000000000000000000000000000000000128",{"2":{"33":1}}],["0x0000000000000000000000000000000000000127",{"2":{"33":1}}],["0x0000000000000000000000000000000000000126",{"2":{"32":1}}],["0x0000000000000000000000000000000000000125",{"2":{"31":1}}],["0x0000000000000000000000000000000000000124",{"2":{"30":1}}],["0x0000000000000000000000000000000000000123",{"2":{"26":1,"27":1,"34":2}}],["0x0000",{"2":{"56":1,"92":2}}],["0x00",{"2":{"26":1}}],["0xf0d4c12a5768d806021f80a262b4d39d26c58b8d",{"2":{"225":1}}],["0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",{"2":{"184":1,"397":1,"406":1}}],["0xda10009cbd5d07dd0cecc66161fc93d7c9000da1",{"2":{"225":1}}],["0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",{"2":{"224":1}}],["0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",{"2":{"184":1,"378":1,"393":1}}],["0x6080604",{"2":{"184":1}}],["0x1",{"2":{"400":1,"419":1}}],["0x1111",{"2":{"303":1}}],["0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",{"2":{"119":1}}],["0x123",{"2":{"112":3,"113":1,"181":1,"183":2,"184":2,"313":2,"318":1,"453":1,"454":1}}],["0x1234",{"2":{"5":1,"61":1,"163":1,"316":1,"365":1,"376":1,"378":1,"385":1,"386":1,"387":2,"392":1,"393":2,"414":2,"418":2,"419":2}}],["0x1234567890123456789012345678901234567890123456789012345678901234",{"2":{"56":1}}],["0x1234567890123456789012345678901234567890",{"2":{"3":3,"4":1,"26":1,"51":1,"54":2,"255":1,"256":1,"415":1,"416":2}}],["0x",{"2":{"3":2,"86":1,"91":1,"92":1,"93":1,"94":2,"112":1,"119":1,"162":2,"163":1,"164":3,"165":1,"169":1,"170":1,"217":5,"229":3,"274":2,"301":1,"302":1,"317":1,"322":2,"330":3,"365":1,"370":3,"385":1,"409":2,"418":2,"419":1,"454":1}}],["==",{"2":{"43":1}}],["===",{"2":{"32":1,"34":1,"41":1,"42":1,"47":1,"56":2,"58":1,"372":1,"388":2}}],["=",{"2":{"3":4,"4":6,"5":4,"26":8,"27":6,"28":1,"30":7,"31":3,"32":2,"33":5,"34":8,"37":1,"38":2,"41":7,"42":3,"43":5,"45":3,"46":3,"47":7,"48":4,"51":7,"54":5,"55":6,"56":4,"57":3,"58":2,"61":3,"64":1,"68":2,"69":4,"75":1,"78":2,"84":1,"85":1,"86":2,"88":1,"89":1,"94":3,"112":9,"113":1,"117":1,"119":3,"120":3,"121":3,"123":3,"124":3,"125":3,"131":1,"133":1,"137":3,"141":2,"142":2,"143":1,"145":3,"148":1,"149":1,"150":1,"151":1,"154":2,"155":1,"156":2,"162":3,"163":2,"164":7,"165":3,"166":3,"168":2,"169":1,"170":1,"171":2,"180":1,"181":1,"183":3,"184":2,"188":5,"189":6,"190":8,"191":8,"192":2,"193":4,"198":1,"200":1,"201":3,"203":9,"204":2,"207":2,"212":2,"213":2,"215":3,"217":3,"218":9,"221":2,"222":1,"224":9,"225":2,"228":1,"230":3,"236":1,"244":3,"245":2,"246":2,"247":3,"252":23,"253":1,"255":3,"256":7,"257":2,"258":4,"259":1,"260":1,"266":3,"267":1,"274":2,"275":1,"277":1,"282":1,"286":3,"289":5,"293":2,"296":2,"299":3,"302":1,"303":3,"312":6,"316":4,"317":3,"318":2,"319":3,"320":2,"322":3,"323":2,"324":2,"330":4,"333":3,"334":1,"335":5,"336":1,"337":3,"339":4,"346":5,"350":2,"351":1,"352":1,"353":1,"354":4,"360":4,"365":20,"368":7,"369":8,"370":1,"372":3,"373":5,"376":4,"378":4,"379":5,"381":5,"382":5,"384":4,"385":5,"386":5,"387":9,"388":17,"391":1,"392":2,"393":4,"394":2,"395":2,"397":6,"399":11,"400":6,"402":4,"403":5,"404":9,"406":1,"407":4,"409":7,"410":6,"412":2,"414":3,"415":3,"418":3,"419":1,"420":1,"446":3,"447":2,"448":2,"449":2,"451":1,"452":1,"453":2,"457":1,"458":1,"462":2,"466":2}}],["svvy",{"2":{"438":1}}],["svelte",{"0":{"365":1,"366":1},"2":{"362":1,"363":2,"365":1,"366":1,"370":4,"372":1}}],["swapexacttokensfortokens",{"2":{"403":1}}],["switchchain",{"2":{"434":1}}],["switch",{"2":{"76":1,"192":1}}],["src",{"2":{"370":1}}],["sh",{"2":{"438":1}}],["should",{"2":{"387":1,"404":2}}],["show",{"2":{"362":1}}],["shakable",{"2":{"413":1,"446":1}}],["shakeable",{"2":{"219":1}}],["shadow",{"0":{"409":1},"2":{"409":1}}],["shape",{"2":{"302":1}}],["shard",{"2":{"248":1,"278":1,"297":1}}],["shares",{"2":{"142":1}}],["shared",{"2":{"21":1}}],["shanghai",{"2":{"151":1}}],["shallow",{"2":{"142":1}}],["shallowcopy",{"2":{"131":1,"142":2}}],["skipheadervalidation",{"2":{"357":1}}],["skiphardforkvalidation",{"2":{"355":1,"358":1}}],["skipnonce",{"2":{"352":1,"357":1,"358":1}}],["skipblockvalidation",{"2":{"351":1,"357":1,"360":1}}],["skipbalance",{"2":{"285":1,"352":1,"357":1,"358":1}}],["scenarios",{"0":{"401":1},"1":{"402":1,"403":1,"404":1},"2":{"295":1,"359":1,"416":2,"420":1,"455":1}}],["script",{"2":{"165":5,"365":2,"366":2,"368":2,"369":2,"372":2,"373":2}}],["scripts",{"0":{"165":1},"2":{"165":1}}],["snap",{"2":{"228":2}}],["snapshot",{"2":{"228":3,"335":1,"429":1}}],["snapshots",{"0":{"228":1},"2":{"335":1}}],["spenderaddress",{"2":{"410":1}}],["specification",{"2":{"114":1,"216":1,"327":1}}],["specifictxs",{"2":{"69":1}}],["specific",{"0":{"314":1,"394":1},"1":{"315":1,"316":1},"2":{"16":1,"25":1,"34":1,"45":1,"48":2,"58":1,"96":1,"144":1,"146":1,"148":1,"158":1,"169":1,"173":1,"177":3,"181":1,"198":1,"215":1,"249":1,"255":1,"265":1,"290":1,"308":1,"394":1,"416":1,"420":1}}],["spacing",{"2":{"368":1}}],["space",{"2":{"365":1,"368":1}}],["span",{"2":{"368":6,"369":4}}],["spuriousdragon",{"2":{"151":1}}],["slashes",{"2":{"467":1}}],["slots",{"2":{"419":1}}],["slot",{"2":{"176":1,"369":4}}],["slot2",{"2":{"93":1}}],["slot1",{"2":{"93":1}}],["slice",{"2":{"30":2,"41":1,"368":1}}],["saving",{"0":{"244":1}}],["saved",{"2":{"420":1}}],["save",{"2":{"244":1,"420":1}}],["saves",{"2":{"237":1}}],["savereceipts",{"2":{"237":1,"244":1}}],["sample",{"2":{"365":1}}],["sampling",{"2":{"48":1}}],["same",{"2":{"68":3}}],["safety",{"0":{"168":1},"2":{"58":1,"99":1,"162":1}}],["safe",{"2":{"26":1,"161":1,"162":2,"381":1,"449":1}}],["sol",{"2":{"449":1}}],["solid",{"2":{"365":1}}],["solidity",{"2":{"172":1,"449":1}}],["soon",{"2":{"449":1}}],["sourceid",{"2":{"148":1}}],["sortedtxs",{"2":{"286":1}}],["sorted",{"2":{"286":1}}],["sort",{"2":{"41":1,"47":1}}],["some",{"2":{"38":1,"190":1,"307":1}}],["single",{"2":{"287":1,"352":1}}],["signtypeddata",{"2":{"433":1}}],["signtransaction",{"2":{"385":1,"432":1}}],["signmessage",{"2":{"433":1}}],["signing",{"0":{"275":1,"433":1}}],["signer",{"2":{"379":3,"384":3,"385":2,"387":5}}],["signeraccount",{"2":{"224":2}}],["signedtx",{"2":{"275":1,"385":2}}],["signed",{"2":{"209":1,"276":1}}],["sign",{"2":{"219":1,"275":1,"316":1,"385":1}}],["signature",{"0":{"300":1},"2":{"159":1,"294":1,"316":2,"392":1}}],["size",{"2":{"34":1,"57":1,"64":3,"77":1,"78":2,"247":1,"289":4,"294":1,"307":1,"368":3,"369":1}}],["simulation",{"2":{"455":1,"464":1,"470":2,"471":1}}],["simulating",{"2":{"267":1,"304":1}}],["simulator",{"2":{"438":1}}],["simulate",{"2":{"438":1,"455":1,"465":1}}],["simulatecontract",{"2":{"423":1}}],["simplified",{"2":{"161":1}}],["simplecontract",{"2":{"224":4}}],["simple",{"2":{"26":1,"27":1,"221":1,"302":1}}],["similar",{"2":{"25":1,"465":1}}],["side",{"2":{"22":1,"467":1}}],["symbolaction",{"2":{"164":1}}],["symbol",{"2":{"155":1,"164":1,"165":2,"378":4}}],["sync",{"2":{"23":1}}],["synchronization",{"0":{"23":1},"2":{"23":1,"185":1}}],["system",{"2":{"22":1,"50":1}}],["smart",{"0":{"20":1},"2":{"20":1,"36":1,"99":1,"161":1,"172":1,"396":2,"416":1,"455":1}}],["subcomponents",{"2":{"462":1}}],["submit",{"2":{"218":1}}],["submitting",{"2":{"68":1}}],["submodules",{"0":{"328":1},"1":{"329":1,"330":1,"331":1,"332":1,"333":1,"334":1,"335":1,"336":1,"337":1,"338":1,"339":1,"340":1,"341":1,"342":1},"2":{"9":1,"49":1,"59":1,"81":1,"328":1,"329":1}}],["sufficient",{"2":{"215":1}}],["supplyaction",{"2":{"164":1}}],["supported",{"0":{"208":1},"1":{"209":1,"210":1},"2":{"422":1,"426":1,"430":1}}],["supports",{"2":{"52":1,"73":1,"151":1,"159":1,"201":1,"210":1,"265":1,"290":1,"441":1}}],["support",{"0":{"151":1,"206":1,"334":1,"395":1},"1":{"207":1,"208":1,"209":1,"210":1,"211":1,"212":1,"213":1,"214":1,"215":1,"216":1,"217":1,"218":1},"2":{"5":1,"9":1,"15":1,"35":1,"50":1,"59":1,"81":1,"95":1,"113":1,"204":1,"206":1,"262":1,"331":1,"341":1,"342":1,"376":1,"389":1,"395":1,"412":1,"437":1}}],["succeed",{"2":{"404":1}}],["succeeded",{"2":{"58":1,"397":1}}],["successful",{"2":{"241":1}}],["success",{"2":{"52":1,"58":2,"372":2}}],["surface",{"2":{"8":1}}],["s",{"2":{"4":1,"25":1,"27":1,"54":1,"136":1,"140":1,"152":1,"159":1,"187":1,"195":1,"219":3,"269":1,"304":1,"307":1,"316":1,"343":1,"411":1,"414":1,"415":1,"416":1,"422":1,"426":1,"430":1,"438":1,"462":1}}],["section",{"2":{"438":1}}],["second",{"2":{"230":1}}],["seconds",{"2":{"227":1}}],["sealblockopts",{"2":{"355":1}}],["sealopts",{"2":{"355":1}}],["seal",{"2":{"350":1,"360":1}}],["seamlessly",{"2":{"465":1}}],["seamless",{"2":{"206":1,"375":1,"411":1}}],["sent",{"2":{"267":1,"438":1}}],["sendeth",{"2":{"407":1}}],["senderaddress",{"2":{"69":1,"304":1}}],["sendertxs",{"2":{"69":1}}],["sender",{"2":{"69":1,"286":1}}],["sending",{"2":{"215":1}}],["sendrawtransaction",{"2":{"209":1,"385":1,"432":1}}],["sendtransaction",{"2":{"209":1,"215":1,"218":1,"415":1,"432":1}}],["sendbulk",{"2":{"178":1}}],["send",{"2":{"178":1,"209":2,"219":1,"379":1,"385":2,"399":1,"407":1,"415":1}}],["separates",{"2":{"328":1}}],["separate",{"2":{"219":1}}],["sepolia",{"2":{"152":2}}],["self",{"2":{"165":1}}],["selector",{"2":{"54":2}}],["serialize",{"0":{"124":1},"2":{"124":1,"276":1}}],["serializeddata",{"2":{"266":1}}],["serializedblock",{"2":{"120":2}}],["serialized",{"0":{"120":1},"2":{"120":1,"124":1,"266":1}}],["serverless",{"2":{"473":1}}],["servererror",{"2":{"214":1}}],["server",{"2":{"19":2,"214":1,"370":1,"472":1}}],["several",{"2":{"64":1,"113":1,"185":1,"247":1,"292":1,"294":1,"439":1,"445":1}}],["sequence",{"2":{"62":1}}],["sessions",{"2":{"48":1}}],["see",{"0":{"114":1,"128":1,"160":1,"186":1,"205":1,"232":1,"248":1,"278":1,"297":1,"327":1,"361":1},"2":{"4":1,"164":1,"198":4,"212":1,"213":1,"214":3,"215":2,"217":6,"218":1,"396":1,"397":1,"399":1,"400":1,"402":1,"403":1,"404":1,"406":1,"407":1,"440":1,"441":1,"442":1,"443":1,"444":1}}],["setmingasprice",{"2":{"428":1}}],["setautomine",{"2":{"427":1}}],["setaccount",{"2":{"177":1,"184":1,"409":1,"454":1}}],["setaccountresult",{"2":{"89":1}}],["setaccountparams",{"2":{"88":1,"217":1}}],["setaccounthandler",{"0":{"87":1},"1":{"88":1,"89":1,"90":1,"91":1,"92":1,"93":1},"2":{"3":1,"82":1,"87":1,"91":2,"92":1,"93":1,"94":2,"99":1,"177":1,"217":1}}],["setblockgaslimit",{"2":{"427":1}}],["setblocktimestampinterval",{"2":{"427":1}}],["setblocktimestamp",{"2":{"416":2}}],["setbalance",{"2":{"107":1,"210":1,"219":1,"229":1,"416":3,"428":1}}],["setfilter",{"2":{"400":1}}],["setvalue",{"2":{"399":1,"400":1}}],["setupaccounts",{"2":{"406":1}}],["setupeventlisteners",{"2":{"365":2,"388":2,"438":1}}],["setup",{"0":{"363":1,"376":1,"391":1,"397":1,"412":1},"2":{"378":1,"387":1,"406":1}}],["sethardfork",{"2":{"347":1,"357":1}}],["sethash",{"2":{"224":1}}],["setnextblockbasefeepergas",{"2":{"427":1}}],["setnextblocktimestamp",{"2":{"227":1,"416":2,"427":1}}],["setnonce",{"2":{"107":1,"210":1,"428":1}}],["setstateroot",{"2":{"252":1,"257":1}}],["setstorageat",{"2":{"107":1,"210":1,"428":1}}],["sets",{"2":{"177":1}}],["setimpersonatedaccount",{"2":{"392":1,"403":1}}],["setiteratorhead",{"2":{"131":1,"141":1}}],["setintervalmining",{"2":{"427":1}}],["setinterval",{"2":{"78":1}}],["setcoinbase",{"2":{"107":1,"428":1}}],["setcode",{"2":{"107":1,"210":1,"428":1}}],["setchainid",{"2":{"107":1}}],["setting",{"0":{"91":1},"2":{"215":1,"416":1}}],["set",{"2":{"3":1,"8":1,"17":1,"94":1,"96":1,"99":1,"107":6,"109":1,"113":1,"141":1,"163":1,"170":2,"173":1,"184":1,"190":1,"191":1,"210":4,"217":2,"224":1,"227":1,"229":1,"252":1,"256":2,"257":1,"298":1,"347":1,"373":1,"388":1,"416":1}}],["style",{"2":{"299":1,"365":2,"366":2,"368":2,"369":2}}],["stepcount",{"2":{"190":1}}],["steps",{"0":{"459":1,"463":1,"468":1},"2":{"189":1,"190":3,"365":10}}],["step",{"2":{"188":2,"189":8,"190":7,"191":4,"193":11,"365":11,"373":4,"438":2}}],["stopimpersonatingaccount",{"2":{"108":1,"210":1,"229":1}}],["stop",{"2":{"72":2,"80":1,"108":1,"210":1,"229":1,"288":2,"296":2}}],["stored",{"2":{"65":1}}],["store",{"2":{"30":1,"203":1,"365":1,"372":1,"391":1}}],["storageviewer",{"2":{"370":1}}],["storagekeys",{"2":{"252":1,"258":1}}],["storagerange",{"2":{"252":1}}],["storageroot",{"2":{"85":1,"336":1}}],["storagedump",{"2":{"252":1}}],["storage",{"0":{"23":1,"369":1},"2":{"8":1,"17":1,"23":2,"34":1,"58":1,"65":2,"84":1,"85":3,"86":2,"88":1,"92":1,"94":2,"102":1,"107":1,"176":1,"209":1,"210":1,"233":1,"249":1,"256":2,"258":3,"293":1,"329":1,"331":1,"335":2,"369":12,"419":2,"420":1,"441":1,"454":1}}],["str",{"2":{"312":1}}],["structure",{"0":{"292":1},"2":{"370":1}}],["structures",{"2":{"21":1,"292":1,"308":1}}],["strongly",{"2":{"162":1}}],["stringtohex",{"2":{"312":2}}],["strings",{"2":{"301":1}}],["string",{"2":{"39":3,"46":1,"80":1,"127":21,"131":3,"133":1,"148":3,"214":1,"292":2,"299":1,"300":1,"306":1,"307":2,"312":1,"365":1,"368":1,"369":2,"372":3,"373":1,"378":1,"381":2,"388":2}}],["strategies",{"2":{"13":1}}],["still",{"2":{"4":1}}],["stack",{"2":{"189":3,"190":2,"203":4,"362":1,"365":9}}],["stable",{"2":{"64":1}}],["stats",{"2":{"191":8,"204":2,"373":7}}],["static",{"0":{"118":1},"1":{"119":1,"120":1,"121":1},"2":{"203":2}}],["status",{"2":{"51":3,"52":1,"58":2,"109":1,"185":1,"241":2,"245":2,"248":1,"372":3}}],["stateroot",{"2":{"52":1,"119":1,"127":1,"240":1,"333":2}}],["stateprecompile",{"2":{"30":2}}],["statemanager",{"0":{"252":1,"335":1},"1":{"336":1},"2":{"3":1,"30":1,"198":1,"200":1,"252":2,"253":1,"255":5,"256":6,"257":6,"258":4,"259":2,"260":7,"329":1,"335":3,"346":3,"347":2,"353":3,"369":1,"397":1,"402":3,"406":1,"448":1,"454":2}}],["state",{"0":{"13":1,"30":1,"102":1,"107":1,"110":1,"139":1,"157":1,"228":1,"249":1,"253":1,"257":1,"258":1,"291":1,"353":1,"378":1,"402":1,"428":1,"429":1,"441":1,"454":1},"1":{"140":1,"141":1,"250":1,"251":1,"252":1,"253":1,"254":1,"255":1,"256":1,"257":1,"258":1,"259":1,"260":1,"261":1,"292":1,"293":1},"2":{"3":2,"4":1,"8":2,"10":1,"13":1,"17":2,"34":3,"35":1,"82":1,"83":1,"84":1,"87":1,"88":1,"92":1,"93":1,"94":1,"95":1,"99":5,"102":1,"110":3,"129":1,"131":1,"142":2,"157":2,"172":1,"176":1,"177":5,"184":4,"198":2,"203":2,"205":1,"209":1,"210":1,"215":1,"216":1,"217":2,"240":1,"249":5,"250":2,"252":1,"253":1,"255":2,"256":1,"257":3,"258":2,"259":1,"260":1,"261":1,"329":2,"330":1,"331":2,"333":1,"335":12,"336":2,"341":2,"342":1,"343":1,"346":1,"347":2,"351":1,"353":2,"361":1,"362":1,"365":1,"387":1,"393":2,"394":1,"395":1,"399":1,"402":5,"408":1,"416":1,"419":2,"420":8,"437":1,"440":1,"441":1,"443":1,"446":1,"448":1,"454":2,"455":2,"465":1}}],["startoffset",{"2":{"368":2}}],["startkey",{"2":{"252":1}}],["starttime",{"2":{"39":1,"43":1}}],["start",{"0":{"6":1,"61":1,"462":1},"2":{"6":1,"72":2,"80":1,"288":2,"296":2}}],["started",{"0":{"0":1},"1":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1},"2":{"0":1}}],["standardized",{"2":{"307":1,"326":1}}],["standardizing",{"2":{"298":1}}],["standards",{"2":{"164":2}}],["standard",{"0":{"164":1},"2":{"5":1,"9":1,"15":1,"24":1,"96":1,"100":1,"112":1,"164":3,"173":1,"176":1,"180":1,"207":1,"214":1,"219":1,"304":1,"307":1,"417":1,"447":1,"473":1}}],["jest",{"2":{"397":1}}],["jump",{"2":{"203":2}}],["justify",{"2":{"365":1}}],["just",{"2":{"48":1}}],["js",{"0":{"375":1,"458":1},"1":{"376":1,"377":1,"378":1,"379":1,"380":1,"381":1,"382":1,"383":1,"384":1,"385":1,"386":1,"387":1,"388":1,"389":1},"2":{"5":1,"6":1,"10":1,"15":1,"375":1,"437":1,"464":3,"473":2}}],["jsonblock",{"0":{"125":1}}],["jsonrpcerror",{"2":{"214":1}}],["jsonrpc",{"2":{"19":1}}],["json",{"0":{"100":1,"206":1,"447":1},"1":{"101":1,"102":1,"103":1,"104":1,"105":1,"207":1,"208":1,"209":1,"210":1,"211":1,"212":1,"213":1,"214":1,"215":1,"216":1,"217":1,"218":1},"2":{"3":1,"9":2,"15":1,"19":1,"24":1,"35":1,"59":1,"81":1,"95":1,"96":1,"100":1,"114":1,"125":2,"173":1,"176":2,"178":1,"180":1,"186":1,"206":1,"207":1,"214":1,"216":1,"276":1,"342":2,"370":1,"389":1,"395":1,"399":1,"408":1,"437":1,"446":1,"447":1}}],["javascript",{"0":{"469":1},"1":{"470":1,"471":1,"472":1,"473":1},"2":{"0":1,"14":1,"25":1,"201":1,"216":1,"437":2,"438":2,"453":1,"464":1,"468":1}}],["md",{"2":{"198":4,"217":4}}],["msghash",{"2":{"159":1}}],["msg",{"2":{"159":3}}],["mtk",{"2":{"155":1,"165":1}}],["myevents",{"2":{"166":1}}],["myfunctions",{"2":{"166":1}}],["myabi",{"2":{"166":3}}],["mycontractabi",{"2":{"418":2}}],["mycontract",{"2":{"166":1,"201":3,"399":1,"449":3}}],["mychaincommon",{"2":{"155":1}}],["mytoken",{"2":{"162":1,"165":1}}],["my",{"2":{"155":3}}],["myjsonrpcprovider",{"2":{"145":1}}],["myprecompile",{"2":{"27":2}}],["muirglacier",{"2":{"151":1}}],["multi",{"2":{"470":1}}],["multicall3",{"2":{"148":1}}],["multiple",{"0":{"33":1,"93":1,"395":1},"2":{"55":1,"265":1,"378":1,"402":1}}],["must",{"2":{"68":1,"136":1}}],["metering",{"2":{"331":1,"440":1}}],["methodnotfound",{"2":{"214":1}}],["method",{"2":{"67":2,"207":1,"214":1,"215":3,"218":3,"399":1,"409":2,"418":1,"447":1,"462":1}}],["methods",{"0":{"118":1,"122":1,"199":1,"208":1,"209":1,"210":1,"237":1,"276":1,"284":1},"1":{"119":1,"120":1,"121":1,"123":1,"124":1,"125":1,"209":1,"210":1,"285":1,"286":1,"287":1,"288":1},"2":{"9":1,"67":1,"96":1,"100":1,"131":2,"157":1,"159":1,"164":1,"173":1,"176":1,"180":2,"207":1,"210":3,"276":1,"408":1}}],["mergeforkidtransition",{"2":{"151":1}}],["merkle",{"2":{"21":1,"258":1,"261":1}}],["megabytes",{"2":{"57":1,"247":2}}],["messages",{"2":{"362":1}}],["messagehash",{"2":{"316":2}}],["message",{"2":{"34":1,"67":1,"76":3,"169":1,"188":3,"189":7,"199":1,"214":1,"231":1,"326":1,"365":1,"388":1}}],["mempool",{"0":{"442":1},"2":{"18":1,"279":1,"329":1,"465":1}}],["memoryviewer",{"2":{"370":1}}],["memory",{"0":{"78":1,"319":1,"368":1},"2":{"4":1,"13":1,"19":2,"48":1,"62":1,"219":1,"221":1,"260":1,"319":1,"362":1,"368":6,"412":1}}],["memoryclient",{"0":{"219":1},"1":{"220":1,"221":1,"222":1,"223":1,"224":1,"225":1,"226":1,"227":1,"228":1,"229":1,"230":1,"231":1,"232":1},"2":{"4":1,"219":3,"224":7,"225":1}}],["missing",{"2":{"260":1}}],["missingaccounterror",{"2":{"113":1}}],["minervalue",{"2":{"355":1}}],["miner",{"2":{"355":1}}],["mineparams",{"2":{"217":1}}],["mines",{"2":{"177":1}}],["mine",{"2":{"70":1,"109":2,"177":1,"217":1,"218":1,"219":1,"224":2,"230":4,"397":1,"416":4,"420":1,"427":1,"446":1,"452":1}}],["minehandler",{"2":{"70":2,"177":1,"217":1,"446":2}}],["minutes",{"2":{"65":1,"78":1,"293":2}}],["minimal",{"2":{"362":1}}],["minimum",{"2":{"64":1,"276":1,"289":2}}],["miningconfig",{"2":{"217":1,"230":3,"397":1,"404":1,"452":1}}],["mining",{"0":{"230":1,"427":1,"452":1},"2":{"8":1,"14":1,"69":1,"217":1,"230":1,"296":1,"404":1,"420":1,"443":1,"465":4,"467":1}}],["min",{"2":{"64":1,"68":1,"289":2}}],["mixhash",{"2":{"119":1,"127":1}}],["mix",{"2":{"4":1}}],["margin",{"2":{"365":1,"366":2,"369":1}}],["market",{"2":{"73":1,"265":1,"271":1,"278":1,"290":1,"297":1}}],["may",{"2":{"307":1}}],["make",{"2":{"228":1}}],["match",{"2":{"136":1}}],["math",{"2":{"119":1}}],["maxfeeperblobgas",{"2":{"272":1}}],["maxfeepergas",{"2":{"61":1,"68":2,"75":1,"170":1,"271":1}}],["maxblocks",{"2":{"131":1,"141":1}}],["max",{"2":{"64":4,"78":1,"170":1,"289":3,"366":1}}],["maxpriorityfeepergas",{"2":{"61":1,"75":1,"271":1}}],["maximum",{"2":{"57":3,"64":2,"247":3,"289":3,"295":1}}],["mapping",{"2":{"292":1}}],["mapdb",{"2":{"236":1}}],["map",{"2":{"26":1,"42":1,"43":1,"190":1,"191":1,"292":3,"319":1,"369":2,"373":1,"388":1}}],["machine",{"0":{"440":1},"2":{"17":1,"195":1,"283":1,"329":1,"343":1,"437":1,"464":1}}],["manipulating",{"2":{"416":1}}],["manipulation",{"0":{"107":1,"227":1},"2":{"13":1,"18":1,"420":1,"455":1}}],["manipulate",{"2":{"416":1}}],["manually",{"2":{"230":1}}],["manualminingclient",{"2":{"230":2}}],["manual",{"2":{"14":1,"72":1,"217":1,"230":2,"452":1,"465":1}}],["manages",{"2":{"60":1,"333":1,"337":1,"441":1,"442":1,"443":1,"444":1}}],["manager",{"0":{"218":1,"233":1,"253":1,"441":1,"444":1},"1":{"234":1,"235":1,"236":1,"237":1,"238":1,"239":1,"240":1,"241":1,"242":1,"243":1,"244":1,"245":1,"246":1,"247":1,"248":1},"2":{"18":1,"34":1,"233":1,"234":1,"236":1,"249":1,"353":1,"444":1}}],["manage",{"2":{"11":1}}],["management",{"0":{"13":1,"51":1,"72":1,"78":1,"82":1,"108":1,"109":1,"110":1,"135":1,"141":1,"157":1,"170":1,"229":1,"255":1,"256":1,"257":1,"259":1,"288":1,"291":1,"353":1,"402":1,"406":1,"419":1,"429":1,"431":1,"434":1,"454":1},"1":{"52":1,"83":1,"84":1,"85":1,"86":1,"87":1,"88":1,"89":1,"90":1,"91":1,"92":1,"93":1,"94":1,"95":1,"136":1,"137":1,"138":1,"292":1,"293":1},"2":{"9":1,"17":2,"18":1,"20":1,"23":1,"34":1,"35":1,"48":1,"60":1,"94":1,"95":1,"99":1,"157":2,"172":1,"177":1,"261":1,"279":1,"329":2,"331":1,"341":1,"347":1,"388":2,"395":1,"402":1,"408":1,"420":1,"437":1,"448":1}}],["managing",{"2":{"8":1,"50":1,"82":1,"129":1,"195":1,"216":1,"233":1,"236":1,"249":1,"252":1,"279":1,"282":1,"342":1,"343":1}}],["many",{"2":{"3":1,"152":1,"219":1,"298":1,"307":1,"438":1}}],["maintains",{"2":{"51":1,"62":1,"292":1,"443":1}}],["main",{"0":{"98":1,"130":1,"147":1,"175":1,"197":1,"235":1,"251":1,"264":1,"281":1,"310":1,"345":1},"1":{"99":1,"100":1,"101":1,"102":1,"103":1,"104":1,"105":1,"106":1,"107":1,"108":1,"109":1,"110":1,"111":1,"131":1,"132":1,"133":1,"148":1,"149":1,"150":1,"151":1,"152":1,"176":1,"177":1,"178":1,"198":1,"199":1,"200":1,"201":1,"236":1,"237":1,"238":1,"239":1,"240":1,"241":1,"242":1,"252":1,"253":1,"265":1,"266":1,"267":1,"282":1,"283":1,"284":1,"285":1,"286":1,"287":1,"288":1,"289":1,"311":1,"312":1,"313":1,"314":1,"315":1,"316":1,"317":1,"318":1,"319":1,"320":1,"346":1,"347":1},"2":{"8":1,"116":1,"131":1,"132":1,"148":1,"149":1,"198":5,"217":4,"236":1,"250":1,"252":1,"282":1,"292":1,"329":1,"366":3,"370":1}}],["mainnet",{"0":{"390":1},"1":{"391":1,"392":1,"393":1,"394":1,"395":1},"2":{"4":2,"10":1,"117":2,"119":2,"120":2,"121":2,"123":2,"124":2,"125":2,"145":2,"149":2,"152":2,"154":3,"156":2,"198":3,"200":2,"212":1,"222":1,"346":1,"360":1,"389":1,"391":2,"393":2,"394":1,"395":1,"403":2,"409":2,"412":2,"451":1,"455":1,"465":1,"466":1}}],["motivations",{"0":{"467":1}}],["mocha",{"2":{"397":1}}],["modern",{"2":{"464":1,"473":1}}],["modes",{"0":{"452":1}}],["model",{"2":{"397":1}}],["modifiedbytecode",{"2":{"409":2}}],["modified",{"2":{"409":1}}],["modifyaccountfields",{"2":{"252":1,"255":1}}],["modifying",{"0":{"93":1},"2":{"94":1,"176":1}}],["modify",{"2":{"87":1,"88":1,"255":1,"353":1,"393":1,"419":1,"454":1,"455":1}}],["modular",{"2":{"328":1}}],["modularity",{"2":{"219":1}}],["modules",{"2":{"465":1}}],["module",{"0":{"330":1,"333":1},"1":{"331":1,"332":1,"334":1},"2":{"50":1,"330":1,"333":1}}],["monospace",{"2":{"365":2,"368":1,"369":1}}],["monorepo",{"2":{"24":1,"35":1,"96":1,"195":1,"198":4,"217":4,"249":1,"262":1,"279":1,"308":1,"342":1,"343":1}}],["monitor",{"2":{"77":1,"78":1,"187":1,"341":1}}],["more",{"2":{"4":2,"152":1,"164":1,"203":1,"212":1,"213":1,"214":1,"215":1,"218":1,"306":1,"396":1,"397":1,"400":1,"402":2,"403":1,"404":1,"406":1,"407":1,"438":1,"465":2}}],["most",{"2":{"3":1,"9":1,"41":1,"219":1,"298":1,"446":2}}],["h1",{"2":{"366":3}}],["historicalbalance",{"2":{"394":1}}],["historical",{"2":{"382":1,"394":1}}],["history",{"0":{"372":1},"2":{"365":5,"372":1,"443":1}}],["higher",{"2":{"62":1,"68":2,"307":1}}],["high",{"0":{"446":1},"2":{"3":1,"6":1,"217":1,"260":1,"341":1}}],["h3",{"2":{"365":8,"372":2,"373":2}}],["humanreadableabi",{"2":{"162":1,"168":1,"449":1}}],["hook",{"2":{"438":1,"465":1}}],["hot",{"2":{"341":1}}],["hotspots",{"2":{"45":2}}],["hour",{"2":{"227":1}}],["homestead",{"2":{"151":1}}],["how",{"2":{"6":1,"54":1,"230":1,"362":1,"375":1,"396":1,"411":1,"452":1}}],["handy",{"0":{"307":1}}],["handling",{"0":{"18":1,"22":1,"32":1,"56":1,"76":1,"113":1,"144":1,"158":1,"169":1,"171":1,"192":1,"203":1,"214":1,"231":1,"277":1,"295":1,"305":1,"326":1,"359":1,"380":1,"385":1},"1":{"381":1,"382":1},"2":{"18":1,"22":2,"34":1,"56":1,"62":1,"76":1,"94":1,"113":1,"115":1,"129":1,"158":1,"178":1,"203":1,"214":2,"215":1,"231":1,"260":1,"326":1,"341":1,"381":1,"388":1}}],["handledobject",{"2":{"292":1}}],["handled",{"2":{"292":2,"293":2}}],["handler",{"2":{"193":3,"388":3}}],["handlers",{"2":{"112":1,"446":1}}],["handles",{"2":{"60":1,"279":1,"330":1,"331":1,"335":1,"339":1,"440":1,"443":1}}],["handle",{"2":{"8":1,"11":1,"34":2,"56":2,"58":3,"76":4,"143":1,"169":2,"193":2,"215":1,"231":1,"260":2,"277":1,"320":1,"341":2,"354":4,"387":1,"388":1}}],["hardhat",{"2":{"219":1,"387":1,"465":1}}],["hardforks",{"2":{"146":1,"151":1}}],["hardfork",{"0":{"151":1},"2":{"52":1,"150":3,"151":1,"154":1,"155":1,"346":1,"347":1}}],["have",{"2":{"168":1,"250":1}}],["hasstateroot",{"2":{"252":1,"257":1}}],["hashing",{"2":{"307":1}}],["hasher",{"2":{"307":1}}],["hashes",{"2":{"80":1,"185":1,"292":1}}],["hash2",{"2":{"69":1}}],["hash1",{"2":{"69":1}}],["hash",{"0":{"123":1},"2":{"51":1,"69":1,"80":1,"85":1,"103":2,"104":2,"123":3,"131":1,"137":1,"185":1,"209":1,"218":1,"224":1,"237":1,"245":2,"276":2,"286":1,"316":2,"333":3,"336":1,"339":1,"372":5,"379":1,"385":2,"409":1,"415":1}}],["has",{"2":{"3":1,"16":1,"67":1,"438":1}}],["https",{"2":{"4":1,"155":1,"198":4,"217":4,"222":1,"391":1,"394":1,"395":2,"403":1,"409":1,"451":1,"466":1}}],["http",{"2":{"4":2,"19":2,"155":1,"222":2,"391":2,"394":1,"395":2,"403":1,"409":2,"451":1,"466":2}}],["hello",{"0":{"466":1},"2":{"312":2}}],["helper",{"2":{"75":1,"406":1,"407":2}}],["helpers",{"0":{"21":1,"407":1},"2":{"307":1,"387":1}}],["helps",{"2":{"36":1}}],["help",{"2":{"0":1}}],["height",{"2":{"131":1,"140":1,"365":1}}],["head",{"2":{"137":1,"141":3}}],["headhash",{"2":{"131":1,"141":1}}],["headerdata",{"0":{"127":1},"2":{"127":1}}],["header",{"0":{"140":1},"2":{"119":1,"131":1,"140":2,"246":1,"333":3}}],["headers",{"2":{"115":1}}],["hex3",{"2":{"312":1}}],["hex2",{"2":{"312":1}}],["hextostring",{"2":{"312":2}}],["hextonumber",{"2":{"312":2}}],["hextobigint",{"2":{"312":1}}],["hextobytes",{"2":{"3":1,"30":2,"51":1,"55":1,"56":2,"256":3,"307":1,"312":2}}],["hexstring",{"2":{"307":1}}],["hex",{"0":{"312":1},"2":{"85":5,"88":3,"131":1,"189":1,"190":1,"192":1,"299":1,"301":2,"307":3,"312":3,"322":3,"368":2,"372":1}}],["here",{"2":{"6":1,"27":1,"54":1}}],["x27",{"2":{"3":14,"4":15,"5":8,"16":2,"25":1,"26":20,"27":17,"30":4,"31":6,"32":6,"33":8,"34":10,"37":2,"39":12,"41":4,"42":4,"45":2,"47":2,"51":14,"54":7,"55":6,"56":8,"58":8,"60":1,"61":10,"67":4,"70":2,"75":6,"76":6,"78":2,"84":6,"86":16,"91":6,"92":6,"93":4,"94":6,"112":22,"113":3,"117":6,"119":28,"120":6,"121":6,"123":6,"124":6,"125":6,"133":2,"136":1,"140":1,"143":2,"145":12,"149":4,"150":6,"151":40,"152":3,"154":10,"155":12,"156":6,"162":14,"163":4,"164":8,"165":8,"166":2,"168":4,"169":4,"170":2,"171":4,"176":2,"177":2,"178":2,"180":2,"181":6,"183":8,"184":18,"187":1,"189":20,"190":10,"191":2,"192":18,"193":10,"195":1,"198":8,"200":4,"201":6,"203":18,"204":2,"207":6,"212":6,"213":6,"215":6,"217":18,"218":14,"219":3,"221":2,"222":8,"224":6,"225":6,"229":8,"230":6,"231":2,"236":2,"245":8,"246":12,"253":4,"255":6,"256":12,"266":2,"267":2,"274":6,"277":2,"282":2,"296":4,"299":2,"301":1,"302":2,"303":2,"304":1,"307":5,"312":18,"313":6,"315":10,"316":4,"317":8,"318":6,"319":2,"320":6,"322":8,"323":2,"324":6,"325":2,"326":4,"330":6,"332":8,"333":2,"338":2,"339":2,"343":1,"346":14,"354":8,"360":12,"365":18,"366":2,"368":6,"369":10,"370":6,"372":22,"373":2,"376":8,"378":14,"379":10,"381":8,"382":6,"384":6,"385":8,"386":14,"387":18,"388":26,"391":8,"392":4,"393":8,"394":2,"395":4,"397":14,"399":6,"400":10,"402":2,"403":6,"404":4,"406":4,"409":14,"410":12,"411":1,"412":8,"414":5,"415":7,"416":11,"418":12,"419":14,"420":2,"422":1,"426":1,"430":1,"438":1,"446":4,"447":6,"449":4,"451":4,"452":8,"453":2,"454":4,"457":2,"458":2,"462":5,"466":6}}],["ci",{"2":{"464":1}}],["center",{"2":{"365":1}}],["cd",{"2":{"363":1}}],["cycle",{"2":{"78":1}}],["cycles",{"2":{"77":1,"470":1}}],["criteria",{"2":{"237":1}}],["cryptographic",{"0":{"316":1},"2":{"159":1}}],["cryptography",{"0":{"159":1}}],["crypto",{"2":{"150":1,"159":1}}],["crucial",{"2":{"60":1}}],["creation",{"0":{"75":1},"2":{"18":1,"189":1,"190":1}}],["creating",{"0":{"132":1,"149":1,"200":1,"253":1,"274":1,"346":1},"1":{"133":1,"150":1},"2":{"8":1,"26":1,"27":1,"37":1,"128":1,"154":1,"160":1,"232":1,"266":1,"355":1}}],["createblock",{"2":{"404":1}}],["createvm",{"2":{"346":2,"360":2}}],["creatememorydb",{"2":{"319":3}}],["creatememoryclient",{"2":{"4":2,"154":2,"221":2,"222":2,"224":1,"230":3,"415":1}}],["createtransaction",{"2":{"217":1,"218":1}}],["createtevmnode",{"2":{"3":3,"5":2,"26":2,"27":2,"33":1,"37":2,"51":2,"61":2,"86":2,"112":2,"189":2,"190":1,"191":1,"207":2,"212":2,"213":2,"217":2,"218":2,"219":1,"365":2,"369":2,"376":2,"387":1,"391":2,"394":1,"395":2,"397":2,"399":1,"400":1,"402":1,"403":1,"404":1,"409":2,"410":2,"412":2,"446":2,"447":1,"451":1,"452":1,"462":2,"466":2}}],["createpublicclient",{"2":{"212":2,"412":2,"457":2}}],["createevm",{"2":{"198":4,"200":3,"204":1,"296":2,"346":2}}],["creategasprofiler",{"2":{"191":2}}],["createdebugtracer",{"2":{"190":2}}],["created",{"2":{"188":1,"302":1}}],["createdaddress",{"2":{"54":1,"58":1,"399":1,"407":1}}],["createstatemanager",{"2":{"198":4,"200":1,"253":2,"255":2,"256":2,"260":1,"346":2}}],["creates",{"2":{"119":1,"120":1,"121":1,"162":1,"299":2,"303":1}}],["createchain",{"2":{"132":1,"145":3,"198":4,"200":1,"346":2}}],["createcommon",{"2":{"117":2,"119":2,"120":2,"121":2,"123":2,"124":2,"125":2,"149":2,"154":3,"155":2,"156":2,"158":1,"346":2,"360":2}}],["createcontractaddress",{"0":{"303":1},"1":{"304":1,"305":1},"2":{"303":2}}],["createcontract",{"0":{"162":1},"1":{"163":1},"2":{"26":2,"27":2,"30":1,"31":1,"32":1,"33":2,"34":2,"162":2,"168":1,"201":2,"449":2}}],["createcalltx",{"2":{"46":1}}],["createimpersonatedtx",{"2":{"26":2,"27":1,"51":2,"54":2,"61":2,"68":2,"75":2,"267":2,"277":1,"392":1,"397":2,"399":1,"407":2}}],["create",{"2":{"4":1,"5":2,"9":1,"26":3,"39":1,"61":1,"112":1,"117":1,"132":1,"145":1,"149":1,"163":1,"165":2,"171":1,"190":1,"191":1,"200":1,"209":2,"221":1,"224":1,"257":1,"266":3,"296":1,"303":1,"304":1,"319":1,"336":1,"350":1,"360":1,"362":1,"363":2,"365":1,"370":1,"376":2,"382":1,"384":1,"385":1,"386":1,"397":2,"399":1,"400":1,"402":1,"409":1,"412":2,"415":1,"446":1,"449":1,"454":1,"462":1,"466":1}}],["createaddress",{"0":{"299":1},"1":{"300":1,"301":1},"2":{"3":1,"26":2,"27":1,"30":1,"34":2,"51":3,"54":2,"61":3,"75":2,"201":2,"255":2,"256":2,"299":4,"300":1,"302":1,"303":1}}],["cursor",{"2":{"365":2}}],["currentstep",{"2":{"365":9}}],["currentvalue",{"2":{"224":1}}],["currently",{"2":{"199":1}}],["current",{"2":{"83":1,"85":1,"99":1,"101":3,"110":1,"176":3,"177":1,"183":1,"189":1,"209":2,"210":1,"221":1,"355":2,"365":1,"420":1}}],["currentbasefee",{"2":{"69":1,"296":1}}],["cumulative",{"2":{"239":1}}],["cumulativeblockgasused",{"2":{"51":1,"52":2,"239":1}}],["customization",{"0":{"371":1},"1":{"372":1,"373":1}}],["customcommon",{"2":{"154":1}}],["customcrypto",{"2":{"150":2,"159":2}}],["customprecompiles",{"2":{"26":1,"27":1,"33":1,"200":1}}],["customprecompile",{"2":{"26":3,"199":2,"201":2}}],["custom",{"0":{"25":1,"155":1,"159":1,"201":1,"453":1},"1":{"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1},"2":{"11":1,"14":1,"17":1,"25":1,"129":1,"150":1,"154":1,"155":1,"159":1,"172":1,"195":1,"199":2,"200":1,"201":1,"212":2,"262":1,"277":1,"343":1,"412":2,"453":1,"457":2,"465":1}}],["click=",{"2":{"365":1,"369":1}}],["clientwithtevm",{"2":{"181":2}}],["clientwitheth",{"2":{"180":2}}],["clients",{"2":{"146":1,"173":1}}],["client",{"0":{"19":1,"211":1},"1":{"212":1,"213":1},"2":{"4":8,"17":1,"19":4,"21":1,"23":2,"96":1,"112":6,"154":1,"165":4,"169":1,"171":1,"180":2,"181":2,"183":3,"184":5,"212":1,"217":1,"221":3,"227":2,"228":2,"229":3,"231":2,"412":2,"414":3,"415":4,"416":6,"418":3,"419":2,"420":3,"457":1}}],["class=",{"2":{"365":13,"368":5,"369":5,"372":2,"373":1}}],["classes",{"2":{"115":1,"298":1}}],["class",{"0":{"80":1,"116":1,"198":1,"282":1,"302":1},"1":{"117":1,"118":1,"119":1,"120":1,"121":1,"122":1,"123":1,"124":1,"125":1,"199":1,"283":1},"2":{"80":1,"116":1,"198":1,"203":1,"236":1,"266":1,"282":1,"355":2,"372":1}}],["close",{"2":{"72":1,"80":1,"288":2}}],["clearcontractstorage",{"2":{"252":1,"256":1}}],["clearcaches",{"2":{"252":1,"259":1,"260":1}}],["clearperformancelogs",{"2":{"38":1,"45":1,"46":1,"48":1}}],["clear",{"2":{"38":1,"45":1,"48":2,"72":1,"256":1,"259":1,"260":2}}],["cleaning",{"2":{"215":1}}],["cleanup",{"2":{"72":2,"77":1,"78":2,"80":1,"288":2,"293":1,"296":1,"388":2}}],["clean",{"2":{"34":1,"193":1,"296":1,"341":1,"365":1,"388":1}}],["choose",{"2":{"465":1}}],["chunks",{"2":{"368":3}}],["chunk",{"2":{"368":2}}],["child",{"2":{"138":1}}],["checking",{"0":{"313":1}}],["checkpoints",{"2":{"260":1,"341":1,"454":1}}],["checkpoint",{"2":{"252":1,"257":3,"260":1,"402":2,"454":1}}],["checks",{"2":{"62":1,"65":1,"307":1}}],["check",{"2":{"34":2,"58":1,"94":1,"257":1,"276":1,"332":1,"341":1,"397":1,"463":1}}],["chai",{"2":{"387":1}}],["chaincontract",{"2":{"148":3}}],["chainblockexplorer",{"2":{"148":2}}],["chainrpcurls",{"2":{"148":2}}],["chainnativecurrency",{"2":{"148":1}}],["chainoptions",{"0":{"133":1},"2":{"132":1,"133":1}}],["chainstart",{"2":{"151":1}}],["chains",{"0":{"152":1},"2":{"117":1,"119":1,"120":1,"121":1,"123":1,"124":1,"125":1,"149":1,"152":1,"154":1,"156":1,"412":1}}],["chainid",{"2":{"101":1,"136":1,"159":2,"176":1,"209":1,"270":1}}],["chain",{"0":{"131":1,"132":1,"139":1,"142":1,"155":1,"425":1,"434":1},"1":{"133":1,"140":1,"141":1},"2":{"21":1,"101":1,"107":1,"129":1,"131":4,"132":1,"133":1,"136":2,"137":3,"138":2,"140":2,"141":3,"142":2,"143":1,"145":7,"146":3,"148":4,"152":1,"154":2,"155":2,"158":1,"176":1,"185":1,"198":2,"209":2,"212":1,"236":1,"329":1,"333":6,"334":3,"346":1,"347":2,"360":1,"412":1,"443":2,"467":2}}],["change",{"2":{"203":2,"278":1,"297":1,"399":1}}],["changes",{"2":{"102":1,"105":1,"215":1,"228":1,"257":1,"260":1,"353":1,"393":1,"402":4}}],["charge",{"2":{"31":1}}],["caches",{"2":{"259":1,"260":2,"444":1}}],["cache",{"0":{"259":1}}],["caching",{"2":{"14":1,"391":1,"441":1}}],["categories",{"0":{"98":1},"1":{"99":1,"100":1,"101":1,"102":1,"103":1,"104":1,"105":1,"106":1,"107":1,"108":1,"109":1,"110":1,"111":1}}],["catch",{"2":{"34":1,"67":1,"76":1,"169":1,"193":1,"215":1,"231":1,"260":2,"277":1,"338":1,"365":1,"369":1,"388":1,"402":1}}],["case",{"2":{"76":3,"169":1,"192":3}}],["cases",{"0":{"44":1,"455":1},"1":{"45":1,"46":1,"47":1},"2":{"6":1,"219":1,"438":1,"445":1,"455":1}}],["capacity",{"2":{"78":1}}],["capabilities",{"2":{"11":1,"178":1,"417":1,"420":1,"438":1,"471":1}}],["capture",{"2":{"54":1}}],["calcbloom",{"2":{"237":1}}],["calculate",{"2":{"34":1,"43":1}}],["calculation",{"0":{"31":1},"2":{"34":1,"244":1}}],["calldata",{"2":{"446":1}}],["caller",{"2":{"330":1}}],["callparams",{"2":{"217":1}}],["callresult",{"2":{"99":1,"112":1,"399":2,"418":1}}],["calltree",{"2":{"42":2}}],["calls++",{"2":{"47":1}}],["calls",{"2":{"9":1,"47":1,"99":3,"215":1,"391":1,"446":1,"447":1}}],["call",{"0":{"42":1},"2":{"3":1,"26":1,"27":1,"28":1,"30":1,"31":1,"32":1,"33":2,"34":2,"39":1,"42":3,"47":1,"95":1,"99":4,"102":2,"111":1,"112":5,"113":1,"176":2,"177":3,"181":1,"183":2,"184":1,"188":2,"189":1,"193":2,"201":2,"209":2,"217":1,"370":1,"388":2,"399":1,"418":2,"423":1,"453":1}}],["callhandler",{"2":{"3":2,"99":1,"112":2,"177":1,"217":1,"446":2}}],["canonical",{"2":{"258":1}}],["cancun",{"2":{"150":1,"151":1,"346":1}}],["cannot",{"2":{"144":1}}],["can",{"0":{"438":1},"2":{"3":1,"4":2,"5":1,"16":1,"25":1,"84":1,"143":1,"180":1,"181":1,"207":1,"217":2,"301":1,"392":1,"410":1,"412":1,"420":1,"437":1,"438":1,"449":1,"464":1,"470":1}}],["covered",{"2":{"438":1}}],["covers",{"2":{"328":1}}],["color",{"2":{"365":3,"366":1,"368":2,"369":1}}],["column",{"2":{"365":2}}],["columns",{"2":{"365":1}}],["collection",{"2":{"308":1}}],["collecting",{"0":{"38":1}}],["collects",{"2":{"39":1}}],["cost",{"2":{"276":1}}],["costs",{"2":{"170":1,"455":1}}],["copy",{"2":{"142":2,"148":1,"259":1}}],["copying",{"0":{"142":1}}],["coinbase",{"2":{"101":2,"107":1,"119":1,"127":1}}],["codes",{"2":{"214":1}}],["codestore",{"2":{"203":1}}],["codesize",{"2":{"189":1}}],["codehash",{"2":{"85":1,"336":1}}],["code",{"0":{"92":1},"2":{"85":1,"86":1,"102":1,"107":1,"176":1,"188":1,"189":1,"201":1,"203":1,"209":1,"210":1,"214":1,"248":1,"249":1,"252":1,"256":3,"306":1,"307":1,"331":1,"335":1,"388":2,"419":1,"441":1,"454":1}}],["correspond",{"2":{"176":1}}],["correct",{"2":{"62":1}}],["core",{"0":{"8":1,"17":1,"63":1,"134":1,"209":1,"254":1,"284":1,"348":1,"439":1},"1":{"64":1,"65":1,"135":1,"136":1,"137":1,"138":1,"139":1,"140":1,"141":1,"142":1,"255":1,"256":1,"257":1,"258":1,"259":1,"285":1,"286":1,"287":1,"288":1,"349":1,"350":1,"351":1,"352":1,"353":1,"440":1,"441":1,"442":1,"443":1,"444":1},"2":{"9":1,"24":1,"131":1,"329":1,"440":1,"459":1,"463":1}}],["counter",{"2":{"189":1}}],["count++",{"2":{"41":1,"191":1,"373":1}}],["count",{"2":{"41":1,"103":2,"191":3,"373":4,"414":1}}],["coming",{"2":{"449":1}}],["combine",{"2":{"416":1}}],["combines",{"2":{"219":1,"308":1}}],["combinedlogs",{"2":{"55":1}}],["com",{"2":{"155":1,"198":4,"217":4}}],["commit",{"2":{"252":1,"257":2,"260":1,"335":1,"353":2,"402":2,"454":1}}],["commands",{"2":{"219":1}}],["communication",{"0":{"19":1}}],["commonoptions",{"0":{"150":1},"2":{"150":1}}],["commonly",{"2":{"9":1,"210":1,"298":1,"446":1}}],["common",{"0":{"146":1,"148":1,"149":1,"273":1,"306":1,"332":1,"455":1},"1":{"147":1,"148":1,"149":1,"150":2,"151":1,"152":1,"153":1,"154":1,"155":1,"156":1,"157":1,"158":1,"159":1,"160":1,"274":1,"275":1,"276":1},"2":{"4":2,"9":1,"21":3,"99":1,"117":2,"119":3,"120":3,"121":3,"123":3,"124":3,"125":3,"128":1,"133":2,"145":6,"146":2,"148":3,"149":3,"154":2,"155":1,"156":4,"158":2,"164":1,"198":6,"200":2,"214":1,"222":2,"239":1,"276":1,"295":1,"308":1,"325":1,"346":5,"347":2,"360":2}}],["compile",{"2":{"449":1}}],["complex",{"0":{"401":1},"1":{"402":1,"403":1,"404":1},"2":{"402":1,"455":1}}],["complexoperation",{"2":{"170":1}}],["complete",{"0":{"421":1},"1":{"422":1,"423":1,"424":1,"425":1,"426":1,"427":1,"428":1,"429":1,"430":1,"431":1,"432":1,"433":1,"434":1,"435":1},"2":{"3":1,"9":1,"13":1,"215":1,"217":1,"420":1,"437":1,"455":1,"464":1}}],["components",{"0":{"197":1,"235":1,"251":1,"264":1,"281":1,"310":1,"345":1,"364":1},"1":{"198":1,"199":1,"200":1,"201":1,"236":1,"237":1,"238":1,"239":1,"240":1,"241":1,"242":1,"252":1,"253":1,"265":1,"266":1,"267":1,"282":1,"283":1,"284":1,"285":1,"286":1,"287":1,"288":1,"289":1,"311":1,"312":1,"313":1,"314":1,"315":1,"316":1,"317":1,"318":1,"319":1,"320":1,"346":1,"347":1,"365":1,"366":1},"2":{"328":1,"439":1}}],["component",{"0":{"368":1,"369":1},"2":{"60":1}}],["compatabile",{"2":{"446":1}}],["compatibility",{"2":{"15":1,"210":1}}],["compatible",{"2":{"13":1,"106":1,"165":1,"206":1,"207":1,"222":1,"438":1,"464":1}}],["compareprofiles",{"2":{"48":1}}],["compare",{"2":{"48":1}}],["compareresults",{"2":{"46":1}}],["compareimplementations",{"2":{"46":1}}],["comparative",{"0":{"46":1},"2":{"48":1}}],["comprehensive",{"2":{"14":1,"17":1,"62":1,"76":1,"96":1,"206":1,"231":1,"308":1}}],["concerns",{"2":{"328":1}}],["concepts",{"0":{"8":1,"63":1},"1":{"64":1,"65":1},"2":{"459":1,"463":1}}],["condition",{"2":{"326":1}}],["conditions",{"2":{"144":1,"326":1}}],["convenience",{"2":{"307":1}}],["convenient",{"2":{"219":1}}],["conversion",{"0":{"312":1,"315":1},"2":{"312":1,"325":1}}],["conversions",{"2":{"307":1}}],["convert",{"2":{"307":1,"312":3,"315":2}}],["converts",{"2":{"125":1}}],["config",{"2":{"465":1}}],["configured",{"2":{"163":1,"412":1}}],["configure",{"2":{"8":2,"37":1,"217":1,"230":1,"452":1}}],["configurations",{"2":{"21":1,"146":1,"152":1}}],["configuration",{"0":{"155":1,"230":1,"289":1},"2":{"4":1,"8":1,"133":3,"146":1,"148":2,"150":2,"154":1,"200":1,"347":1}}],["confirmed",{"2":{"379":1}}],["confirm",{"2":{"215":1}}],["confirmation",{"2":{"215":1,"379":1,"385":1}}],["content",{"2":{"365":1}}],["contents",{"2":{"189":1,"362":1}}],["continue",{"2":{"193":1}}],["controls",{"2":{"365":2}}],["control",{"2":{"13":1,"113":1,"454":1}}],["contractfactory",{"2":{"384":2,"387":1}}],["contractfunctionname",{"2":{"166":2,"324":1}}],["contracttransactionresponse",{"2":{"379":2}}],["contractconstructorargs",{"2":{"324":1}}],["contracteventname",{"2":{"166":2}}],["contractaddr",{"2":{"303":1}}],["contractaddress",{"2":{"54":3,"55":2,"58":2,"92":1,"224":3,"339":1,"399":3,"409":1,"415":1,"446":1,"449":1}}],["contractabi",{"2":{"166":1}}],["contractresult",{"2":{"99":1,"112":1}}],["contractparams",{"2":{"99":1}}],["contracthandler",{"2":{"99":1,"112":2,"177":1}}],["contractgasusage",{"2":{"47":2}}],["contracts",{"0":{"164":1,"224":1,"225":1,"379":1,"393":1,"409":1},"2":{"9":1,"10":1,"17":1,"25":1,"36":1,"47":1,"99":1,"148":1,"161":1,"164":1,"166":1,"172":2,"190":4,"219":1,"347":1,"388":3,"396":1,"449":1,"455":2}}],["contract",{"0":{"20":1,"45":1,"54":1,"92":1,"161":1,"163":1,"166":1,"223":1,"256":1,"324":1,"377":1,"378":1,"384":1,"398":1,"418":1,"423":1,"449":1},"1":{"162":1,"163":1,"164":1,"165":1,"166":1,"167":1,"168":1,"169":1,"170":1,"171":1,"172":1,"224":1,"225":1,"378":1,"379":1,"399":1,"400":1},"2":{"3":1,"9":2,"20":4,"26":4,"27":2,"28":2,"30":2,"31":1,"32":1,"33":2,"34":2,"35":1,"45":1,"47":6,"54":5,"55":1,"58":3,"85":2,"99":7,"102":1,"107":1,"112":4,"148":1,"161":2,"162":5,"163":2,"164":2,"165":5,"166":4,"168":2,"169":3,"170":1,"171":2,"177":3,"184":2,"187":1,"188":1,"189":2,"190":1,"201":1,"209":2,"210":1,"217":1,"224":7,"225":1,"231":1,"249":1,"256":3,"303":1,"331":1,"335":1,"363":1,"370":4,"378":7,"379":3,"381":4,"382":4,"384":5,"387":2,"388":26,"391":1,"393":2,"396":1,"399":14,"400":8,"403":1,"404":4,"407":1,"408":1,"409":2,"415":1,"416":1,"418":3,"419":1,"420":1,"441":1,"446":1,"449":5,"455":1}}],["consumption",{"2":{"331":1}}],["consumed",{"2":{"242":1}}],["consistent",{"2":{"302":1}}],["consistency",{"2":{"94":1}}],["consider",{"2":{"48":1,"170":1}}],["considerations",{"0":{"57":1},"1":{"58":1},"2":{"48":1}}],["console",{"2":{"4":2,"41":1,"42":1,"45":1,"51":1,"56":2,"58":1,"67":1,"78":1,"86":4,"94":1,"171":1,"183":2,"189":4,"190":1,"191":1,"192":4,"193":1,"204":2,"245":4,"246":6,"302":2,"325":1,"332":4,"333":1,"338":1,"340":1,"360":2,"369":1,"378":1,"379":1,"382":1,"384":1,"388":2,"409":1,"410":2,"449":1,"462":1,"466":1}}],["constraints",{"2":{"467":1}}],["constructor",{"0":{"117":1,"283":1},"2":{"80":1,"112":1,"165":1}}],["constantinople",{"2":{"151":1}}],["constants",{"0":{"247":1,"289":1,"325":1},"2":{"21":1,"215":1,"247":1,"325":1}}],["const",{"2":{"3":4,"4":6,"5":4,"26":6,"27":4,"30":5,"31":2,"32":1,"33":3,"34":5,"37":1,"38":2,"41":3,"42":1,"43":2,"45":3,"46":4,"47":3,"48":4,"51":7,"54":5,"55":6,"56":4,"57":3,"58":2,"61":3,"64":1,"68":2,"69":4,"75":1,"78":1,"86":2,"94":3,"112":9,"113":1,"117":1,"119":3,"120":3,"121":3,"123":3,"124":3,"125":3,"137":3,"141":1,"142":2,"145":3,"149":1,"154":2,"155":1,"156":2,"162":5,"163":2,"164":7,"165":3,"168":4,"169":1,"170":1,"171":1,"180":1,"181":1,"183":3,"184":2,"189":2,"190":4,"191":8,"192":1,"193":1,"198":1,"200":1,"201":2,"204":2,"207":2,"212":2,"213":2,"215":3,"217":3,"218":9,"221":2,"222":1,"224":8,"225":2,"228":1,"230":3,"236":1,"244":3,"245":2,"246":1,"253":1,"255":3,"256":7,"257":2,"258":4,"259":1,"260":1,"266":3,"267":1,"274":2,"275":1,"277":1,"282":1,"286":3,"296":2,"302":1,"303":3,"312":6,"316":4,"317":3,"318":2,"319":3,"320":1,"322":3,"330":4,"332":1,"333":3,"334":1,"335":5,"336":1,"337":3,"339":4,"340":1,"346":5,"350":2,"351":1,"352":1,"353":1,"360":5,"365":1,"368":1,"369":3,"370":1,"372":1,"373":4,"376":4,"378":4,"379":5,"381":3,"382":6,"384":4,"385":5,"386":5,"387":7,"388":13,"391":1,"392":2,"393":4,"394":2,"395":2,"397":5,"399":10,"400":5,"402":3,"403":4,"404":3,"406":2,"407":3,"409":6,"410":6,"412":2,"414":3,"415":3,"418":3,"419":1,"420":1,"446":3,"447":2,"448":2,"449":2,"451":1,"452":1,"453":1,"457":1,"458":1,"462":2,"466":2}}],["i++",{"2":{"404":1,"409":1}}],["i",{"2":{"368":7,"404":3,"409":3}}],["ideal",{"2":{"219":1,"304":1}}],["identification",{"2":{"148":1}}],["identify",{"2":{"36":1,"47":1}}],["id",{"2":{"101":1,"107":1,"148":1,"155":1,"176":1,"209":1,"228":1,"400":1}}],["items",{"2":{"365":3,"369":2}}],["item",{"2":{"190":2,"365":4,"369":2}}],["iterate",{"2":{"141":1}}],["iterator",{"0":{"141":1},"2":{"131":2,"141":3}}],["it",{"2":{"60":1,"96":1,"115":1,"146":1,"173":1,"195":1,"198":1,"219":2,"249":1,"262":1,"279":1,"282":1,"301":1,"308":1,"330":1,"333":1,"335":1,"337":1,"343":1,"387":1,"412":1,"437":1,"462":2,"464":1}}],["itself",{"2":{"48":1}}],["its",{"2":{"16":1,"54":1,"138":1,"409":2}}],["iface",{"2":{"386":3}}],["if",{"2":{"27":1,"30":1,"31":1,"32":1,"34":3,"51":1,"54":1,"56":2,"58":3,"67":1,"78":1,"85":2,"86":1,"94":2,"169":1,"190":1,"192":1,"217":1,"218":2,"231":1,"241":2,"245":1,"250":1,"257":1,"260":1,"267":1,"276":1,"277":1,"301":1,"305":1,"306":1,"307":1,"332":1,"365":5,"369":2,"388":3,"412":1}}],["improved",{"2":{"467":1}}],["improvement",{"2":{"48":1,"331":1}}],["implementing",{"2":{"444":1}}],["implements",{"2":{"249":1,"331":1,"441":1}}],["implement",{"2":{"76":1,"77":1}}],["implementations",{"0":{"29":1},"1":{"30":1,"31":1,"32":1,"33":1},"2":{"20":1,"46":2,"150":1,"159":1,"173":1,"331":1}}],["implementation",{"2":{"17":2,"18":1,"19":3,"21":1,"23":1,"24":1,"129":1,"195":1,"262":1,"279":1,"343":1,"437":1}}],["impl",{"2":{"46":2}}],["impersonating",{"2":{"108":1,"210":1,"229":1,"265":1}}],["impersonation",{"0":{"392":1},"2":{"13":1}}],["impersonate",{"2":{"108":1,"210":1,"229":1,"392":1,"403":1}}],["impersonateaccount",{"2":{"108":1,"210":1,"219":1,"229":1}}],["impersonatedtx",{"2":{"265":1,"355":1,"358":1}}],["impersonated",{"0":{"267":1},"2":{"73":1,"262":1,"290":1}}],["impersonatedaddress",{"2":{"26":1,"51":1,"54":2,"61":1,"75":1,"267":1}}],["imported",{"2":{"217":1}}],["important",{"2":{"193":1,"420":1}}],["importing",{"2":{"16":1}}],["import",{"2":{"3":2,"4":2,"5":3,"16":1,"26":6,"27":6,"37":1,"51":4,"61":3,"70":1,"86":2,"91":1,"112":2,"117":3,"119":4,"120":3,"121":3,"123":3,"124":3,"125":3,"145":2,"149":2,"152":2,"154":3,"155":1,"156":3,"162":1,"164":1,"165":1,"166":1,"176":1,"177":1,"178":1,"180":1,"181":1,"189":1,"198":4,"200":1,"201":2,"207":2,"212":3,"213":3,"217":2,"218":2,"221":1,"222":2,"224":2,"225":1,"236":1,"253":1,"255":2,"256":3,"266":1,"267":1,"274":1,"277":1,"282":1,"296":2,"299":1,"302":1,"303":1,"312":1,"313":1,"315":1,"316":1,"317":1,"318":1,"319":1,"320":1,"322":1,"323":1,"324":1,"325":1,"326":1,"346":5,"360":3,"365":3,"366":1,"369":2,"372":1,"376":3,"378":2,"379":1,"384":1,"386":2,"387":3,"388":2,"391":2,"397":3,"399":2,"409":2,"410":2,"412":4,"415":2,"416":2,"418":1,"419":1,"420":1,"446":2,"447":1,"449":3,"457":1,"458":1,"462":1,"466":1}}],["io",{"2":{"4":1,"222":1,"391":1,"394":1,"395":2,"403":1,"409":1,"451":1,"466":1}}],["isrunning",{"2":{"365":5}}],["issues",{"2":{"359":1}}],["issigned",{"2":{"276":1}}],["isaddress",{"2":{"313":2}}],["isbytes",{"2":{"313":2}}],["ishex",{"2":{"313":2}}],["istanbul",{"2":{"151":1}}],["isempty",{"2":{"85":1,"94":1}}],["iscontract",{"2":{"85":1,"86":1}}],["is",{"0":{"437":1,"464":1},"1":{"465":1,"466":1,"467":1,"468":1},"2":{"3":1,"6":1,"60":1,"85":2,"113":2,"128":1,"160":1,"188":3,"200":1,"219":2,"232":1,"260":1,"276":1,"305":1,"328":1,"330":1,"333":1,"335":1,"337":1,"359":2,"420":1,"437":1,"438":1,"439":1,"446":1,"462":1,"464":1}}],["invariant",{"2":{"326":2}}],["invalidtransactionerror",{"2":{"359":1}}],["invalidgaslimiterror",{"2":{"277":2,"359":1}}],["invalidparams",{"2":{"214":1}}],["invalidparamserror",{"2":{"158":1}}],["invalidrequest",{"2":{"214":1}}],["invalidblockerror",{"2":{"144":1,"359":1}}],["invalidaddresserror",{"2":{"301":1,"305":1,"306":1}}],["invalidaddress",{"2":{"56":2}}],["invalid",{"2":{"56":2,"158":1,"192":2,"203":4,"214":2,"277":1,"295":1,"305":1,"338":1,"359":1}}],["infura",{"2":{"391":1,"394":1,"403":1,"409":1,"451":1}}],["inference",{"2":{"168":1}}],["information",{"2":{"148":1,"164":1,"212":1,"213":1,"217":1,"218":1,"397":1,"400":1,"402":1,"403":1,"404":1,"406":1,"407":1}}],["info",{"2":{"145":1,"164":1,"253":1,"440":1,"441":1,"442":1,"443":1,"444":1}}],["initialization",{"2":{"388":1}}],["initializes",{"2":{"165":1}}],["initialize",{"2":{"61":1,"112":1,"319":1}}],["initialsupply",{"2":{"387":1}}],["initialdata",{"2":{"319":2}}],["initial",{"2":{"92":1,"110":1,"224":1,"347":1,"387":1}}],["increasetime",{"2":{"227":1}}],["increase",{"2":{"68":1,"227":1}}],["includetxtype",{"2":{"237":1}}],["include",{"2":{"158":1,"409":1}}],["included",{"2":{"60":1,"70":1,"242":1,"287":1}}],["includeprecompiles",{"2":{"37":1}}],["includeopcodes",{"2":{"37":1}}],["includes",{"2":{"36":1,"56":1,"57":1,"67":1,"76":3,"96":1,"113":1,"115":1,"157":1,"163":1,"164":1,"169":1,"173":1,"185":1,"204":1,"219":1,"231":2,"247":1,"262":1,"277":1}}],["including",{"2":{"3":1,"62":1,"233":1,"239":1,"249":1,"446":1}}],["inspect",{"2":{"467":1}}],["instead",{"2":{"113":1}}],["instantiation",{"2":{"274":1}}],["instanceof",{"2":{"260":1,"277":1}}],["instance",{"0":{"122":1,"149":1,"200":1,"346":1},"1":{"123":1,"124":1,"125":1,"150":1},"2":{"132":1,"148":1,"149":1,"162":1,"163":1,"200":1,"224":1,"283":1,"347":2,"360":1,"397":1,"399":1,"451":1,"462":1}}],["instances",{"2":{"8":1,"388":1}}],["installing",{"2":{"16":1}}],["installed",{"2":{"16":1,"250":1}}],["install",{"0":{"461":1},"2":{"1":1,"16":1,"97":1,"174":1,"196":1,"220":1,"234":1,"250":1,"263":1,"280":1,"309":1,"344":1,"363":2,"461":1}}],["installation",{"0":{"1":1,"97":1,"174":1,"196":1,"220":1,"234":1,"250":1,"263":1,"280":1,"309":1,"344":1,"460":1},"1":{"461":1,"462":1,"463":1},"2":{"6":1,"459":1,"468":1}}],["insufficientfundserror",{"2":{"359":1}}],["insufficient",{"2":{"67":2,"76":1,"169":1,"231":2,"295":1,"359":1}}],["indices",{"2":{"246":1}}],["individually",{"2":{"16":1}}],["independence",{"2":{"467":1}}],["independent",{"2":{"142":1,"259":1}}],["indexed",{"2":{"162":2,"381":2,"382":2,"386":2,"388":2}}],["index",{"2":{"51":1,"104":2,"245":2,"409":1}}],["inputs",{"2":{"341":1}}],["input",{"2":{"26":2,"27":1,"28":1,"32":1,"34":3,"299":2,"301":2,"306":1,"453":1}}],["introspection",{"2":{"472":1}}],["introduces",{"2":{"262":1}}],["into",{"2":{"11":1,"306":1,"328":1,"438":1,"465":1}}],["integrates",{"2":{"473":1}}],["integration",{"0":{"10":1,"211":1,"456":1},"1":{"212":1,"213":1,"457":1,"458":1},"2":{"10":2,"206":1,"375":1,"411":1,"455":1}}],["intensive",{"2":{"47":1}}],["intermediatestate",{"2":{"402":2}}],["intermediate",{"2":{"402":1}}],["intermediary",{"2":{"240":1}}],["intervalminingclient",{"2":{"230":1}}],["interval",{"2":{"230":3,"404":2,"452":1,"465":1}}],["interpreterstep",{"2":{"188":1,"365":3}}],["internally",{"2":{"306":1,"307":1}}],["internalerror",{"2":{"144":1,"214":1}}],["internal",{"2":{"9":1,"144":1,"203":2,"214":1,"328":1,"462":1}}],["interfaces",{"2":{"23":1,"157":1,"198":1,"473":1}}],["interface",{"0":{"28":1,"131":1,"386":1,"447":1},"2":{"8":1,"9":1,"28":3,"39":3,"52":3,"127":1,"131":1,"146":1,"157":1,"159":2,"176":1,"177":1,"178":1,"206":1,"207":1,"214":1,"239":1,"240":1,"241":1,"242":1,"249":1,"252":2,"269":1,"270":1,"271":1,"272":1,"283":1,"292":1,"347":1,"355":1,"357":1,"358":1,"362":1,"386":3,"400":2}}],["interacttx",{"2":{"54":2}}],["interactions",{"0":{"223":1,"418":1,"423":1},"1":{"224":1,"225":1},"2":{"99":1,"161":1,"403":1,"416":1,"420":1,"449":1,"455":1}}],["interaction",{"0":{"377":1,"399":1},"1":{"378":1,"379":1},"2":{"20":1,"177":1,"370":1,"399":1}}],["interacting",{"0":{"225":1},"2":{"17":1,"96":1,"129":1,"131":1,"176":1,"393":1}}],["interact",{"2":{"3":2,"9":1,"26":1,"54":1,"399":1}}],["in",{"0":{"469":1},"1":{"470":1,"471":1,"472":1,"473":1},"2":{"0":1,"6":1,"14":1,"19":1,"25":2,"36":1,"48":1,"51":1,"57":1,"58":1,"60":1,"85":1,"88":1,"96":1,"113":1,"163":1,"170":1,"195":1,"203":1,"210":1,"215":1,"219":2,"239":1,"242":1,"247":1,"248":1,"249":1,"262":1,"279":1,"287":1,"292":1,"293":1,"304":1,"307":1,"308":1,"319":1,"331":1,"341":1,"343":1,"355":1,"412":1,"415":1,"437":1,"438":2,"446":1,"449":1,"464":4,"465":2,"467":1,"468":1}}],["dry",{"2":{"470":1}}],["droptransaction",{"2":{"109":1}}],["during",{"2":{"331":1,"354":1}}],["dumping",{"0":{"258":1}}],["dumpcanonicalgenesis",{"2":{"252":1,"258":1,"335":1}}],["dumpstoragerange",{"2":{"252":1,"258":1}}],["dumpstorage",{"2":{"252":1,"258":1,"369":1}}],["dumpstate",{"2":{"110":1,"177":1,"184":1,"210":1,"429":1}}],["dumpstatehandler",{"2":{"99":1,"177":1}}],["dumps",{"2":{"177":1}}],["dumped",{"2":{"99":1,"177":1}}],["dump",{"2":{"99":1,"110":1,"184":1,"210":1,"258":3,"369":2}}],["db2",{"2":{"319":1}}],["db",{"2":{"319":1}}],["dapp",{"2":{"455":1}}],["dai",{"2":{"225":3}}],["dao",{"2":{"151":1}}],["date",{"2":{"119":1,"404":1}}],["database",{"0":{"319":1},"2":{"237":1,"319":1}}],["datasets",{"2":{"48":1}}],["data",{"0":{"38":1,"292":1,"311":1},"1":{"312":1,"313":1},"2":{"3":1,"21":1,"26":3,"27":3,"28":1,"30":3,"31":2,"32":2,"34":7,"39":2,"51":1,"54":2,"64":1,"112":2,"115":1,"119":1,"120":1,"181":1,"183":1,"188":4,"189":3,"190":2,"214":1,"217":1,"246":1,"265":1,"266":4,"267":2,"269":1,"272":1,"274":2,"276":1,"289":2,"292":1,"307":1,"308":1,"316":1,"317":4,"319":1,"320":2,"330":1,"332":2,"340":2,"354":2,"365":2,"370":2,"372":5,"385":1,"386":4,"391":1,"399":1,"407":1,"410":2,"418":1,"446":1,"466":1}}],["do",{"0":{"438":1},"2":{"412":1,"438":1,"470":1}}],["doesn",{"2":{"113":1}}],["done",{"2":{"38":1,"296":1,"381":1,"446":1}}],["doubles",{"2":{"26":1}}],["double",{"2":{"26":1}}],["docs",{"2":{"4":1,"24":1,"96":1,"195":1,"198":4,"217":4,"249":1,"262":1,"279":1,"308":1,"343":1,"440":1,"441":1,"442":1,"443":1,"444":1,"449":1}}],["documentation",{"0":{"16":1},"1":{"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1},"2":{"0":1,"16":1,"24":1,"96":2,"114":2,"172":1,"186":2,"195":2,"205":3,"212":1,"213":1,"214":1,"215":2,"216":1,"217":1,"218":1,"232":1,"249":2,"261":1,"262":2,"279":2,"297":1,"308":2,"327":2,"343":2,"361":3}}],["div",{"2":{"365":34,"368":4,"369":6,"372":10,"373":2}}],["dive",{"2":{"11":1,"24":1}}],["disk",{"2":{"420":1}}],["display",{"2":{"365":3,"368":1,"369":1}}],["distinct",{"2":{"328":1}}],["disabled",{"2":{"365":1}}],["disabled=",{"2":{"365":1,"369":1}}],["disable",{"2":{"48":1,"200":1}}],["differs",{"2":{"218":1}}],["different",{"2":{"52":1,"67":1,"359":1,"395":1,"445":1}}],["difficulty",{"2":{"119":1,"127":1}}],["dictionary",{"2":{"119":1}}],["direction",{"2":{"365":1,"449":1}}],["directly",{"2":{"3":1,"87":1,"152":1,"438":1}}],["direct",{"0":{"448":1},"2":{"3":1,"274":1,"330":1,"341":1,"420":1,"454":1}}],["deterministic",{"2":{"472":1}}],["details",{"2":{"209":1,"214":1,"333":1}}],["detailed",{"0":{"66":1},"1":{"67":1,"68":1,"69":1,"70":1},"2":{"214":1,"215":1,"217":1}}],["deno",{"2":{"464":1}}],["demonstrates",{"2":{"362":1,"375":1,"396":1,"411":1}}],["describe",{"2":{"387":1}}],["descriptive",{"2":{"306":1}}],["design",{"2":{"15":1}}],["dev",{"2":{"219":1,"304":1,"370":1,"470":1}}],["development",{"0":{"22":1,"106":1},"1":{"107":1,"108":1,"109":1,"110":1},"2":{"24":1,"106":1,"166":1,"210":1,"370":1,"375":1,"411":1,"455":1}}],["developer",{"0":{"15":1},"2":{"4":1}}],["deal",{"2":{"177":1,"184":2}}],["deals",{"2":{"177":1}}],["declare",{"2":{"300":1}}],["decimals",{"2":{"155":1,"184":1,"378":4}}],["decodedlog",{"2":{"386":1}}],["decoded",{"2":{"318":1}}],["decode",{"2":{"317":1,"318":1,"386":1}}],["decodeeventlog",{"2":{"317":1}}],["decodefunctiondata",{"2":{"317":2}}],["decodeabiparameters",{"2":{"317":1}}],["decoding",{"0":{"317":1,"318":1,"386":1},"2":{"21":1,"308":1}}],["decorator",{"2":{"180":1,"181":1}}],["decorators",{"0":{"173":1,"179":1},"1":{"174":1,"175":1,"176":1,"177":1,"178":1,"179":1,"180":2,"181":2,"182":1,"183":1,"184":1,"185":1,"186":1},"2":{"5":1,"21":2,"173":2,"174":1,"176":1,"177":1,"178":1,"180":1,"181":1,"207":1,"212":1,"213":1,"376":1,"412":1,"447":1}}],["delegatecall",{"2":{"189":2}}],["delete",{"2":{"255":1,"333":1,"336":1}}],["deletereceipts",{"2":{"237":1}}],["deleteaccount",{"2":{"157":1,"252":1,"255":1,"336":1}}],["deletes",{"2":{"138":1,"237":1}}],["deleting",{"0":{"138":1}}],["delblock",{"2":{"131":1,"138":1,"333":1}}],["defi",{"2":{"403":1}}],["defined",{"2":{"203":1}}],["definecall",{"2":{"201":2}}],["defineprecompile",{"2":{"26":2,"27":2,"30":1,"31":1,"32":1,"33":2,"34":2,"201":2,"453":1}}],["definitions",{"2":{"23":1,"215":1}}],["default",{"2":{"76":1,"94":1,"148":2,"150":3,"155":1,"192":1,"217":1}}],["dependent",{"2":{"404":1}}],["dependencies",{"2":{"363":1,"465":1}}],["deploytimelock",{"2":{"404":1}}],["deploytokenfixture",{"2":{"387":2}}],["deploytx",{"2":{"45":1,"54":2,"399":2}}],["deploycontract",{"2":{"224":1,"400":1,"407":1,"415":1}}],["deploys",{"2":{"165":1,"177":1}}],["deployless",{"0":{"165":1}}],["deployparams",{"2":{"99":1}}],["deployhandler",{"2":{"99":1,"112":2,"177":1}}],["deploying",{"0":{"92":1,"224":1},"2":{"165":1}}],["deployresult",{"2":{"54":2,"58":1,"99":1,"112":1,"418":1}}],["deployment",{"0":{"54":1,"384":1,"399":1},"2":{"54":1,"58":3,"99":3,"161":1,"224":1,"370":1,"399":2,"420":1}}],["deploy",{"2":{"45":1,"54":2,"99":2,"112":3,"177":1,"219":1,"224":2,"384":2,"387":2,"399":2,"400":1,"404":1,"407":1,"409":1,"415":1,"418":1}}],["deployedbytecode",{"2":{"85":1,"86":1,"88":1,"92":1,"184":1,"217":1,"409":1}}],["deployed",{"2":{"20":1,"85":1,"88":1,"189":1,"384":1}}],["depth",{"2":{"42":1,"189":3,"365":2}}],["deepcopy",{"2":{"131":1,"142":2,"252":1,"259":2}}],["deep",{"2":{"24":1,"142":1,"259":1}}],["deeper",{"2":{"11":1}}],["debugger",{"0":{"362":1},"1":{"363":1,"364":1,"365":1,"366":1,"367":1,"368":1,"369":1,"370":1,"371":1,"372":1,"373":1,"374":1},"2":{"362":2,"363":2,"365":2,"366":1,"370":2}}],["debugging",{"0":{"190":1,"204":1,"472":1},"2":{"14":1,"111":1,"204":1,"416":2,"417":1,"467":1}}],["debug",{"0":{"111":1},"2":{"9":1,"111":2,"154":1,"187":1,"190":1,"204":1,"210":3,"391":1,"438":1,"455":1}}],["affect",{"2":{"393":1}}],["aftertx",{"2":{"354":1}}],["afterblock",{"2":{"354":1}}],["aftermessage",{"2":{"188":1,"189":1,"190":1,"192":1,"365":1,"372":1}}],["afterlogs",{"2":{"48":2}}],["after",{"2":{"48":1,"65":1,"188":1,"341":1,"354":2}}],["auto",{"2":{"217":1,"230":2,"365":1,"366":1,"397":1,"452":1,"465":1}}],["autominingclient",{"2":{"230":1}}],["automine",{"2":{"109":2}}],["automatically",{"2":{"217":1,"397":1,"449":1}}],["automatic",{"2":{"14":1,"62":1}}],["available",{"0":{"188":1,"445":1},"1":{"446":1,"447":1,"448":1,"449":1},"2":{"101":1,"217":1,"413":1,"415":1,"416":1}}],["avoid",{"2":{"94":1}}],["amount",{"2":{"94":1,"162":1,"184":1,"231":1,"317":1,"379":1,"381":4,"386":1,"387":1,"388":4,"410":2,"449":1}}],["amp",{"0":{"13":1,"14":1,"18":1,"19":1,"21":1,"22":1,"23":1,"36":1,"50":1,"101":1,"105":1,"106":1,"298":1,"301":1,"328":1,"399":1,"424":1,"425":1,"427":1,"428":1,"435":1,"460":1,"470":1,"472":1,"473":1},"1":{"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":1,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"107":1,"108":1,"109":1,"110":1,"299":1,"300":1,"301":1,"302":1,"303":1,"304":1,"305":1,"306":1,"307":1,"329":1,"330":1,"331":1,"332":1,"333":1,"334":1,"335":1,"336":1,"337":1,"338":1,"339":1,"340":1,"341":1,"342":1,"461":1,"462":1,"463":1},"2":{"6":1,"8":1,"9":3,"11":1,"15":1,"49":1,"59":1,"81":2,"150":1,"172":1,"209":3,"216":1,"342":1,"368":2,"459":1,"464":1,"467":1,"468":1}}],["again",{"2":{"404":1}}],["against",{"2":{"34":1,"99":1,"140":1,"177":1,"438":1}}],["age",{"2":{"77":1}}],["applications",{"2":{"396":1,"467":1}}],["applied",{"2":{"217":1}}],["app",{"0":{"366":1},"2":{"370":1}}],["approvetx",{"2":{"410":2}}],["approve",{"2":{"410":2}}],["approval",{"0":{"410":1}}],["approach",{"2":{"219":1}}],["approaching",{"2":{"78":1}}],["appropriate",{"2":{"215":1,"341":1}}],["appropriately",{"2":{"58":1,"169":1}}],["apis",{"0":{"9":1,"175":1,"445":1},"1":{"176":1,"177":1,"178":1,"446":1,"447":1,"448":1,"449":1},"2":{"3":1,"9":1,"173":1,"328":1,"341":1,"445":1}}],["api",{"0":{"3":1,"79":1},"1":{"80":1},"2":{"3":4,"4":3,"5":1,"8":1,"9":2,"16":1,"24":2,"95":1,"96":2,"176":1,"177":1,"186":1,"195":2,"215":1,"216":2,"217":1,"249":2,"262":2,"279":2,"308":2,"343":2,"408":1,"440":1,"441":1,"442":1,"443":1,"444":1,"459":1}}],["ascii",{"2":{"368":2}}],["assert",{"2":{"326":1,"397":1}}],["assets",{"0":{"435":1},"2":{"185":1}}],["associated",{"2":{"51":1}}],["as",{"2":{"68":2,"162":2,"168":2,"267":1,"306":1,"365":3,"368":3,"369":1,"372":1,"373":1,"379":1,"392":1,"412":1,"413":1,"438":1,"446":1}}],["asynceventemitter",{"2":{"131":1,"320":2}}],["async",{"2":{"26":1,"27":1,"30":1,"31":1,"32":1,"33":2,"34":2,"46":1,"80":3,"132":1,"201":1,"218":1,"320":1,"355":2,"365":2,"369":1,"387":2,"397":1,"399":1,"400":1,"402":1,"403":1,"404":1,"406":1,"407":2,"453":1}}],["arb1",{"2":{"395":1}}],["arbitrary",{"2":{"201":1}}],["arbitrumnode",{"2":{"395":1}}],["arbitrum",{"2":{"152":2,"395":1}}],["around",{"2":{"302":1}}],["arrowglacier",{"2":{"151":1}}],["array",{"2":{"26":1,"121":2,"190":1,"299":1,"325":1,"368":3}}],["arg",{"2":{"112":1}}],["args",{"2":{"112":2,"165":2,"171":3,"184":1,"201":2,"317":2,"382":1,"388":1,"407":2,"410":2,"418":1}}],["are",{"2":{"65":2,"70":1,"158":1,"214":1,"230":1,"298":1,"307":1,"329":1,"334":1,"413":1,"415":1,"416":2,"422":1,"426":1,"430":1,"438":2,"446":1,"452":1}}],["architecture",{"0":{"436":1,"439":1},"1":{"437":1,"438":1,"439":1,"440":2,"441":2,"442":2,"443":2,"444":2,"445":1,"446":1,"447":1,"448":1,"449":1,"450":1,"451":1,"452":1,"453":1,"454":1,"455":1,"456":1,"457":1,"458":1,"459":1},"2":{"6":1,"9":1,"328":1}}],["abiconstructor",{"2":{"323":1}}],["abievent",{"2":{"323":1}}],["abifunction",{"2":{"323":1}}],["abi",{"0":{"317":1,"323":1},"2":{"26":1,"27":1,"30":1,"31":1,"32":1,"33":2,"34":2,"112":2,"168":2,"184":1,"201":2,"317":3,"323":3,"324":4,"327":1,"378":2,"379":2,"381":2,"382":2,"384":2,"386":2,"387":2,"388":8,"393":1,"399":2,"403":1,"410":2,"415":1,"418":2,"449":2}}],["abistring",{"2":{"323":1}}],["abis",{"2":{"26":1,"168":1,"307":1}}],["atomic",{"2":{"260":1,"341":1}}],["at",{"0":{"394":1},"2":{"25":1,"68":2,"102":1,"107":1,"176":2,"187":1,"199":1}}],["align",{"2":{"365":1}}],["always",{"2":{"34":1,"58":1,"75":1,"168":1,"193":1,"215":1,"260":1}}],["allow",{"2":{"201":1}}],["allowedblobs",{"2":{"69":1,"286":1}}],["allowed",{"2":{"32":1,"34":1,"365":1}}],["allows",{"2":{"25":1,"83":1,"87":1,"187":1,"206":1,"267":1}}],["all",{"2":{"16":1,"51":1,"72":1,"73":1,"113":1,"138":1,"163":1,"164":1,"209":1,"215":1,"217":1,"219":2,"239":1,"259":1,"276":1,"378":1,"409":1,"412":1,"413":1,"415":1,"416":1,"422":1,"426":1,"430":1}}],["also",{"0":{"114":1,"128":1,"160":1,"186":1,"205":1,"232":1,"248":1,"278":1,"297":1,"327":1,"361":1},"2":{"3":1,"5":1,"157":1,"210":1}}],["another",{"2":{"451":1}}],["anvildealhandler",{"2":{"177":1}}],["anvil",{"0":{"106":1},"1":{"107":1,"108":1,"109":1,"110":1},"2":{"106":1,"107":6,"108":2,"109":3,"110":3,"114":1,"210":7,"438":1,"465":1,"467":1}}],["an",{"0":{"200":1},"2":{"51":1,"83":1,"108":1,"113":1,"121":1,"163":1,"177":1,"183":1,"199":1,"206":1,"207":1,"225":1,"299":1,"303":1,"319":1,"351":1,"391":1,"415":1,"420":1,"437":1,"438":3,"462":2,"464":1}}],["analysis",{"0":{"41":1,"42":1,"46":1},"2":{"48":1}}],["analyzing",{"0":{"40":1},"1":{"41":1,"42":1,"43":1}}],["analyzeperformance",{"2":{"46":1}}],["analyzelogs",{"2":{"45":1}}],["analyze",{"2":{"36":1,"42":1,"45":1,"48":2}}],["anything",{"2":{"438":1}}],["any",{"2":{"13":1,"85":1,"89":1,"165":2,"222":1,"267":1,"381":1,"391":1,"437":1,"451":1,"464":1}}],["and",{"0":{"54":1,"204":1,"244":1,"258":1,"311":1,"312":1},"1":{"312":1,"313":1},"2":{"0":1,"6":3,"8":2,"9":5,"11":1,"13":1,"16":1,"17":3,"18":2,"21":2,"22":1,"23":3,"27":1,"34":1,"36":1,"42":1,"45":1,"48":1,"50":2,"51":2,"54":1,"55":1,"58":1,"60":1,"61":2,"62":1,"65":2,"68":1,"77":1,"82":1,"96":1,"104":2,"106":1,"115":2,"129":1,"138":1,"146":3,"161":1,"162":1,"165":1,"173":2,"176":1,"177":1,"184":1,"185":1,"187":1,"195":1,"199":1,"203":1,"204":1,"206":1,"214":2,"215":2,"218":1,"233":2,"236":1,"246":1,"249":2,"256":2,"262":1,"279":1,"282":1,"286":1,"298":2,"307":1,"308":3,"325":1,"328":1,"329":3,"330":1,"331":1,"333":1,"335":1,"339":1,"343":1,"350":1,"354":1,"360":2,"362":1,"363":1,"396":1,"397":1,"399":2,"400":2,"404":1,"407":1,"409":1,"413":1,"416":1,"417":1,"420":2,"437":1,"438":3,"440":1,"441":2,"443":1,"444":1,"465":2,"473":1}}],["advance",{"2":{"404":1}}],["advanced",{"0":{"11":1,"71":1,"367":1,"383":1,"470":1},"1":{"72":1,"73":1,"368":1,"369":1,"384":1,"385":1,"386":1},"2":{"11":1,"218":1,"219":1,"342":1,"420":1,"464":1,"467":1}}],["addchain",{"2":{"434":1}}],["addcustomprecompile",{"2":{"199":1,"201":1}}],["addtransaction",{"2":{"350":1,"355":1,"360":1}}],["addtwo",{"2":{"201":2}}],["addr",{"2":{"299":3}}],["addresslogs",{"2":{"55":1}}],["addresses",{"0":{"298":1},"1":{"299":1,"300":1,"301":1,"302":1,"303":1,"304":1,"305":1,"306":1,"307":1},"2":{"9":2,"25":1,"172":1,"237":1,"292":1,"304":1}}],["address",{"0":{"163":1,"302":1},"2":{"3":2,"4":2,"23":2,"26":3,"27":2,"30":2,"31":1,"32":1,"33":2,"34":2,"39":1,"55":2,"56":1,"58":1,"61":1,"75":1,"80":2,"84":3,"85":3,"86":1,"88":3,"91":1,"92":1,"93":1,"94":4,"101":1,"107":1,"127":1,"157":14,"162":4,"163":3,"176":3,"177":2,"183":2,"184":1,"188":2,"189":2,"190":1,"199":3,"201":1,"217":2,"225":1,"229":3,"246":4,"252":25,"255":6,"256":7,"258":4,"260":1,"267":2,"269":1,"286":2,"299":3,"300":2,"301":1,"302":4,"303":4,"305":1,"306":1,"316":2,"317":1,"322":3,"332":2,"335":6,"336":2,"339":1,"340":2,"353":2,"369":4,"370":1,"378":1,"379":1,"381":3,"382":2,"386":3,"387":3,"388":12,"392":1,"393":2,"394":1,"400":4,"403":1,"406":2,"409":1,"414":2,"416":2,"419":2,"446":1,"447":1,"448":1,"449":1,"453":1,"454":1}}],["addethereumchainparameter",{"2":{"185":1}}],["added",{"2":{"70":1}}],["adds",{"2":{"136":1,"199":1,"249":1,"308":1}}],["adding",{"0":{"67":1,"136":1,"285":1,"372":1,"373":1},"2":{"67":1,"185":1,"282":1,"294":1,"338":1}}],["addition",{"2":{"65":1}}],["additional",{"0":{"24":1},"2":{"39":1,"157":1,"173":1,"185":1,"210":1,"307":1,"417":1}}],["addunverified",{"2":{"61":1,"65":1,"67":1,"68":2,"77":1,"80":1,"285":1}}],["add",{"2":{"61":1,"65":1,"67":1,"76":1,"80":1,"145":1,"163":1,"190":1,"201":1,"285":3,"296":2,"320":1,"333":1,"337":2,"338":1,"350":1,"355":1,"360":1,"461":3}}],["awaited",{"2":{"365":1}}],["await",{"2":{"3":6,"4":5,"5":2,"26":2,"30":2,"38":2,"45":3,"46":2,"48":3,"51":4,"54":3,"55":5,"56":2,"61":2,"67":2,"68":2,"69":2,"70":1,"76":1,"86":1,"91":1,"92":1,"93":1,"94":4,"112":4,"113":1,"136":1,"137":3,"138":1,"140":1,"141":3,"142":1,"145":4,"165":2,"169":1,"180":1,"181":1,"183":3,"184":5,"189":1,"190":1,"191":1,"198":2,"200":2,"204":1,"207":1,"215":3,"217":4,"218":10,"221":1,"224":6,"225":1,"227":2,"228":2,"229":3,"230":1,"231":1,"244":4,"245":1,"246":1,"255":4,"256":5,"257":6,"258":4,"259":1,"260":6,"266":1,"285":2,"286":2,"296":3,"320":1,"330":4,"333":5,"334":2,"335":10,"336":2,"337":5,"338":2,"339":4,"346":2,"350":4,"351":1,"352":1,"353":3,"360":5,"365":2,"369":2,"370":2,"376":2,"378":1,"379":3,"382":1,"384":4,"385":4,"387":7,"388":4,"391":1,"392":2,"393":3,"394":1,"397":4,"399":7,"400":6,"402":8,"403":3,"404":8,"406":1,"407":1,"409":5,"410":3,"414":3,"415":2,"416":6,"418":3,"419":2,"420":3,"446":3,"447":1,"448":3,"454":3,"462":2,"466":2}}],["a",{"0":{"132":1,"149":1,"253":1,"346":1,"362":1},"1":{"133":1,"150":1,"363":1,"364":1,"365":1,"366":1,"367":1,"368":1,"369":1,"370":1,"371":1,"372":1,"373":1,"374":1},"2":{"3":1,"4":2,"8":1,"26":2,"27":2,"36":1,"41":2,"47":2,"51":1,"54":1,"60":1,"61":1,"68":2,"85":1,"96":1,"99":2,"111":2,"112":3,"113":1,"117":1,"119":1,"120":1,"121":1,"125":1,"128":1,"129":1,"132":1,"136":1,"138":1,"140":1,"144":2,"145":2,"146":1,"149":1,"154":2,"160":1,"162":1,"163":1,"165":2,"173":1,"176":4,"177":6,"180":2,"181":2,"183":1,"185":1,"187":1,"188":3,"190":1,"191":1,"195":1,"199":2,"200":1,"217":2,"219":1,"221":1,"232":1,"237":2,"242":1,"244":2,"262":1,"266":1,"267":1,"279":1,"285":1,"287":1,"296":1,"298":1,"299":4,"301":1,"302":6,"303":1,"306":4,"307":2,"308":1,"328":1,"343":1,"350":1,"352":1,"355":2,"357":1,"358":1,"360":1,"362":1,"363":1,"392":1,"394":1,"397":2,"403":1,"409":1,"418":2,"437":2,"438":1,"446":1,"449":2,"455":1,"464":1,"465":1,"466":1,"467":1,"470":1}}],["across",{"2":{"473":1}}],["activateprecompiles",{"2":{"347":1}}],["activated",{"2":{"199":1}}],["action",{"0":{"421":1},"1":{"422":1,"423":1,"424":1,"425":1,"426":1,"427":1,"428":1,"429":1,"430":1,"431":1,"432":1,"433":1,"434":1,"435":1},"2":{"83":1,"87":1,"420":1,"449":1}}],["actions",{"0":{"96":1,"99":1,"100":1,"106":1,"111":1,"217":1,"226":1,"414":1,"415":1,"416":1,"417":1,"420":1,"422":1,"426":1,"430":1,"446":1},"1":{"97":1,"98":1,"99":1,"100":1,"101":2,"102":2,"103":2,"104":2,"105":2,"106":1,"107":2,"108":2,"109":2,"110":2,"111":1,"112":1,"113":1,"114":1,"227":1,"228":1,"229":1,"418":1,"419":1,"420":1,"423":1,"424":1,"425":1,"427":1,"428":1,"429":1,"431":1,"432":1,"433":1,"434":1,"435":1},"2":{"3":4,"4":2,"16":2,"17":2,"70":1,"82":1,"86":1,"91":1,"96":3,"97":1,"106":1,"112":1,"113":1,"162":3,"163":1,"173":1,"176":1,"177":1,"181":2,"186":1,"215":1,"217":10,"218":1,"219":6,"413":3,"414":1,"415":1,"416":4,"417":1,"418":1,"419":1,"420":2,"422":1,"426":1,"430":1,"446":4}}],["accepts",{"2":{"301":1}}],["accesslist",{"2":{"270":2}}],["accesslisteip2930txdata",{"2":{"270":1,"271":1}}],["accesslisteip2930transaction",{"2":{"265":1}}],["access",{"0":{"30":1,"448":1},"2":{"3":1,"34":1,"51":1,"73":1,"187":1,"265":1,"270":1,"278":1,"290":1,"332":1,"353":1,"462":1}}],["acc",{"2":{"41":7,"43":4,"47":6}}],["accurately",{"2":{"455":1}}],["accurate",{"2":{"34":1}}],["accountaddress",{"2":{"446":1}}],["accountnotfounderror",{"2":{"260":1}}],["accounts",{"0":{"336":1},"2":{"8":1,"9":1,"17":1,"101":2,"224":1,"265":1,"406":6,"415":4}}],["account",{"0":{"82":1,"91":1,"101":1,"108":1,"229":1,"255":1,"392":1,"406":1,"419":1,"425":1,"428":1,"431":1},"1":{"83":1,"84":1,"85":1,"86":1,"87":1,"88":1,"89":1,"90":1,"91":1,"92":1,"93":1,"94":1,"95":1},"2":{"3":3,"4":3,"9":1,"13":1,"62":1,"64":2,"67":1,"82":1,"83":1,"84":1,"85":2,"86":6,"87":1,"94":6,"99":2,"102":1,"107":2,"108":2,"113":1,"157":3,"177":1,"184":2,"209":3,"210":3,"217":3,"224":1,"229":2,"249":1,"252":3,"255":6,"260":1,"261":1,"289":2,"294":1,"295":1,"329":1,"331":1,"335":4,"336":4,"353":2,"359":1,"391":1,"392":1,"397":2,"403":1,"415":7,"416":1,"419":3,"420":1,"441":1,"446":2,"448":1,"454":1,"455":1}}],["riskyfunction",{"2":{"388":2}}],["rich",{"2":{"15":1}}],["r",{"2":{"159":1,"269":1,"316":1}}],["rules",{"2":{"140":1}}],["runs",{"2":{"440":1}}],["runsampletx",{"2":{"365":2}}],["runtimes",{"2":{"437":1}}],["runtxopts",{"0":{"358":1},"2":{"358":1}}],["runtxresult",{"2":{"355":1}}],["runtx",{"2":{"26":1,"38":1,"45":2,"46":1,"48":1,"51":2,"54":2,"330":1,"341":1,"352":1,"365":1,"370":2,"392":1,"397":1,"399":2,"400":1,"403":1,"404":2,"407":2,"409":2,"410":2,"448":1}}],["runblockopts",{"0":{"357":1},"2":{"357":1}}],["runblock",{"2":{"351":1,"360":1}}],["runcall",{"2":{"199":1,"217":1,"330":1}}],["run",{"0":{"469":1},"1":{"470":1,"471":1,"472":1,"473":1},"2":{"6":1,"48":1,"184":1,"190":1,"191":1,"351":1,"352":1,"360":1,"365":1,"370":2,"392":1,"397":1,"409":1,"437":1,"455":1,"464":1,"468":1,"470":1}}],["running",{"0":{"351":1},"2":{"0":1,"6":1,"48":1,"357":1,"358":1,"365":1,"410":1,"414":1,"465":1,"467":1,"470":1}}],["round",{"2":{"470":1}}],["row",{"2":{"368":5}}],["rows",{"2":{"368":2}}],["root",{"2":{"85":1,"240":1,"252":2,"257":6,"336":1,"351":1,"357":1}}],["robust",{"2":{"50":1,"56":1}}],["radius",{"2":{"365":4}}],["random",{"2":{"316":2}}],["randombytes",{"2":{"316":2}}],["ran",{"2":{"192":1}}],["ranges",{"2":{"58":1,"215":1}}],["range",{"2":{"57":2,"247":2,"258":2}}],["rather",{"2":{"48":1}}],["raw",{"0":{"3":1},"2":{"3":1,"4":2,"302":1,"307":1,"385":1}}],["rlp",{"0":{"318":1},"2":{"21":2,"120":1,"124":1,"276":1,"304":1,"318":4,"325":2}}],["reuse",{"2":{"388":1}}],["rewards",{"2":{"355":1}}],["rebased",{"2":{"218":1}}],["rebase",{"2":{"218":2}}],["reverts",{"2":{"341":1}}],["reverted",{"2":{"192":1}}],["revert",{"2":{"192":1,"203":2,"228":2,"252":1,"257":2,"260":1,"335":1,"402":2,"429":1,"454":1}}],["remember",{"2":{"293":1}}],["remaining",{"2":{"189":1}}],["removing",{"0":{"287":1},"2":{"282":1}}],["removealllisteners",{"2":{"365":1}}],["removereceipt",{"2":{"218":1}}],["removecustomprecompile",{"2":{"199":1}}],["removebyhash",{"2":{"80":1,"287":1,"337":1}}],["removenewblocktxs",{"2":{"70":1,"80":1,"287":1}}],["remove",{"2":{"70":1,"109":1,"209":1,"287":2,"337":1,"381":1}}],["removed",{"2":{"65":1}}],["removes",{"2":{"62":1,"199":1,"470":1}}],["remote",{"2":{"19":1,"470":1}}],["reorganizations",{"2":{"443":1}}],["reorg",{"2":{"141":1}}],["reliance",{"2":{"471":1}}],["releaselockoncallback",{"2":{"131":1}}],["related",{"0":{"35":1,"49":1,"59":1,"81":1,"95":1,"172":1,"194":1,"216":1,"261":1,"342":1,"374":1,"389":1,"408":1},"2":{"115":1,"359":1,"395":1}}],["replay",{"2":{"409":1}}],["replaying",{"0":{"409":1}}],["replaces",{"2":{"68":1}}],["replace",{"2":{"62":1,"68":1}}],["replacementtx",{"2":{"68":2}}],["replacement",{"0":{"68":1},"2":{"60":1,"62":1,"68":1,"289":1,"294":1,"295":1}}],["reportpreimages",{"2":{"357":1,"358":1}}],["repeat",{"2":{"299":1,"365":1}}],["representing",{"2":{"148":1}}],["representation",{"2":{"125":1,"276":1}}],["reason",{"2":{"388":1}}],["reached",{"2":{"295":1,"306":1}}],["reads",{"2":{"466":1}}],["ready",{"2":{"252":1,"260":2,"391":1,"397":1,"399":1,"400":1,"402":1,"403":1,"404":1,"462":1}}],["readcontract",{"2":{"224":1,"225":1,"412":1,"423":1}}],["readaction",{"2":{"162":1}}],["read",{"2":{"162":3,"163":1,"164":5,"165":2,"224":2,"225":2,"378":1,"393":2,"399":2,"414":1,"446":1}}],["readonlyarray",{"2":{"150":1}}],["reading",{"0":{"102":1,"378":1}}],["realistic",{"2":{"455":1}}],["realreceipt",{"2":{"218":3}}],["real",{"2":{"10":1,"218":2,"464":1,"467":1,"470":1}}],["requirements",{"2":{"294":1,"442":1}}],["requiresignature",{"2":{"285":1}}],["require",{"2":{"217":1}}],["required",{"2":{"84":1,"88":1,"113":1,"276":2}}],["requestpermissions",{"2":{"435":1}}],["requestaddresses",{"2":{"431":1}}],["requests",{"2":{"185":1,"438":1}}],["requestsroot",{"2":{"127":1}}],["requested",{"2":{"144":1}}],["requesteip1193",{"2":{"5":2,"207":2,"212":2,"213":2,"376":2,"412":2,"447":2}}],["request",{"2":{"133":1,"145":1,"178":1,"207":2,"212":1,"214":1,"215":3,"218":2,"409":2,"447":1,"457":1}}],["retrieval",{"2":{"233":1}}],["retrieving",{"0":{"137":1,"244":1,"286":1},"2":{"282":1}}],["retrievedvalue",{"2":{"256":1}}],["retrievedcode",{"2":{"256":1}}],["retrieves",{"2":{"237":2}}],["retrieve",{"2":{"83":1}}],["returntype",{"2":{"365":1}}],["returndata",{"2":{"190":1}}],["returnvalue",{"2":{"26":1,"27":2,"28":1,"30":2,"31":1,"32":1,"33":2,"34":4,"189":2,"190":1,"192":1,"201":1,"332":1,"453":1}}],["return",{"0":{"85":1,"89":1},"2":{"26":1,"27":2,"30":2,"31":1,"32":1,"34":5,"41":1,"43":1,"46":1,"47":1,"84":1,"113":1,"190":1,"191":1,"201":1,"247":1,"332":1,"368":3,"387":1,"388":2,"406":1,"407":2,"453":1}}],["returnstorage=true",{"2":{"85":1}}],["returnstorage",{"2":{"84":1,"86":1,"94":1}}],["returns",{"2":{"26":1,"27":1,"33":2,"123":1,"124":1,"162":2,"168":1,"176":6,"199":3,"201":1,"378":3,"379":1,"381":1,"384":1,"386":1,"387":2,"388":4}}],["regular",{"2":{"78":1,"288":1}}],["recover",{"2":{"316":1}}],["recommended",{"2":{"200":1,"330":1}}],["recid",{"2":{"159":1}}],["recipientaddress",{"2":{"410":1}}],["recipient",{"2":{"75":1,"267":1,"388":2,"397":1}}],["receipttrie",{"2":{"119":1,"127":1}}],["receiptresult",{"2":{"51":3,"58":2}}],["receipt",{"0":{"51":1,"52":1,"218":1,"233":1,"238":1},"1":{"52":1,"234":1,"235":1,"236":1,"237":1,"238":1,"239":2,"240":2,"241":2,"242":2,"243":1,"244":1,"245":1,"246":1,"247":1,"248":1},"2":{"18":2,"51":7,"52":1,"56":3,"58":6,"209":1,"215":2,"218":4,"224":3,"233":1,"234":1,"236":1,"237":1,"240":1,"241":1,"242":1,"245":4,"339":1,"379":2,"385":1,"386":1,"409":6}}],["receiptswithtype",{"2":{"244":1}}],["receiptswithbloom",{"2":{"244":1}}],["receiptsaredifferent",{"2":{"218":1}}],["receiptsmanager",{"0":{"236":1,"339":1},"1":{"237":1,"340":1},"2":{"50":1,"51":3,"55":4,"56":3,"57":1,"218":5,"236":3,"244":4,"245":1,"246":1,"247":1,"329":1,"339":1}}],["receipts",{"0":{"50":1,"244":1,"245":1,"444":1},"1":{"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1},"2":{"11":1,"50":1,"51":1,"56":1,"81":1,"215":1,"216":1,"218":2,"233":2,"236":1,"237":4,"239":1,"244":6,"248":2,"329":1,"339":6,"342":1,"355":1,"360":2,"400":2,"444":1,"465":1}}],["re",{"2":{"60":1,"307":2}}],["reduce",{"2":{"41":1,"43":1,"47":1}}],["resolve",{"2":{"354":8}}],["resource",{"2":{"57":1}}],["resources",{"0":{"24":1},"2":{"34":1}}],["responsible",{"2":{"195":1,"343":1}}],["response",{"2":{"57":1,"247":1}}],["reset",{"2":{"110":2,"429":1}}],["results",{"2":{"46":3,"58":2,"341":1,"360":1}}],["result",{"2":{"3":1,"26":1,"51":1,"94":3,"99":3,"113":2,"169":1,"183":1,"184":1,"189":5,"190":4,"192":4,"217":1,"218":2,"317":1,"330":1,"332":6,"351":1,"352":1,"360":3,"365":4,"372":5,"391":1,"397":2,"399":3,"403":2,"404":4,"407":2,"409":3,"410":2,"418":1,"446":1,"448":1,"453":1}}],["reference",{"0":{"79":1,"421":1},"1":{"80":1,"422":1,"423":1,"424":1,"425":1,"426":1,"427":1,"428":1,"429":1,"430":1,"431":1,"432":1,"433":1,"434":1,"435":1},"2":{"9":1,"35":1,"215":1,"342":1,"459":1}}],["referencing",{"2":{"4":1}}],["reforking",{"2":{"8":1,"13":1}}],["rpctxdata",{"2":{"266":1}}],["rpcurls",{"2":{"148":1,"155":1}}],["rpc",{"0":{"100":1,"206":1,"447":1},"1":{"101":1,"102":1,"103":1,"104":1,"105":1,"207":1,"208":1,"209":1,"210":1,"211":1,"212":1,"213":1,"214":1,"215":1,"216":1,"217":1,"218":1},"2":{"3":1,"9":2,"15":1,"19":1,"24":1,"35":1,"59":1,"81":1,"95":1,"96":1,"100":1,"114":1,"155":1,"173":1,"176":2,"178":1,"180":1,"186":1,"206":1,"207":1,"214":1,"215":1,"216":1,"266":1,"342":2,"389":1,"395":2,"408":1,"437":1,"446":1,"447":1,"465":1}}],["14",{"2":{"392":1}}],["17",{"2":{"391":1,"403":1}}],["1em",{"2":{"368":1}}],["1px",{"2":{"365":1}}],["1fr",{"2":{"365":1}}],["1rem",{"2":{"365":4,"368":1,"369":3}}],["1111",{"2":{"303":1}}],["1193",{"0":{"207":1},"2":{"5":1,"185":2,"206":1,"207":1,"216":1,"376":1,"412":1}}],["1695311333n",{"2":{"416":2}}],["164",{"2":{"312":2}}],["16",{"2":{"190":1,"365":1,"368":3,"409":1}}],["1n",{"2":{"164":1,"255":1,"303":1,"336":1,"409":1}}],["18",{"2":{"155":1}}],["123",{"2":{"400":1}}],["1234567890n",{"2":{"227":1}}],["1234",{"2":{"155":1}}],["120n",{"2":{"388":1}}],["1200px",{"2":{"366":1}}],["126",{"2":{"368":1}}],["128kb",{"2":{"64":1,"289":1}}],["128",{"2":{"64":1,"289":1}}],["15",{"2":{"394":1}}],["1559",{"0":{"271":1},"2":{"73":1,"150":1,"154":1,"155":1,"265":1,"267":1,"278":1,"290":1,"297":1}}],["150",{"2":{"57":1,"247":1}}],["10n",{"2":{"337":1}}],["1014",{"2":{"303":1}}],["1024",{"2":{"64":1,"289":1}}],["10",{"2":{"41":1,"68":2,"93":1,"258":1,"289":1,"406":1}}],["1000n",{"2":{"112":2,"162":1,"164":1,"169":1}}],["1000",{"2":{"78":1,"119":1,"230":1,"382":1,"404":2}}],["10000",{"2":{"57":1,"247":1,"415":1}}],["100000n",{"2":{"54":1}}],["1000000",{"2":{"393":1}}],["10000000000000000000n",{"2":{"406":1}}],["1000000000000000000n",{"2":{"3":1,"4":1,"51":1,"61":1,"274":2,"315":2,"392":1,"397":2}}],["1000000000n",{"2":{"119":1,"286":1,"315":2,"325":1}}],["100000000n",{"2":{"64":1,"289":1}}],["1000000n",{"2":{"54":1,"165":1,"184":1}}],["100n",{"2":{"34":1,"191":1,"217":1,"255":1,"336":1,"388":1,"453":1,"454":1}}],["100",{"2":{"31":2,"64":1,"91":1,"229":1,"289":1,"379":1,"386":1,"387":2,"404":1,"416":2,"419":1}}],["1",{"0":{"3":1,"8":1,"30":1,"41":1,"45":1,"75":1,"91":1,"168":1,"365":1,"378":1,"381":1,"384":1,"399":1,"402":1,"406":1,"414":1,"418":1,"440":1,"446":1,"451":1,"461":1,"470":1},"2":{"3":1,"4":1,"33":1,"52":1,"58":1,"61":1,"64":1,"67":1,"75":1,"176":2,"184":2,"224":2,"227":1,"230":2,"241":2,"246":1,"256":1,"265":1,"270":1,"289":1,"304":1,"312":2,"315":4,"329":1,"341":1,"365":2,"385":1,"392":1,"393":1,"397":1,"400":1,"415":1,"416":1}}],["ephemeral",{"2":{"471":1}}],["edge",{"2":{"455":1}}],["equal",{"2":{"387":2}}],["e2e8f0",{"2":{"365":1}}],["else",{"2":{"332":1,"388":1}}],["eject",{"2":{"218":1}}],["either",{"2":{"217":1}}],["eipnotenablederror",{"2":{"359":1}}],["eip4844blobtxreceipt",{"0":{"242":1},"2":{"242":1}}],["eip4844receipt",{"2":{"52":1}}],["eip1193parameters",{"2":{"185":1}}],["eip1193requestfn",{"2":{"133":1}}],["eips",{"2":{"146":1,"150":2,"154":1,"155":1,"359":1}}],["eip",{"0":{"207":1,"270":1,"271":1,"272":1},"2":{"5":1,"69":1,"73":3,"185":2,"206":1,"207":1,"216":1,"242":1,"248":2,"265":4,"267":1,"269":1,"278":4,"290":3,"297":3,"303":1,"331":1,"355":1,"376":1,"412":1}}],["erc",{"2":{"164":2}}],["erc721",{"2":{"164":3}}],["erc20abi",{"2":{"410":2}}],["erc20",{"2":{"164":3,"165":2,"177":1,"184":1,"225":2}}],["error=",{"2":{"372":1}}],["errorprecompile",{"2":{"32":1}}],["errors",{"0":{"306":1},"2":{"22":1,"34":2,"76":1,"85":2,"89":2,"94":2,"113":1,"144":2,"158":3,"169":1,"190":5,"193":1,"214":1,"215":2,"260":1,"326":1,"365":11}}],["error",{"0":{"22":1,"32":1,"56":1,"76":1,"113":1,"144":1,"158":1,"169":1,"192":1,"203":1,"214":1,"231":1,"277":1,"295":1,"305":1,"326":1,"359":1},"2":{"22":1,"31":1,"32":1,"34":7,"54":1,"56":1,"58":1,"67":3,"76":8,"94":2,"113":2,"158":1,"169":1,"189":2,"190":2,"192":9,"193":4,"203":4,"214":8,"215":2,"231":2,"260":4,"277":1,"295":1,"306":1,"326":2,"332":1,"338":3,"341":1,"359":1,"362":1,"365":7,"369":3,"372":3,"388":11,"402":2}}],["ecosystem",{"0":{"473":1}}],["ecdsasign",{"2":{"159":1}}],["ecdsasignature",{"2":{"159":1}}],["ecsign",{"2":{"159":1,"316":2}}],["ecrecover",{"2":{"159":1,"316":2}}],["etc",{"2":{"137":1,"219":2,"307":1,"397":1,"412":1,"464":1}}],["ethactions",{"0":{"180":1},"2":{"180":2}}],["ethactionsapi",{"0":{"176":1,"183":1},"2":{"176":3}}],["ethgetstorageathandler",{"2":{"176":1}}],["ethgetcodehandler",{"2":{"176":1}}],["ethgetbalancehandler",{"2":{"176":1}}],["ethgaspricehandler",{"2":{"176":1}}],["ethchainidhandler",{"2":{"176":1}}],["ethcallresult",{"2":{"112":1}}],["ethcall",{"2":{"112":2}}],["ethcallhandler",{"2":{"112":2,"176":1}}],["ethblocknumberhandler",{"2":{"176":1}}],["ethjslog",{"2":{"239":1}}],["ethjscommon",{"2":{"148":2,"156":1}}],["ethjsaddress",{"2":{"119":2,"300":1,"301":1,"302":1}}],["ether",{"2":{"315":2}}],["ethers",{"0":{"5":1,"213":1,"375":1,"387":1,"458":1},"1":{"376":1,"377":1,"378":1,"379":1,"380":1,"381":1,"382":1,"383":1,"384":1,"385":1,"386":1,"387":1,"388":1,"389":1},"2":{"5":4,"10":2,"15":1,"213":2,"216":1,"375":1,"376":2,"378":1,"379":1,"384":1,"386":1,"388":1,"458":1}}],["ethereumvm",{"2":{"282":1}}],["ethereumjs",{"0":{"156":1},"2":{"9":1,"24":2,"35":2,"146":1,"148":1,"156":1,"158":1,"195":1,"198":1,"205":1,"262":1,"327":1,"330":1,"333":1,"335":1,"337":1,"342":2,"343":1,"361":1,"408":1,"440":1}}],["ethereum",{"0":{"100":1,"209":1,"314":1,"469":1},"1":{"101":1,"102":1,"103":1,"104":1,"105":1,"315":1,"316":1,"470":1,"471":1,"472":1,"473":1},"2":{"0":1,"6":1,"9":1,"17":1,"19":1,"21":1,"23":1,"24":3,"25":1,"35":1,"52":1,"73":1,"96":1,"100":1,"114":1,"115":1,"116":1,"129":1,"151":1,"152":1,"161":1,"163":1,"172":1,"173":1,"176":2,"177":2,"180":1,"185":2,"195":2,"198":1,"206":1,"216":2,"218":1,"219":1,"233":1,"248":1,"249":1,"252":1,"262":1,"279":1,"283":1,"299":1,"304":1,"308":2,"329":1,"331":1,"342":1,"343":2,"375":1,"396":1,"402":1,"406":1,"411":1,"437":2,"447":1,"455":1,"464":2,"468":1}}],["eth",{"2":{"3":1,"4":1,"61":1,"101":5,"102":4,"103":4,"104":4,"105":3,"112":1,"176":1,"180":2,"183":3,"207":1,"209":20,"215":6,"218":3,"219":1,"385":1,"392":1,"397":2,"406":1,"407":1,"409":2,"415":1,"447":1}}],["earliest",{"2":{"55":1,"84":1,"137":1}}],["each",{"2":{"16":1,"26":1,"67":1,"188":1,"190":1,"365":6,"368":6,"369":2,"372":2,"373":2}}],["embedding",{"2":{"248":1}}],["emitted",{"2":{"188":4,"239":1}}],["emitter",{"0":{"320":1},"2":{"187":1,"320":3}}],["emits",{"2":{"54":1,"354":1}}],["emit",{"2":{"54":2,"143":1,"320":2}}],["emission",{"0":{"54":1}}],["empty",{"2":{"32":1,"34":1,"85":1,"336":2}}],["estimating",{"0":{"410":1}}],["estimation",{"0":{"470":1},"2":{"49":1,"194":1,"215":1}}],["estimatefeespergas",{"2":{"425":1}}],["estimatecontractgas",{"2":{"423":1}}],["estimate",{"2":{"104":1,"209":1,"341":1,"388":1,"410":2,"438":1,"455":1}}],["estimategas",{"2":{"104":1,"209":1,"215":2,"388":1,"423":1}}],["essential",{"0":{"9":1}}],["efficiency",{"2":{"43":1}}],["efficiently",{"2":{"215":1}}],["efficient",{"2":{"13":1,"58":1,"62":1}}],["effects",{"2":{"22":1,"467":1}}],["effect",{"2":{"22":2}}],["enhancements",{"0":{"471":1}}],["enhanced",{"2":{"177":1,"417":1}}],["engine",{"2":{"329":1,"440":1}}],["envelope",{"2":{"278":1,"297":1}}],["environments",{"2":{"210":1}}],["environment",{"2":{"17":1,"195":1,"437":1,"455":1,"464":2,"472":1}}],["enum",{"2":{"203":1}}],["encodeconstructor",{"2":{"407":1}}],["encode",{"2":{"317":1,"318":1,"386":1}}],["encodeeventtopics",{"2":{"317":2}}],["encodeabiparameters",{"2":{"317":1}}],["encodefunctiondata",{"2":{"307":1,"317":2,"386":1,"410":3}}],["encoded",{"2":{"276":1,"370":1}}],["encoding",{"0":{"311":1,"317":1,"318":1,"386":1},"1":{"312":1,"313":1},"2":{"21":1,"124":1,"307":1,"308":1}}],["encountered",{"2":{"192":1}}],["ensuniversalresolver",{"2":{"148":1}}],["ensure",{"2":{"58":1,"64":1,"215":1}}],["ensregistry",{"2":{"148":1}}],["enforces",{"2":{"64":1}}],["enter",{"2":{"65":1}}],["entries",{"2":{"41":1,"47":1,"369":1}}],["entire",{"2":{"3":1,"48":1}}],["endtime",{"2":{"39":1}}],["enabled",{"2":{"37":1,"359":1}}],["enable",{"2":{"37":1,"150":1,"200":1,"204":1,"347":1}}],["enabling",{"0":{"37":1},"2":{"375":1,"411":1}}],["e",{"2":{"16":2,"169":3,"219":1,"231":3,"277":2,"412":1}}],["every",{"2":{"78":1,"230":1,"452":1}}],["eventname",{"2":{"317":1}}],["eventtopic",{"2":{"55":3}}],["event",{"0":{"53":1,"54":1,"171":1,"320":1,"380":1,"400":1},"1":{"54":1,"55":1,"56":1,"381":1,"382":1},"2":{"50":1,"54":1,"55":1,"105":1,"162":1,"171":5,"185":1,"187":1,"204":1,"209":1,"215":1,"320":4,"324":1,"332":1,"339":1,"340":1,"381":5,"382":3,"386":2,"388":3,"400":3,"409":3,"444":1}}],["eventsignature",{"2":{"339":1}}],["events",{"0":{"143":1,"187":1,"188":1,"204":1,"354":1,"381":1,"382":1,"409":1},"1":{"188":1,"189":1,"190":1,"191":1,"192":1,"193":1,"194":1},"2":{"9":1,"11":1,"54":3,"131":2,"143":2,"171":3,"187":1,"189":4,"190":3,"191":1,"192":1,"193":4,"209":1,"317":1,"354":7,"365":3,"372":1,"373":1,"374":1,"381":2,"382":3,"400":3}}],["evmdebugger",{"0":{"365":1},"2":{"366":3,"370":1}}],["evmruncallopts",{"2":{"199":1}}],["evmresult",{"2":{"188":1,"199":1}}],["evmevent",{"2":{"188":1}}],["evmerrormessage",{"2":{"26":1,"27":2,"30":1,"34":2,"203":2}}],["evmerror",{"2":{"26":1,"27":2,"30":1,"34":3,"203":1}}],["evmstatemanagerinterface",{"2":{"157":1}}],["evmts",{"2":{"96":1,"195":1,"198":4,"217":4,"249":1,"262":1,"279":1,"308":1,"343":1}}],["evm",{"0":{"187":1,"195":1,"198":1,"200":1,"330":1,"440":1},"1":{"188":1,"189":1,"190":1,"191":1,"192":1,"193":1,"194":1,"196":1,"197":1,"198":1,"199":2,"200":1,"201":1,"202":1,"203":1,"204":1,"205":1,"331":1,"332":1},"2":{"9":2,"11":1,"13":1,"17":2,"24":3,"25":1,"26":1,"27":1,"34":1,"35":1,"36":1,"38":2,"45":2,"46":2,"48":2,"99":1,"157":1,"187":1,"188":1,"189":6,"190":4,"191":1,"192":1,"193":4,"195":4,"196":1,"198":4,"199":1,"200":3,"201":4,"203":1,"204":3,"205":1,"222":1,"249":1,"261":1,"296":1,"297":1,"329":1,"330":6,"341":1,"342":1,"346":3,"347":3,"361":1,"362":1,"365":4,"372":1,"373":1,"374":1,"397":1,"414":1,"420":1,"437":1,"438":3,"440":3,"448":1,"453":1,"464":1,"470":1,"472":1,"473":1}}],["execresult",{"2":{"189":3,"190":3,"192":3,"332":5,"365":3,"372":4,"397":1,"399":2,"403":1,"404":2,"409":1,"410":2}}],["executing",{"2":{"189":1,"195":1,"198":1,"201":1,"343":1}}],["executiontime",{"2":{"39":1,"41":1,"42":2,"43":1,"45":1}}],["executiongasused",{"2":{"26":1,"27":4,"28":1,"30":4,"31":1,"32":1,"33":2,"34":6,"189":1,"201":1,"332":1,"365":1,"410":2,"453":1}}],["execution",{"0":{"470":1},"2":{"9":1,"17":1,"36":1,"99":2,"111":2,"187":1,"189":1,"190":1,"193":1,"195":1,"204":2,"210":1,"329":1,"330":3,"331":2,"332":3,"341":3,"354":4,"362":1,"365":5,"397":2,"438":1,"440":1,"448":1,"464":1,"467":1}}],["executes",{"2":{"176":1,"177":2,"199":1}}],["execute",{"2":{"3":1,"9":1,"26":1,"38":1,"51":1,"99":3,"102":1,"112":2,"183":1,"184":1,"209":1,"365":1,"446":1}}],["extract",{"2":{"324":2}}],["extractabievent",{"2":{"324":2}}],["extractabifunction",{"2":{"324":2}}],["extradata",{"2":{"119":1,"127":1}}],["external",{"2":{"455":1,"472":1}}],["externally",{"2":{"48":1}}],["extension",{"2":{"438":1}}],["extendable",{"2":{"465":1}}],["extended",{"0":{"210":1},"2":{"177":1,"207":1}}],["extends",{"2":{"39":2,"52":1,"180":1,"181":1,"198":1,"240":1,"241":1,"242":1,"270":1,"271":1,"272":1}}],["extending",{"2":{"21":1,"173":1,"195":1,"262":1,"343":1}}],["extend",{"2":{"5":1,"11":1,"25":1,"180":1,"181":1,"207":1,"212":1,"213":1,"376":1,"412":1,"447":1,"453":1}}],["existing",{"0":{"225":1},"2":{"145":1,"303":1,"319":1,"351":1}}],["exist",{"2":{"113":1}}],["exists",{"2":{"94":1,"257":2}}],["existent",{"2":{"56":1}}],["exception",{"2":{"388":1}}],["exceptions",{"2":{"341":1}}],["exceptionerror",{"2":{"27":1,"30":1,"34":2,"189":1,"190":2,"192":2,"332":2,"365":2,"372":1,"397":1,"399":2,"403":1,"404":2}}],["excessblobgas",{"2":{"127":1}}],["excessive",{"2":{"57":1}}],["exceeded",{"2":{"113":1}}],["example",{"0":{"29":1,"86":1,"112":1,"145":1,"190":1,"296":1,"360":1,"390":1,"466":1},"1":{"30":1,"31":1,"32":1,"33":1,"391":1,"392":1,"393":1,"394":1,"395":1},"2":{"27":1,"155":1,"168":3,"322":1,"362":1,"370":2,"393":1,"466":1}}],["examples",{"0":{"2":1,"10":1,"90":1,"153":1,"182":1,"243":1,"456":1},"1":{"3":1,"4":1,"5":1,"91":1,"92":1,"93":1,"154":1,"155":1,"156":1,"157":1,"183":1,"184":1,"244":1,"245":1,"246":1,"457":1,"458":1},"2":{"10":1,"214":1,"215":1,"438":1,"459":1,"463":1}}],["explore",{"2":{"463":1}}],["explanation",{"2":{"6":1}}],["expose",{"2":{"207":1}}],["exports",{"0":{"130":1,"147":1},"1":{"131":1,"132":1,"133":1,"148":1,"149":1,"150":1,"151":1,"152":1},"2":{"166":1,"298":1,"307":2}}],["export",{"2":{"48":1,"368":3,"369":1}}],["expectedvalue",{"2":{"399":1}}],["expect",{"2":{"387":3,"397":3,"399":5,"400":2,"402":1,"403":1,"404":2}}],["expensiveops",{"2":{"41":2}}],["expensive",{"2":{"41":2,"84":1}}],["experiences",{"2":{"464":1}}],["experience",{"0":{"15":1,"471":1},"2":{"4":1,"219":1}}],["nft",{"2":{"164":4}}],["num",{"2":{"312":1}}],["numbertohex",{"2":{"312":2}}],["numbers",{"2":{"301":1,"312":1}}],["number",{"2":{"26":1,"39":4,"47":1,"52":1,"57":1,"84":1,"101":1,"103":2,"104":1,"119":1,"127":33,"131":5,"137":1,"148":2,"150":1,"159":1,"176":1,"183":1,"191":1,"209":2,"214":1,"221":1,"246":2,"247":1,"252":1,"292":2,"300":1,"333":3,"347":1,"368":3,"373":1}}],["null",{"2":{"56":1,"58":2,"237":2,"317":1,"365":2}}],["nomicfoundation",{"2":{"387":1}}],["now",{"2":{"119":1,"163":1,"180":1,"181":1,"391":1,"392":1,"404":1,"409":1,"410":1,"412":1}}],["noforkurlseterror",{"2":{"113":1}}],["no",{"2":{"56":1,"392":1,"438":2,"471":1,"472":1}}],["none",{"2":{"365":1}}],["nonexistenthash",{"2":{"56":2}}],["noncetoohigherror",{"2":{"359":1}}],["noncetoolowerror",{"2":{"359":1}}],["nonce",{"2":{"61":1,"62":2,"65":2,"68":4,"75":1,"76":2,"85":2,"86":2,"88":2,"93":1,"107":1,"119":1,"127":1,"209":1,"210":1,"217":1,"252":1,"255":1,"269":1,"274":2,"286":1,"294":1,"295":1,"303":3,"304":1,"336":1,"359":1,"406":1,"414":1}}],["non",{"2":{"56":1,"359":1}}],["notes",{"0":{"301":1}}],["note",{"2":{"68":1,"201":1,"217":1,"449":1}}],["not",{"2":{"32":1,"34":1,"56":1,"113":1,"214":1,"365":1}}],["nodes",{"2":{"19":1}}],["node",{"0":{"3":1,"437":1,"438":1,"464":1,"467":1},"1":{"465":1,"466":1,"467":1,"468":1},"2":{"0":1,"3":8,"4":2,"5":3,"6":1,"8":3,"23":2,"25":1,"26":3,"27":1,"30":1,"33":1,"36":1,"37":2,"38":1,"45":1,"46":1,"50":1,"51":3,"54":1,"61":3,"70":1,"86":2,"91":1,"92":1,"93":1,"94":4,"112":1,"128":2,"160":2,"187":1,"189":2,"190":2,"191":2,"206":1,"207":3,"212":2,"213":2,"215":3,"217":5,"218":8,"219":3,"232":2,"298":1,"302":1,"307":2,"328":1,"330":1,"333":1,"335":1,"337":1,"339":1,"362":1,"365":5,"369":3,"375":1,"376":3,"387":3,"391":2,"392":2,"394":1,"396":1,"397":4,"399":3,"400":5,"402":3,"403":3,"404":3,"409":7,"410":3,"411":1,"412":6,"414":1,"437":3,"439":1,"445":1,"446":5,"447":2,"448":1,"451":1,"452":1,"454":1,"457":1,"458":1,"462":2,"464":4,"466":3,"467":1,"470":1,"473":1}}],["nameaction",{"2":{"164":1}}],["name",{"2":{"39":1,"131":2,"141":1,"148":1,"155":2,"162":1,"164":1,"165":2,"168":1,"190":1,"191":1,"365":2,"373":1}}],["nativecurrency",{"2":{"148":1,"155":1}}],["native",{"2":{"25":1,"465":1}}],["navigate",{"2":{"0":1}}],["need",{"2":{"201":1}}],["needed",{"2":{"34":1,"94":1,"392":1,"472":1}}],["next",{"0":{"459":1,"463":1,"468":1},"2":{"189":8,"190":6,"191":2,"192":2,"193":8,"227":1,"342":1,"365":4,"372":2,"373":2}}],["network",{"0":{"101":1,"395":1},"2":{"13":1,"185":1,"222":1,"387":1,"388":2,"403":1,"438":1,"451":1,"467":1}}],["networksync",{"2":{"185":1}}],["networks",{"2":{"8":1,"395":1,"441":1,"455":1,"471":1}}],["newvalue",{"2":{"399":2}}],["newfilter",{"2":{"209":1}}],["newcontract",{"2":{"188":1,"189":1,"190":1}}],["newbalance",{"2":{"94":1,"393":1}}],["newblockfilter",{"2":{"209":1}}],["newblocks",{"2":{"70":1,"287":1}}],["newblock",{"2":{"3":1}}],["new",{"2":{"5":1,"26":1,"27":3,"30":3,"31":2,"32":2,"33":2,"34":6,"54":1,"58":1,"68":1,"70":2,"88":4,"117":2,"120":1,"123":1,"124":1,"125":1,"132":1,"136":1,"143":1,"145":3,"156":1,"185":1,"188":1,"189":1,"190":1,"191":1,"200":1,"209":1,"213":1,"218":3,"236":1,"256":1,"274":3,"282":1,"287":1,"296":2,"299":1,"302":1,"312":1,"313":1,"319":1,"320":1,"333":1,"350":1,"363":1,"369":2,"373":1,"376":1,"378":1,"379":1,"381":1,"382":1,"384":1,"386":1,"387":2,"388":5,"393":1,"397":1,"399":1,"403":1,"409":3,"420":1,"458":1}}],["npm",{"2":{"1":1,"16":1,"97":1,"174":1,"196":1,"220":1,"234":1,"250":1,"263":1,"280":1,"309":1,"344":1,"363":2,"370":1,"461":1}}],["wrapped",{"2":{"306":1}}],["wrapper",{"2":{"302":1}}],["wrap",{"2":{"215":1}}],["wraps",{"2":{"146":1}}],["writing",{"0":{"379":1}}],["writable",{"2":{"372":2}}],["written",{"2":{"25":1}}],["writecontract",{"2":{"224":1,"231":1}}],["writeaction",{"2":{"162":1}}],["write",{"2":{"10":1,"162":3,"164":1,"168":1,"169":1,"170":2,"224":2,"231":1,"393":1,"399":1,"400":1,"403":1,"404":2,"449":1}}],["well",{"2":{"473":1}}],["welcome",{"2":{"0":1}}],["were",{"2":{"267":1}}],["we",{"2":{"201":1,"410":1}}],["wei",{"2":{"85":1,"88":1,"315":2,"325":2}}],["world",{"0":{"466":1},"2":{"10":1,"184":1}}],["workflows",{"2":{"161":1}}],["working",{"0":{"245":1,"336":1,"340":1,"393":1},"2":{"115":1,"116":1,"161":1,"185":1,"308":1}}],["work",{"2":{"9":1,"10":1,"165":1,"315":1,"317":1,"439":1}}],["works",{"2":{"6":1,"465":1,"473":1}}],["whale",{"2":{"392":1,"403":1}}],["what",{"0":{"437":1,"438":1,"464":1},"1":{"465":1,"466":1,"467":1,"468":1},"2":{"6":1,"128":1,"160":1,"232":1}}],["which",{"2":{"438":1}}],["white",{"2":{"365":1,"368":1}}],["while",{"2":{"219":1,"298":1}}],["whether",{"2":{"84":1,"85":2}}],["when",{"2":{"34":1,"37":1,"38":1,"70":1,"113":3,"144":2,"158":1,"188":1,"260":1,"294":1,"296":1,"306":1,"334":1,"359":5,"381":1,"438":1}}],["why",{"0":{"467":1,"469":1},"1":{"470":1,"471":1,"472":1,"473":1},"2":{"6":1,"468":1}}],["was",{"2":{"242":1,"306":1}}],["waitfortransactionreceipt",{"2":{"424":1}}],["waitfortransaction",{"2":{"385":1}}],["waitfordeployment",{"2":{"384":1,"387":1}}],["wait",{"2":{"215":1,"218":1,"379":2,"385":1,"388":1}}],["watchasset",{"2":{"435":1}}],["watchassetparams",{"2":{"185":1}}],["watching",{"2":{"185":1}}],["watchevent",{"2":{"171":1}}],["warn",{"2":{"78":1,"150":1,"200":1}}],["want",{"2":{"48":1,"217":1}}],["walletpermission",{"2":{"185":1}}],["wallet",{"0":{"415":1,"430":1},"1":{"431":1,"432":1,"433":1,"434":1,"435":1},"2":{"4":1,"185":1,"219":1,"415":1,"430":1}}],["way",{"2":{"3":1,"200":1,"219":1,"449":1}}],["width",{"2":{"366":1}}],["withdraw",{"2":{"404":4}}],["withdrawalsroot",{"2":{"127":1}}],["withaddress",{"2":{"163":1,"164":2,"224":1,"225":1}}],["without",{"2":{"67":1,"102":1,"176":1,"285":1,"455":1}}],["with",{"0":{"4":1,"5":1,"156":1,"163":1,"212":1,"213":1,"218":1,"225":1,"245":1,"336":1,"340":1,"375":1,"387":1,"393":1,"409":1,"411":1,"438":1,"457":1,"458":1},"1":{"376":1,"377":1,"378":1,"379":1,"380":1,"381":1,"382":1,"383":1,"384":1,"385":1,"386":1,"387":1,"388":1,"389":1,"412":1,"413":1,"414":1,"415":1,"416":1,"417":1,"418":1,"419":1,"420":1,"421":1,"422":1,"423":1,"424":1,"425":1,"426":1,"427":1,"428":1,"429":1,"430":1,"431":1,"432":1,"433":1,"434":1,"435":1},"2":{"0":1,"3":3,"4":2,"5":2,"9":2,"10":5,"14":1,"17":1,"25":1,"26":2,"54":1,"55":1,"62":1,"67":2,"68":1,"75":1,"96":1,"99":1,"115":1,"116":1,"129":1,"131":1,"161":1,"162":1,"164":1,"165":2,"166":1,"168":1,"173":1,"176":2,"177":2,"180":1,"181":1,"185":1,"198":1,"203":1,"206":1,"215":1,"216":2,"217":1,"219":1,"224":1,"244":2,"246":1,"265":3,"269":1,"270":1,"271":1,"272":1,"285":1,"307":1,"308":1,"315":1,"317":1,"319":1,"375":2,"376":1,"388":1,"393":1,"399":1,"409":2,"411":2,"412":1,"415":2,"420":1,"437":1,"438":1,"453":1,"471":1,"473":2}}],["will",{"2":{"0":1,"163":1,"168":1,"362":1,"391":1,"409":1}}],["gap",{"2":{"365":2,"368":1,"369":1}}],["ganache",{"2":{"219":1}}],["gasestimate",{"2":{"215":1,"388":2}}],["gasefficiency",{"2":{"43":1}}],["gascost",{"2":{"190":1,"191":3,"373":2}}],["gasleft",{"2":{"189":2,"365":2}}],["gaslimit",{"2":{"26":1,"27":3,"28":1,"30":3,"31":2,"34":6,"51":1,"54":2,"61":1,"75":1,"119":1,"127":1,"269":1,"274":2,"388":1}}],["gashotspots",{"2":{"47":1}}],["gastimeline",{"2":{"43":2}}],["gasprofile",{"2":{"373":4}}],["gasprice",{"2":{"101":1,"176":1,"269":1,"274":2}}],["gasprecompile",{"2":{"31":1}}],["gasperbyte",{"2":{"34":2}}],["gasused",{"2":{"31":3,"34":3,"39":1,"41":1,"42":2,"43":4,"45":2,"47":1,"51":1,"119":1,"127":1,"189":1,"355":1,"360":1,"365":3}}],["gas",{"0":{"31":1,"43":1,"47":1,"170":1,"191":1,"373":1,"410":1,"470":1},"2":{"27":1,"30":1,"31":2,"34":7,"43":2,"47":2,"49":1,"62":2,"64":1,"65":1,"68":3,"76":2,"101":1,"104":1,"113":1,"170":3,"176":1,"189":1,"191":2,"192":2,"194":1,"203":4,"209":1,"215":2,"239":1,"242":2,"276":2,"277":1,"289":4,"294":2,"295":2,"331":2,"332":1,"341":4,"355":2,"359":1,"360":1,"362":1,"365":4,"373":3,"388":2,"410":3,"438":1,"440":1,"442":1,"452":1,"455":1,"465":1}}],["github",{"2":{"198":4,"217":4}}],["given",{"2":{"176":3}}],["gives",{"2":{"3":1}}],["goerli",{"2":{"152":2}}],["gweitowei",{"2":{"75":2}}],["gwei",{"2":{"64":1,"289":1,"315":1,"325":2}}],["grid",{"2":{"365":3}}],["grained",{"2":{"420":1,"472":1}}],["granular",{"2":{"187":1}}],["grayglacier",{"2":{"151":1}}],["gracefully",{"2":{"58":1,"193":1,"215":1,"341":1}}],["group",{"2":{"41":1}}],["gt",{"2":{"26":2,"27":1,"28":2,"30":1,"31":2,"32":1,"33":2,"34":3,"41":3,"42":2,"43":3,"47":3,"78":2,"80":3,"131":12,"132":1,"141":1,"143":1,"150":1,"157":7,"166":3,"171":1,"188":4,"189":4,"190":4,"191":1,"192":1,"193":3,"199":1,"201":1,"218":1,"237":5,"246":1,"252":45,"292":2,"307":1,"308":1,"320":1,"323":2,"324":2,"354":4,"355":2,"365":54,"366":9,"368":15,"369":18,"372":17,"373":30,"381":1,"387":2,"388":3,"391":1,"394":1,"397":1,"399":1,"400":1,"402":1,"403":1,"404":1,"453":1}}],["generate",{"2":{"316":2,"351":2,"357":1,"360":1}}],["generated",{"2":{"16":1,"96":1,"195":1,"249":1,"262":1,"279":1,"308":1,"343":1}}],["generally",{"2":{"306":1}}],["genesisstate",{"2":{"347":2}}],["genesisstateroot",{"2":{"133":1}}],["genesis",{"2":{"258":1,"347":1}}],["genesisblock",{"2":{"133":1}}],["geth",{"2":{"467":1}}],["getgasprice",{"2":{"425":1}}],["geteventtopic",{"2":{"400":2}}],["getaddresses",{"2":{"431":1}}],["getaddress",{"2":{"384":1}}],["getactiveopcodes",{"2":{"199":1}}],["getaccountaddresses",{"2":{"252":1}}],["getaccount",{"2":{"157":1,"177":1,"252":1,"255":1,"260":1,"335":1,"353":1,"397":1}}],["getaccountresult",{"2":{"85":1}}],["getaccountparams",{"2":{"84":1,"217":1}}],["getaccounthandler",{"0":{"83":1},"1":{"84":1,"85":1,"86":1},"2":{"3":2,"82":1,"83":1,"86":2,"94":2,"99":1,"177":1,"217":1,"446":2}}],["getvalue",{"2":{"384":1,"399":2}}],["getvm",{"2":{"3":1,"4":1,"26":1,"30":1,"38":1,"45":1,"46":1,"51":1,"54":1,"189":1,"190":1,"191":1,"330":1,"333":1,"335":1,"365":2,"369":1,"392":1,"397":1,"399":1,"402":1,"404":1,"409":2,"410":1,"448":1,"462":1,"466":1}}],["getupfrontcost",{"2":{"276":1}}],["getdatafee",{"2":{"276":1}}],["getproof",{"2":{"252":1,"258":1}}],["getprecompile",{"2":{"199":1}}],["getpermissions",{"2":{"435":1}}],["getperformancelogs",{"2":{"38":1,"45":1,"46":1,"48":1,"199":1,"204":1}}],["getpendingtransactions",{"2":{"218":1,"337":1}}],["getsigner",{"2":{"379":1,"384":1,"385":1,"387":1}}],["getstate",{"2":{"402":1}}],["getstateroot",{"2":{"252":1,"257":1}}],["getstorageat",{"2":{"102":1,"176":1,"209":1,"425":1}}],["gets",{"2":{"177":1,"237":1}}],["getchainid",{"2":{"425":1}}],["getcontract",{"2":{"388":1}}],["getcontractstorage",{"2":{"157":1,"252":1,"256":1,"335":1}}],["getcontractcode",{"2":{"157":1,"252":1,"256":1,"335":1}}],["getcode",{"2":{"102":1,"176":1,"209":1}}],["getcanonicalheadblock",{"2":{"131":1,"137":1,"145":1,"350":1,"360":1}}],["getiteratorhead",{"2":{"131":1,"141":1}}],["getfilterlogs",{"2":{"105":1,"209":1}}],["getfilterchanges",{"2":{"105":1,"209":1}}],["gettransaction",{"2":{"424":1}}],["gettransactionreceipt",{"2":{"209":1,"215":2,"218":1,"224":1,"409":1,"424":1}}],["gettransactioncount",{"2":{"209":1,"414":1,"424":1}}],["gettransactionbyblocknumberandindex",{"2":{"104":1}}],["gettransactionbyblockhashandindex",{"2":{"104":1}}],["gettransactionbyhash",{"2":{"104":1,"209":1}}],["gettotaldifficulty",{"2":{"131":1}}],["gettxpool",{"2":{"61":1,"337":1}}],["getting",{"0":{"0":1},"1":{"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1}}],["getlogsreturn",{"2":{"237":1}}],["getlogs",{"2":{"55":3,"56":1,"105":1,"209":1,"237":1,"246":1,"247":2,"339":1,"400":1}}],["getreceipts",{"2":{"237":1,"244":3,"339":1}}],["getreceiptsmanager",{"2":{"51":1,"218":1,"339":1,"400":1}}],["getreceiptbytxhashreturn",{"2":{"237":1}}],["getreceiptbytxhash",{"2":{"51":1,"56":1,"218":1,"237":1,"245":1,"339":1}}],["getbasefee",{"2":{"276":1}}],["getbalance",{"2":{"5":1,"102":1,"176":1,"183":1,"209":1,"376":1,"394":1,"412":1,"414":1,"425":1,"447":1}}],["getbytecode",{"2":{"423":1}}],["getbyhash",{"2":{"69":1,"80":1,"286":1}}],["getbysenderaddress",{"2":{"69":1,"80":1,"286":1}}],["getblocktransactioncount",{"2":{"424":1}}],["getblocktransactioncountbynumber",{"2":{"103":1}}],["getblocktransactioncountbyhash",{"2":{"103":1}}],["getblockbynumber",{"2":{"103":1,"209":1,"218":1,"409":1}}],["getblockbyhash",{"2":{"103":1,"209":1}}],["getblockbytag",{"2":{"4":1,"55":2,"131":1,"137":1,"462":1,"466":1}}],["getblocknumber",{"2":{"5":1,"221":1,"376":1,"424":1}}],["getblock",{"2":{"4":1,"131":1,"137":1,"333":2,"334":1,"414":1,"424":1}}],["get",{"2":{"0":1,"3":1,"4":1,"6":1,"38":1,"51":1,"55":1,"57":3,"61":1,"69":3,"99":1,"101":4,"102":3,"103":4,"104":3,"105":3,"109":1,"137":1,"141":1,"145":1,"168":1,"183":2,"191":2,"204":1,"209":13,"217":1,"218":3,"221":1,"224":2,"244":3,"245":1,"246":1,"247":3,"255":1,"256":2,"257":1,"258":1,"276":6,"286":3,"296":1,"333":2,"337":2,"339":2,"355":4,"373":1,"379":1,"382":1,"384":1,"388":1,"393":1,"400":1,"409":2,"414":3,"419":1}}],["g",{"2":{"16":2,"219":1,"412":1}}],["guide",{"2":{"0":1,"214":1,"328":1,"342":1,"375":1,"395":1,"396":2,"399":1,"400":1,"402":1,"403":1,"404":1,"406":1,"407":1,"408":1,"411":1}}],["td",{"2":{"373":6}}],["tbody",{"2":{"373":2}}],["ts",{"2":{"363":1,"365":1,"366":1,"368":1,"369":1,"370":1,"372":1,"373":1,"473":1}}],["tip",{"2":{"307":1}}],["timestamps",{"2":{"404":1,"416":1}}],["timestamp",{"2":{"43":1,"119":1,"127":1,"227":3,"347":1,"404":1}}],["time",{"0":{"227":1,"293":1,"404":1},"2":{"43":1,"65":1,"293":4,"404":5,"416":1,"464":1,"470":1}}],["t",{"2":{"113":1,"301":1}}],["target",{"2":{"409":2}}],["targeted",{"2":{"48":1}}],["table",{"2":{"373":2}}],["take",{"2":{"228":1}}],["tangerinewhistle",{"2":{"151":1}}],["tag",{"2":{"84":1,"131":1,"137":1,"141":2,"183":1}}],["two",{"2":{"67":1,"82":1}}],["typeof",{"2":{"166":3,"323":2,"324":2,"365":1}}],["typedtransaction",{"2":{"355":1,"358":1}}],["typed",{"2":{"162":1,"214":1,"278":1,"297":1}}],["type",{"0":{"85":1,"89":1,"148":1,"168":1,"313":1},"2":{"23":1,"26":1,"39":4,"41":1,"42":1,"43":2,"47":1,"58":1,"84":1,"85":1,"88":1,"89":1,"99":1,"131":1,"133":1,"148":2,"150":1,"151":1,"161":1,"162":3,"166":4,"168":1,"176":1,"177":1,"178":1,"185":2,"188":1,"215":1,"217":2,"230":3,"240":1,"241":1,"242":1,"244":1,"265":4,"270":1,"271":1,"272":1,"322":2,"323":3,"324":3,"365":1,"369":1,"381":2,"397":1,"404":1,"449":1,"452":1}}],["typesafe",{"2":{"177":1,"449":1}}],["types",{"0":{"39":1,"52":1,"73":1,"126":1,"166":1,"185":1,"202":1,"238":1,"265":1,"268":1,"290":1,"311":1,"321":1,"322":1,"323":1,"324":1,"356":1},"1":{"127":1,"239":1,"240":1,"241":1,"242":1,"269":1,"270":1,"271":1,"272":1,"312":1,"313":1,"322":1,"323":1,"324":1,"357":1,"358":1},"2":{"18":1,"22":1,"23":1,"34":2,"39":1,"52":1,"58":1,"73":1,"75":1,"113":1,"166":1,"168":1,"185":1,"203":1,"214":2,"215":1,"262":1,"265":1,"276":1,"277":1,"290":1,"301":1,"308":1,"359":1,"407":2}}],["typescript",{"2":{"15":1}}],["trip",{"2":{"470":1}}],["trigger",{"2":{"400":1}}],["trie",{"2":{"21":1}}],["tr",{"2":{"373":4}}],["true",{"2":{"37":3,"76":1,"86":1,"217":1,"218":2,"244":2,"252":1,"313":3,"351":1,"360":1,"365":1,"369":1,"409":1}}],["try",{"2":{"34":1,"67":1,"76":1,"169":1,"193":1,"215":1,"231":1,"260":2,"277":1,"338":1,"365":1,"369":1,"388":1,"402":1,"404":2}}],["tree",{"0":{"42":1},"2":{"21":1,"42":1,"219":1,"261":1,"413":1,"446":1}}],["traveling",{"2":{"416":1}}],["tracks",{"2":{"331":1}}],["tracking",{"2":{"204":1}}],["track",{"2":{"43":1,"47":1,"190":3,"365":2,"465":1}}],["tracer",{"2":{"190":2}}],["tracetransaction",{"2":{"111":1,"210":1}}],["tracecall",{"2":{"111":1}}],["trace",{"2":{"9":1,"111":2,"190":10,"204":1,"210":1}}],["transitions",{"2":{"249":1,"330":1,"440":1}}],["transformabletobytes",{"2":{"127":12}}],["transferresult",{"2":{"410":2}}],["transferfromtx",{"2":{"410":2}}],["transferfrom",{"2":{"410":3}}],["transferfunction",{"2":{"324":1}}],["transferevent",{"2":{"324":1,"381":2}}],["transferaction",{"2":{"164":1}}],["transfer",{"2":{"112":1,"162":3,"164":2,"169":1,"171":2,"231":1,"317":2,"324":2,"379":2,"381":4,"382":3,"386":3,"387":3,"388":7,"393":1,"397":1,"449":1}}],["transactionindex",{"2":{"409":2}}],["transactionreceipts",{"2":{"355":1}}],["transactionhash",{"2":{"340":2}}],["transactionfactory",{"0":{"266":1},"2":{"266":4,"274":2}}],["transaction",{"0":{"18":1,"60":1,"65":1,"68":1,"73":1,"75":1,"104":1,"109":1,"245":1,"265":1,"268":1,"276":1,"290":1,"294":1,"337":1,"338":1,"352":1,"372":1,"385":1,"407":1,"424":1,"432":1,"442":1},"1":{"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1,"71":1,"72":1,"73":1,"74":1,"75":1,"76":1,"77":1,"78":1,"79":1,"80":1,"81":1,"269":1,"270":1,"271":1,"272":1,"338":1},"2":{"11":1,"18":3,"26":2,"49":1,"50":1,"51":2,"59":1,"60":2,"61":1,"62":4,"64":1,"68":2,"72":1,"73":1,"77":1,"80":3,"103":2,"104":3,"109":1,"111":1,"192":2,"209":5,"210":1,"215":1,"218":2,"230":1,"233":2,"236":1,"237":1,"239":1,"241":1,"242":2,"244":1,"245":3,"246":1,"248":2,"262":1,"265":2,"267":1,"276":4,"278":1,"279":2,"282":1,"285":3,"287":1,"289":1,"290":1,"292":1,"294":1,"295":1,"296":1,"297":1,"329":2,"330":2,"337":3,"338":4,"339":2,"341":1,"342":1,"350":1,"352":2,"354":4,"355":2,"358":1,"359":1,"365":3,"372":2,"379":2,"385":3,"397":3,"399":1,"407":2,"409":2,"414":1,"415":1,"437":1,"442":1,"444":1,"448":1,"452":1,"455":2}}],["transactionstrie",{"2":{"119":1,"127":1}}],["transactions",{"0":{"67":1,"69":1,"267":1,"269":1,"270":1,"271":1,"272":1,"274":1,"275":1,"285":1,"286":1,"287":1},"2":{"9":1,"11":1,"38":1,"60":1,"62":2,"64":1,"65":3,"67":1,"68":1,"69":3,"70":1,"72":3,"73":3,"190":1,"191":1,"215":1,"217":2,"218":3,"219":1,"230":1,"240":1,"241":1,"242":1,"248":1,"262":2,"265":4,"266":1,"267":1,"269":1,"270":1,"271":1,"272":1,"278":1,"279":1,"282":1,"286":3,"287":1,"288":1,"289":2,"290":5,"292":2,"293":2,"294":2,"295":1,"296":3,"297":1,"337":3,"343":1,"350":1,"360":2,"372":3,"392":1,"396":1,"409":4,"438":1,"442":2,"446":1,"452":1,"455":1,"465":1,"470":1}}],["transport",{"2":{"4":4,"133":1,"145":1,"212":1,"222":1,"391":1,"394":1,"395":2,"403":1,"409":1,"412":2,"451":1,"457":1,"466":1}}],["txresult",{"2":{"330":1,"399":2}}],["txreceiptwithtype",{"2":{"237":1}}],["txreceipt",{"2":{"237":2,"245":2,"339":1,"355":1}}],["txdata",{"2":{"277":1}}],["txhash",{"2":{"215":2,"218":4,"224":2,"237":1,"245":1,"287":1,"337":1,"339":1}}],["txhashes",{"2":{"69":2,"286":1}}],["txsinpool",{"2":{"78":1,"292":1}}],["txsbypriceandnonce",{"2":{"69":1,"286":1,"296":1,"337":1}}],["txs",{"2":{"64":1,"286":2,"289":1,"372":2}}],["txindex",{"2":{"51":1,"245":2,"246":2}}],["txpooloptions",{"2":{"283":1}}],["txpoolobject",{"2":{"80":1,"292":1}}],["txpool",{"0":{"80":1,"279":1,"282":1},"1":{"280":1,"281":1,"282":1,"283":2,"284":1,"285":1,"286":1,"287":1,"288":1,"289":1,"290":1,"291":1,"292":1,"293":1,"294":1,"295":1,"296":1,"297":1},"2":{"18":1,"60":1,"61":3,"64":1,"67":2,"68":2,"69":3,"70":1,"72":4,"76":1,"78":2,"80":1,"279":2,"280":1,"282":4,"285":2,"286":3,"287":2,"288":4,"292":1,"296":9,"329":1,"337":1,"442":1,"465":1}}],["tx",{"0":{"262":1},"1":{"263":1,"264":1,"265":1,"266":1,"267":1,"268":1,"269":1,"270":1,"271":1,"272":1,"273":1,"274":1,"275":1,"276":1,"277":1,"278":1},"2":{"18":1,"26":3,"27":1,"45":2,"46":1,"51":4,"54":2,"61":3,"64":1,"67":2,"75":1,"76":1,"80":2,"170":1,"215":2,"218":5,"239":1,"246":2,"262":3,"263":1,"266":4,"267":2,"274":2,"275":1,"277":2,"289":1,"330":1,"337":1,"352":1,"354":1,"355":1,"358":1,"360":2,"365":1,"370":2,"372":5,"379":2,"385":2,"388":3,"392":2,"397":4,"399":3,"400":2,"403":2,"404":4,"407":4,"409":5,"410":3,"438":2,"448":1,"467":1,"470":1}}],["template",{"2":{"363":1,"365":1}}],["testnet",{"2":{"148":1,"152":2,"465":1}}],["tests",{"2":{"10":1,"341":1,"455":1}}],["testing",{"0":{"106":1,"387":1,"396":1,"398":1,"400":1,"401":1,"403":1,"404":1,"405":1,"472":1},"1":{"107":1,"108":1,"109":1,"110":1,"397":1,"398":1,"399":2,"400":2,"401":1,"402":2,"403":2,"404":2,"405":1,"406":2,"407":2,"408":1,"409":1,"410":1},"2":{"10":1,"13":1,"15":1,"106":1,"389":1,"396":3,"403":1,"408":1,"416":2,"417":1,"420":1,"455":1,"464":1}}],["testaddress",{"2":{"4":3}}],["test",{"0":{"226":1,"397":1,"416":1,"426":1},"1":{"227":1,"228":1,"229":1,"427":1,"428":1,"429":1},"2":{"4":1,"219":2,"304":1,"387":2,"394":1,"397":2,"399":1,"400":1,"402":1,"403":2,"404":1,"406":1,"415":1,"416":6,"426":1,"438":1,"455":4,"470":1,"471":1}}],["tevmdumpstate",{"2":{"420":3}}],["tevmdeploy",{"2":{"219":1,"418":2}}],["tevmloadstate",{"2":{"420":3}}],["tevmstate",{"2":{"252":1}}],["tevmsendapi",{"0":{"178":1},"2":{"178":3}}],["tevmsetaccounterror",{"2":{"89":1}}],["tevmsetaccount",{"2":{"4":1,"217":2,"419":2}}],["tevmsetaccounthandler",{"2":{"3":1}}],["tevmcontract",{"2":{"219":1,"418":2}}],["tevmcall",{"2":{"9":1,"217":2,"218":3,"219":1,"418":2}}],["tevmmine",{"2":{"217":3,"218":2,"420":3}}],["tevmactions",{"0":{"181":1},"2":{"181":2}}],["tevmactionsapi",{"0":{"177":1,"184":1},"2":{"177":3}}],["tevmjsonrpcbulkrequesthandler",{"2":{"178":1}}],["tevmjsonrpcrequesthandler",{"2":{"178":1}}],["tevm`",{"2":{"4":1}}],["tevmgetaccounterror",{"2":{"85":1}}],["tevmgetaccount",{"2":{"4":1,"217":2,"419":2}}],["tevm",{"0":{"3":1,"26":1,"96":1,"173":1,"195":1,"217":1,"233":1,"249":1,"262":1,"279":1,"308":1,"343":1,"417":1,"420":1,"437":1,"438":1,"464":1,"467":1},"1":{"97":1,"98":1,"99":1,"100":1,"101":1,"102":1,"103":1,"104":1,"105":1,"106":1,"107":1,"108":1,"109":1,"110":1,"111":1,"112":1,"113":1,"114":1,"174":1,"175":1,"176":1,"177":1,"178":1,"179":1,"180":1,"181":1,"182":1,"183":1,"184":1,"185":1,"186":1,"196":1,"197":1,"198":1,"199":1,"200":1,"201":1,"202":1,"203":1,"204":1,"205":1,"234":1,"235":1,"236":1,"237":1,"238":1,"239":1,"240":1,"241":1,"242":1,"243":1,"244":1,"245":1,"246":1,"247":1,"248":1,"250":1,"251":1,"252":1,"253":1,"254":1,"255":1,"256":1,"257":1,"258":1,"259":1,"260":1,"261":1,"263":1,"264":1,"265":1,"266":1,"267":1,"268":1,"269":1,"270":1,"271":1,"272":1,"273":1,"274":1,"275":1,"276":1,"277":1,"278":1,"280":1,"281":1,"282":1,"283":1,"284":1,"285":1,"286":1,"287":1,"288":1,"289":1,"290":1,"291":1,"292":1,"293":1,"294":1,"295":1,"296":1,"297":1,"309":1,"310":1,"311":1,"312":1,"313":1,"314":1,"315":1,"316":1,"317":1,"318":1,"319":1,"320":1,"321":1,"322":1,"323":1,"324":1,"325":1,"326":1,"327":1,"344":1,"345":1,"346":1,"347":1,"348":1,"349":1,"350":1,"351":1,"352":1,"353":1,"354":1,"355":1,"356":1,"357":1,"358":1,"359":1,"360":1,"361":1,"418":1,"419":1,"420":1,"465":1,"466":1,"467":1,"468":1},"2":{"0":1,"1":1,"3":5,"4":8,"5":4,"6":2,"8":1,"16":4,"17":6,"18":4,"19":6,"20":3,"21":6,"22":3,"23":4,"25":1,"26":7,"27":6,"36":1,"37":1,"50":1,"51":4,"52":1,"61":3,"70":1,"73":1,"82":1,"86":2,"91":1,"96":4,"97":1,"112":2,"114":1,"115":1,"117":2,"119":3,"120":2,"121":2,"123":2,"124":2,"125":2,"128":1,"129":1,"145":2,"146":2,"149":1,"154":2,"155":1,"156":1,"158":1,"160":1,"161":1,"162":1,"164":1,"165":1,"166":1,"173":3,"174":1,"176":1,"177":2,"178":1,"180":1,"181":3,"186":1,"187":1,"189":1,"195":2,"196":1,"198":9,"200":1,"201":2,"205":2,"206":1,"207":2,"210":1,"212":2,"213":2,"216":1,"217":9,"218":2,"219":3,"220":1,"221":1,"222":2,"224":1,"225":1,"232":1,"233":1,"234":1,"236":1,"249":3,"250":3,"253":1,"255":2,"256":3,"262":3,"263":1,"265":1,"266":1,"267":2,"274":1,"277":1,"279":2,"280":1,"282":1,"290":1,"296":2,"297":1,"298":3,"299":2,"302":2,"303":1,"307":3,"308":3,"309":1,"312":1,"313":1,"315":1,"316":1,"317":1,"318":1,"319":1,"320":1,"322":1,"323":1,"324":1,"325":1,"326":2,"328":1,"343":2,"344":1,"346":5,"360":3,"361":2,"362":1,"363":4,"365":3,"366":1,"369":2,"370":1,"375":1,"376":3,"378":2,"386":1,"387":2,"388":2,"391":1,"396":1,"397":2,"399":1,"409":1,"410":1,"411":1,"412":4,"413":1,"415":2,"417":1,"418":1,"419":1,"420":3,"437":1,"438":2,"439":1,"445":1,"446":4,"447":1,"449":2,"451":1,"461":4,"462":1,"464":1,"466":1}}],["th",{"2":{"373":6}}],["thin",{"2":{"302":1}}],["this",{"2":{"0":1,"3":1,"85":1,"187":1,"206":1,"239":1,"328":1,"362":1,"375":1,"396":1,"411":1,"466":1}}],["through",{"2":{"50":1,"141":1,"159":1,"187":1,"206":1,"416":1}}],["thrown",{"2":{"158":1,"306":2}}],["throws",{"2":{"144":1,"301":1,"305":1,"359":1}}],["throwing",{"2":{"113":1}}],["throwonfail",{"2":{"94":1,"113":2}}],["throw",{"2":{"31":1,"32":1,"34":2,"54":1,"58":1,"169":1,"231":1,"388":1,"402":1}}],["than",{"2":{"48":1,"219":1}}],["that",{"2":{"4":1,"26":1,"36":1,"48":1,"54":1,"60":1,"85":1,"89":1,"165":2,"180":1,"181":1,"201":1,"217":1,"267":1,"328":1,"392":1,"409":1,"437":1,"439":1,"440":1,"464":1,"466":1}}],["then",{"2":{"466":1}}],["thead",{"2":{"373":2}}],["them",{"2":{"152":1}}],["they",{"2":{"60":1,"267":1}}],["their",{"2":{"51":1,"292":1,"328":1}}],["these",{"2":{"25":1,"176":1,"298":1,"307":1,"416":1,"420":1,"449":1}}],["the",{"0":{"37":1},"2":{"3":6,"4":2,"6":1,"8":2,"16":1,"17":1,"24":1,"25":1,"26":3,"39":1,"48":2,"50":1,"51":1,"52":1,"55":1,"56":1,"57":1,"60":1,"64":1,"65":1,"68":1,"70":1,"73":1,"83":2,"84":1,"85":1,"87":1,"96":4,"99":2,"113":1,"115":1,"116":1,"123":2,"124":2,"125":1,"129":3,"131":2,"132":1,"136":3,"138":1,"140":1,"143":1,"144":1,"146":1,"148":1,"149":1,"151":1,"152":1,"157":1,"158":2,"159":2,"161":1,"163":1,"164":1,"166":1,"173":1,"176":8,"177":6,"178":1,"185":1,"187":1,"190":1,"191":1,"195":6,"198":2,"200":2,"201":1,"203":2,"204":1,"207":1,"212":1,"213":1,"214":3,"217":3,"218":1,"219":2,"224":3,"231":1,"233":1,"236":1,"237":1,"239":1,"247":1,"249":4,"250":1,"252":1,"262":4,"265":1,"277":1,"279":3,"282":2,"288":3,"290":1,"292":2,"294":1,"296":2,"298":1,"301":1,"303":1,"305":1,"307":1,"308":3,"326":2,"328":1,"329":1,"330":1,"333":1,"334":1,"335":1,"337":1,"339":1,"343":6,"350":2,"354":1,"355":4,"359":1,"360":2,"362":1,"370":3,"375":1,"391":2,"393":1,"396":1,"397":1,"399":1,"400":1,"402":1,"403":1,"404":1,"406":1,"407":1,"409":5,"410":2,"412":1,"438":1,"446":1,"449":1,"453":1,"462":2,"463":1,"464":1,"465":2,"470":1}}],["tomatchsnapshot",{"2":{"402":1}}],["torlp",{"2":{"307":1,"318":2}}],["top",{"2":{"218":1,"369":1}}],["topic2",{"2":{"246":1}}],["topic1",{"2":{"246":1}}],["topiclogs",{"2":{"55":1}}],["topic",{"2":{"55":2,"58":1,"246":2}}],["topics",{"0":{"35":1,"49":1,"59":1,"81":1,"95":1,"172":1,"194":1,"216":1,"261":1,"342":1,"374":1,"389":1,"408":1},"2":{"185":1,"215":1,"237":1,"246":1,"317":1,"332":2,"339":1,"340":2,"386":2,"400":2}}],["tostring",{"2":{"189":5,"190":3,"191":1,"192":1,"201":1,"302":1,"365":4,"368":2,"372":3,"373":1,"409":1}}],["tokenaddress",{"2":{"378":2,"379":1,"381":1,"382":1,"410":2}}],["tokens",{"2":{"164":1,"177":1,"184":1}}],["token",{"0":{"410":1},"2":{"155":1,"163":3,"164":9,"165":1,"387":8,"410":1}}],["tojson",{"0":{"125":1},"2":{"125":1,"276":1}}],["tooling",{"2":{"473":1}}],["tools",{"0":{"20":1},"2":{"14":1,"206":1,"411":1}}],["too",{"2":{"76":2,"295":2}}],["tobedefined",{"2":{"399":1,"404":1}}],["tobe",{"2":{"397":1,"399":2,"400":2}}],["tobeundefined",{"2":{"397":1,"399":2,"403":1,"404":1}}],["tobytes",{"2":{"55":2}}],["toblock",{"2":{"55":4,"56":1,"246":1,"339":1,"400":1}}],["totalsupply",{"2":{"164":1}}],["total",{"2":{"64":1,"276":1,"373":1}}],["totalgas",{"2":{"41":2,"43":2,"47":4,"191":8,"373":4}}],["totaltime",{"2":{"41":4,"43":2,"45":1}}],["together",{"2":{"16":1,"439":1}}],["to",{"0":{"379":1},"2":{"0":1,"3":4,"6":1,"25":2,"26":2,"42":2,"47":1,"48":1,"51":1,"54":3,"57":1,"61":1,"62":1,"64":1,"75":1,"83":1,"84":2,"87":1,"88":1,"94":1,"99":1,"110":1,"112":3,"113":2,"125":1,"132":1,"136":1,"146":1,"149":1,"150":1,"158":1,"162":2,"163":3,"168":1,"171":2,"177":1,"181":1,"183":1,"184":1,"187":2,"189":2,"193":1,"200":1,"201":2,"207":1,"214":1,"215":3,"217":2,"219":1,"224":1,"228":1,"231":1,"237":2,"247":1,"257":1,"262":1,"267":1,"269":1,"274":2,"292":1,"293":2,"306":1,"307":1,"312":3,"315":2,"317":1,"318":1,"325":2,"330":1,"350":1,"355":1,"362":1,"365":1,"369":1,"370":1,"372":5,"375":1,"379":1,"381":5,"382":3,"384":1,"385":1,"386":2,"387":3,"388":3,"391":1,"392":1,"396":1,"397":2,"399":1,"404":1,"406":1,"407":4,"409":1,"410":2,"411":1,"414":1,"415":1,"418":1,"420":2,"446":1,"449":2,"465":1,"470":1}}]],"serializationVersion":2}
